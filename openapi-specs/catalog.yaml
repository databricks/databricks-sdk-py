openapi: 3.0.0
info:
  title: Databricks Catalog API
  description: API for Databricks catalog service
  version: 1.0.0
  contact:
    name: Databricks
    url: https://databricks.com
servers:
- url: https://accounts.cloud.databricks.com
  description: Databricks Account API
  variables:
    account_id:
      default: your-account-id
      description: Databricks account ID
paths:
  /api/2.0/accounts/{account_id}/metastores:
    post:
      operationId: create
      summary: Creates a Unity Catalog metastore.
      description: 'Creates a Unity Catalog metastore.


        :param metastore_info: :class:`CreateAccountsMetastore` (optional)


        :returns: :class:`AccountsCreateMetastoreResponse`'
      tags:
      - catalog
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAccountsMetastore'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountsCreateMetastoreResponse'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not found
        '500':
          description: Internal server error
    get:
      operationId: list
      summary: Gets all Unity Catalog metastores associated with an account specified
        by ID.
      description: 'Gets all Unity Catalog metastores associated with an account specified
        by ID.



        :returns: Iterator over :class:`MetastoreInfo`'
      tags:
      - catalog
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetastoreInfo'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not found
        '500':
          description: Internal server error
  /api/2.1/unity-catalog/artifact-allowlists/{value}:
    get:
      operationId: get
      summary: 'Get the artifact allowlist of a certain artifact type. The caller
        must be a metastore admin or have

        the **MANAGE ALLOWLIST** privilege on the metastore.'
      description: "Get the artifact allowlist of a certain artifact type. The caller\
        \ must be a metastore admin or have\nthe **MANAGE ALLOWLIST** privilege on\
        \ the metastore.\n\n:param artifact_type: :class:`ArtifactType`\n  The artifact\
        \ type of the allowlist.\n\n:returns: :class:`ArtifactAllowlistInfo`"
      tags:
      - catalog
      parameters:
      - name: artifact_type
        description: :class:`ArtifactType` The artifact type of the allowlist.
        required: true
        schema:
          type: string
          enum:
          - INIT_SCRIPT
          - LIBRARY_JAR
          - LIBRARY_MAVEN
        in: query
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArtifactAllowlistInfo'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not found
        '500':
          description: Internal server error
  /api/2.1/unity-catalog/catalogs:
    post:
      operationId: create
      summary: 'Creates a new catalog instance in the parent metastore if the caller
        is a metastore admin or has the

        **CREATE_CATALOG** privilege.'
      description: "Creates a new catalog instance in the parent metastore if the\
        \ caller is a metastore admin or has the\n**CREATE_CATALOG** privilege.\n\n\
        :param name: str\n  Name of catalog.\n:param comment: str (optional)\n  User-provided\
        \ free-form text description.\n:param connection_name: str (optional)\n  The\
        \ name of the connection to an external data source.\n:param options: Dict[str,str]\
        \ (optional)\n  A map of key-value properties attached to the securable.\n\
        :param properties: Dict[str,str] (optional)\n  A map of key-value properties\
        \ attached to the securable.\n:param provider_name: str (optional)\n  The\
        \ name of delta sharing provider.\n\n  A Delta Sharing catalog is a catalog\
        \ that is based on a Delta share on a remote sharing server.\n:param share_name:\
        \ str (optional)\n  The name of the share under the share provider.\n:param\
        \ storage_root: str (optional)\n  Storage root URL for managed tables within\
        \ catalog.\n\n:returns: :class:`CatalogInfo`"
      tags:
      - catalog
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: str Name of catalog.
                comment:
                  type: string
                  description: str (optional) User-provided free-form text description.
                connection_name:
                  type: string
                  description: str (optional) The name of the connection to an external
                    data source.
                options:
                  type: object
                  additionalProperties: true
                  description: Dict[str,str] (optional) A map of key-value properties
                    attached to the securable.
                properties:
                  type: object
                  additionalProperties: true
                  description: Dict[str,str] (optional) A map of key-value properties
                    attached to the securable.
                provider_name:
                  type: string
                  description: str (optional) The name of delta sharing provider.
                    A Delta Sharing catalog is a catalog that is based on a Delta
                    share on a remote sharing server.
                share_name:
                  type: string
                  description: str (optional) The name of the share under the share
                    provider.
                storage_root:
                  type: string
                  description: str (optional) Storage root URL for managed tables
                    within catalog.
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CatalogInfo'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not found
        '500':
          description: Internal server error
    get:
      operationId: list
      summary: 'Gets an array of catalogs in the metastore. If the caller is the metastore
        admin, all catalogs will be

        retrieved. Otherwise, only catalogs owned by the caller (or for which the
        caller has the

        **USE_CATALOG** privilege) will be retrieved. There is no guarantee of a specific
        ordering of the

        elements in the array.'
      description: "Gets an array of catalogs in the metastore. If the caller is the\
        \ metastore admin, all catalogs will be\nretrieved. Otherwise, only catalogs\
        \ owned by the caller (or for which the caller has the\n**USE_CATALOG** privilege)\
        \ will be retrieved. There is no guarantee of a specific ordering of the\n\
        elements in the array.\n\nNOTE: we recommend using max_results=0 to use the\
        \ paginated version of this API. Unpaginated calls\nwill be deprecated soon.\n\
        \nPAGINATION BEHAVIOR: When using pagination (max_results >= 0), a page may\
        \ contain zero results while\nstill providing a next_page_token. Clients must\
        \ continue reading pages until next_page_token is\nabsent, which is the only\
        \ indication that the end of results has been reached. This behavior follows\n\
        Google AIP-158 guidelines.\n\n:param include_browse: bool (optional)\n  Whether\
        \ to include catalogs in the response for which the principal can only access\
        \ selective\n  metadata for\n:param include_unbound: bool (optional)\n  Whether\
        \ to include catalogs not bound to the workspace. Effective only if the user\
        \ has permission to\n  update the catalog–workspace binding.\n:param max_results:\
        \ int (optional)\n  Maximum number of catalogs to return. - when set to 0,\
        \ the page length is set to a server configured\n  value (recommended); -\
        \ when set to a value greater than 0, the page length is the minimum of this\n\
        \  value and a server configured value; - when set to a value less than 0,\
        \ an invalid parameter error\n  is returned; - If not set, all valid catalogs\
        \ are returned (not recommended). - Note: The number of\n  returned catalogs\
        \ might be less than the specified max_results size, even zero. The only definitive\n\
        \  indication that no further catalogs can be fetched is when the next_page_token\
        \ is unset from the\n  response.\n:param page_token: str (optional)\n  Opaque\
        \ pagination token to go to next page based on previous query.\n\n:returns:\
        \ Iterator over :class:`CatalogInfo`"
      tags:
      - catalog
      parameters:
      - name: include_browse
        description: bool (optional) Whether to include catalogs in the response for
          which the principal can only access selective metadata for
        required: false
        schema:
          type: boolean
        in: query
      - name: include_unbound
        description: bool (optional) Whether to include catalogs not bound to the
          workspace. Effective only if the user has permission to update the catalog–workspace
          binding.
        required: false
        schema:
          type: boolean
        in: query
      - name: max_results
        description: 'int (optional) Maximum number of catalogs to return. - when
          set to 0, the page length is set to a server configured value (recommended);
          - when set to a value greater than 0, the page length is the minimum of
          this value and a server configured value; - when set to a value less than
          0, an invalid parameter error is returned; - If not set, all valid catalogs
          are returned (not recommended). - Note: The number of returned catalogs
          might be less than the specified max_results size, even zero. The only definitive
          indication that no further catalogs can be fetched is when the next_page_token
          is unset from the response.'
        required: false
        schema:
          type: integer
        in: query
      - name: page_token
        description: str (optional) Opaque pagination token to go to next page based
          on previous query.
        required: false
        schema:
          type: string
        in: query
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CatalogInfo'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not found
        '500':
          description: Internal server error
  /api/2.1/unity-catalog/catalogs/{name}:
    delete:
      operationId: delete
      summary: 'Deletes the catalog that matches the supplied name. The caller must
        be a metastore admin or the owner

        of the catalog.'
      description: "Deletes the catalog that matches the supplied name. The caller\
        \ must be a metastore admin or the owner\nof the catalog.\n\n:param name:\
        \ str\n  The name of the catalog.\n:param force: bool (optional)\n  Force\
        \ deletion even if the catalog is not empty."
      tags:
      - catalog
      parameters:
      - name: name
        description: str The name of the catalog.
        required: true
        schema:
          type: string
        in: path
      - name: force
        description: bool (optional) Force deletion even if the catalog is not empty.
        required: false
        schema:
          type: boolean
        in: query
      responses:
        '200':
          description: Success
    get:
      operationId: get
      summary: 'Gets the specified catalog in a metastore. The caller must be a metastore
        admin, the owner of the

        catalog, or a user that has the **USE_CATALOG** privilege set for their account.'
      description: "Gets the specified catalog in a metastore. The caller must be\
        \ a metastore admin, the owner of the\ncatalog, or a user that has the **USE_CATALOG**\
        \ privilege set for their account.\n\n:param name: str\n  The name of the\
        \ catalog.\n:param include_browse: bool (optional)\n  Whether to include catalogs\
        \ in the response for which the principal can only access selective\n  metadata\
        \ for\n\n:returns: :class:`CatalogInfo`"
      tags:
      - catalog
      parameters:
      - name: name
        description: str The name of the catalog.
        required: true
        schema:
          type: string
        in: path
      - name: include_browse
        description: bool (optional) Whether to include catalogs in the response for
          which the principal can only access selective metadata for
        required: false
        schema:
          type: boolean
        in: query
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CatalogInfo'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not found
        '500':
          description: Internal server error
    patch:
      operationId: update
      summary: 'Updates the catalog that matches the supplied name. The caller must
        be either the owner of the

        catalog, or a metastore admin (when changing the owner field of the catalog).'
      description: "Updates the catalog that matches the supplied name. The caller\
        \ must be either the owner of the\ncatalog, or a metastore admin (when changing\
        \ the owner field of the catalog).\n\n:param name: str\n  The name of the\
        \ catalog.\n:param comment: str (optional)\n  User-provided free-form text\
        \ description.\n:param enable_predictive_optimization: :class:`EnablePredictiveOptimization`\
        \ (optional)\n  Whether predictive optimization should be enabled for this\
        \ object and objects under it.\n:param isolation_mode: :class:`CatalogIsolationMode`\
        \ (optional)\n  Whether the current securable is accessible from all workspaces\
        \ or a specific set of workspaces.\n:param new_name: str (optional)\n  New\
        \ name for the catalog.\n:param options: Dict[str,str] (optional)\n  A map\
        \ of key-value properties attached to the securable.\n:param owner: str (optional)\n\
        \  Username of current owner of catalog.\n:param properties: Dict[str,str]\
        \ (optional)\n  A map of key-value properties attached to the securable.\n\
        \n:returns: :class:`CatalogInfo`"
      tags:
      - catalog
      parameters:
      - name: name
        description: str The name of the catalog.
        required: true
        schema:
          type: string
        in: path
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                comment:
                  type: string
                  description: str (optional) User-provided free-form text description.
                enable_predictive_optimization:
                  type: string
                  enum:
                  - DISABLE
                  - ENABLE
                  - INHERIT
                  description: :class:`EnablePredictiveOptimization` (optional) Whether
                    predictive optimization should be enabled for this object and
                    objects under it.
                isolation_mode:
                  type: string
                  enum:
                  - ISOLATED
                  - OPEN
                  description: :class:`CatalogIsolationMode` (optional) Whether the
                    current securable is accessible from all workspaces or a specific
                    set of workspaces.
                new_name:
                  type: string
                  description: str (optional) New name for the catalog.
                options:
                  type: object
                  additionalProperties: true
                  description: Dict[str,str] (optional) A map of key-value properties
                    attached to the securable.
                owner:
                  type: string
                  description: str (optional) Username of current owner of catalog.
                properties:
                  type: object
                  additionalProperties: true
                  description: Dict[str,str] (optional) A map of key-value properties
                    attached to the securable.
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CatalogInfo'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not found
        '500':
          description: Internal server error
  /api/2.1/unity-catalog/connections:
    post:
      operationId: create
      summary: Creates a new connection
      description: "Creates a new connection\n\nCreates a new connection to an external\
        \ data source. It allows users to specify connection details and\nconfigurations\
        \ for interaction with the external server.\n\n:param name: str\n  Name of\
        \ the connection.\n:param connection_type: :class:`ConnectionType`\n  The\
        \ type of connection.\n:param options: Dict[str,str]\n  A map of key-value\
        \ properties attached to the securable.\n:param comment: str (optional)\n\
        \  User-provided free-form text description.\n:param properties: Dict[str,str]\
        \ (optional)\n  A map of key-value properties attached to the securable.\n\
        :param read_only: bool (optional)\n  If the connection is read only.\n\n:returns:\
        \ :class:`ConnectionInfo`"
      tags:
      - catalog
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: str Name of the connection.
                connection_type:
                  type: string
                  enum:
                  - BIGQUERY
                  - DATABRICKS
                  - GA4_RAW_DATA
                  - GLUE
                  - HIVE_METASTORE
                  - HTTP
                  - MYSQL
                  - ORACLE
                  - PALANTIR
                  - POSTGRESQL
                  - POWER_BI
                  - REDSHIFT
                  - SALESFORCE
                  - SALESFORCE_DATA_CLOUD
                  - SERVICENOW
                  - SNOWFLAKE
                  - SQLDW
                  - SQLSERVER
                  - TERADATA
                  - UNKNOWN_CONNECTION_TYPE
                  - WORKDAY_RAAS
                  description: :class:`ConnectionType` The type of connection.
                options:
                  type: object
                  additionalProperties: true
                  description: Dict[str,str] A map of key-value properties attached
                    to the securable.
                comment:
                  type: string
                  description: str (optional) User-provided free-form text description.
                properties:
                  type: object
                  additionalProperties: true
                  description: Dict[str,str] (optional) A map of key-value properties
                    attached to the securable.
                read_only:
                  type: boolean
                  description: bool (optional) If the connection is read only.
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectionInfo'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not found
        '500':
          description: Internal server error
    get:
      operationId: list
      summary: List all connections.
      description: "List all connections.\n\nNOTE: we recommend using max_results=0\
        \ to use the paginated version of this API. Unpaginated calls\nwill be deprecated\
        \ soon.\n\nPAGINATION BEHAVIOR: When using pagination (max_results >= 0),\
        \ a page may contain zero results while\nstill providing a next_page_token.\
        \ Clients must continue reading pages until next_page_token is\nabsent, which\
        \ is the only indication that the end of results has been reached. This behavior\
        \ follows\nGoogle AIP-158 guidelines.\n\n:param max_results: int (optional)\n\
        \  Maximum number of connections to return. - If not set, all connections\
        \ are returned (not\n  recommended). - when set to a value greater than 0,\
        \ the page length is the minimum of this value and\n  a server configured\
        \ value; - when set to 0, the page length is set to a server configured value\n\
        \  (recommended); - when set to a value less than 0, an invalid parameter\
        \ error is returned;\n:param page_token: str (optional)\n  Opaque pagination\
        \ token to go to next page based on previous query.\n\n:returns: Iterator\
        \ over :class:`ConnectionInfo`"
      tags:
      - catalog
      parameters:
      - name: max_results
        description: int (optional) Maximum number of connections to return. - If
          not set, all connections are returned (not recommended). - when set to a
          value greater than 0, the page length is the minimum of this value and a
          server configured value; - when set to 0, the page length is set to a server
          configured value (recommended); - when set to a value less than 0, an invalid
          parameter error is returned;
        required: false
        schema:
          type: integer
        in: query
      - name: page_token
        description: str (optional) Opaque pagination token to go to next page based
          on previous query.
        required: false
        schema:
          type: string
        in: query
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectionInfo'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not found
        '500':
          description: Internal server error
  /api/2.1/unity-catalog/connections/{name}:
    delete:
      operationId: delete
      summary: Deletes the connection that matches the supplied name.
      description: "Deletes the connection that matches the supplied name.\n\n:param\
        \ name: str\n  The name of the connection to be deleted."
      tags:
      - catalog
      parameters:
      - name: name
        description: str The name of the connection to be deleted.
        required: true
        schema:
          type: string
        in: path
      responses:
        '200':
          description: Success
    get:
      operationId: get
      summary: Gets a connection from it's name.
      description: "Gets a connection from it's name.\n\n:param name: str\n  Name\
        \ of the connection.\n\n:returns: :class:`ConnectionInfo`"
      tags:
      - catalog
      parameters:
      - name: name
        description: str Name of the connection.
        required: true
        schema:
          type: string
        in: path
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectionInfo'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not found
        '500':
          description: Internal server error
    patch:
      operationId: update
      summary: Updates the connection that matches the supplied name.
      description: "Updates the connection that matches the supplied name.\n\n:param\
        \ name: str\n  Name of the connection.\n:param options: Dict[str,str]\n  A\
        \ map of key-value properties attached to the securable.\n:param new_name:\
        \ str (optional)\n  New name for the connection.\n:param owner: str (optional)\n\
        \  Username of current owner of the connection.\n\n:returns: :class:`ConnectionInfo`"
      tags:
      - catalog
      parameters:
      - name: name
        description: str Name of the connection.
        required: true
        schema:
          type: string
        in: path
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                options:
                  type: object
                  additionalProperties: true
                  description: Dict[str,str] A map of key-value properties attached
                    to the securable.
                new_name:
                  type: string
                  description: str (optional) New name for the connection.
                owner:
                  type: string
                  description: str (optional) Username of current owner of the connection.
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectionInfo'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not found
        '500':
          description: Internal server error
  /api/2.1/unity-catalog/credentials:
    post:
      operationId: create_credential
      summary: 'Creates a new credential. The type of credential to be created is
        determined by the **purpose** field,

        which should be either **SERVICE** or **STORAGE**.'
      description: "Creates a new credential. The type of credential to be created\
        \ is determined by the **purpose** field,\nwhich should be either **SERVICE**\
        \ or **STORAGE**.\n\nThe caller must be a metastore admin or have the metastore\
        \ privilege **CREATE_STORAGE_CREDENTIAL** for\nstorage credentials, or **CREATE_SERVICE_CREDENTIAL**\
        \ for service credentials.\n\n:param name: str\n  The credential name. The\
        \ name must be unique among storage and service credentials within the\n \
        \ metastore.\n:param aws_iam_role: :class:`AwsIamRole` (optional)\n  The AWS\
        \ IAM role configuration.\n:param azure_managed_identity: :class:`AzureManagedIdentity`\
        \ (optional)\n  The Azure managed identity configuration.\n:param azure_service_principal:\
        \ :class:`AzureServicePrincipal` (optional)\n  The Azure service principal\
        \ configuration.\n:param comment: str (optional)\n  Comment associated with\
        \ the credential.\n:param databricks_gcp_service_account: :class:`DatabricksGcpServiceAccount`\
        \ (optional)\n  The Databricks managed GCP service account configuration.\n\
        :param purpose: :class:`CredentialPurpose` (optional)\n  Indicates the purpose\
        \ of the credential.\n:param read_only: bool (optional)\n  Whether the credential\
        \ is usable only for read operations. Only applicable when purpose is\n  **STORAGE**.\n\
        :param skip_validation: bool (optional)\n  Optional. Supplying true to this\
        \ argument skips validation of the created set of credentials.\n\n:returns:\
        \ :class:`CredentialInfo`"
      tags:
      - catalog
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: str The credential name. The name must be unique among
                    storage and service credentials within the metastore.
                aws_iam_role:
                  $ref: '#/components/schemas/AwsIamRole'
                azure_managed_identity:
                  $ref: '#/components/schemas/AzureManagedIdentity'
                azure_service_principal:
                  $ref: '#/components/schemas/AzureServicePrincipal'
                comment:
                  type: string
                  description: str (optional) Comment associated with the credential.
                databricks_gcp_service_account:
                  $ref: '#/components/schemas/DatabricksGcpServiceAccount'
                purpose:
                  type: string
                  enum:
                  - SERVICE
                  - STORAGE
                  description: :class:`CredentialPurpose` (optional) Indicates the
                    purpose of the credential.
                read_only:
                  type: boolean
                  description: bool (optional) Whether the credential is usable only
                    for read operations. Only applicable when purpose is **STORAGE**.
                skip_validation:
                  type: boolean
                  description: bool (optional) Optional. Supplying true to this argument
                    skips validation of the created set of credentials.
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CredentialInfo'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not found
        '500':
          description: Internal server error
    get:
      operationId: list_credentials
      summary: Gets an array of credentials (as __CredentialInfo__ objects).
      description: "Gets an array of credentials (as __CredentialInfo__ objects).\n\
        \nThe array is limited to only the credentials that the caller has permission\
        \ to access. If the caller\nis a metastore admin, retrieval of credentials\
        \ is unrestricted. There is no guarantee of a specific\nordering of the elements\
        \ in the array.\n\n:param include_unbound: bool (optional)\n  Whether to include\
        \ credentials not bound to the workspace. Effective only if the user has permission\n\
        \  to update the credential–workspace binding.\n:param max_results: int (optional)\n\
        \  Maximum number of credentials to return. - If not set, the default max\
        \ page size is used. - When set\n  to a value greater than 0, the page length\
        \ is the minimum of this value and a server-configured\n  value. - When set\
        \ to 0, the page length is set to a server-configured value (recommended).\
        \ - When\n  set to a value less than 0, an invalid parameter error is returned.\n\
        :param page_token: str (optional)\n  Opaque token to retrieve the next page\
        \ of results.\n:param purpose: :class:`CredentialPurpose` (optional)\n  Return\
        \ only credentials for the specified purpose.\n\n:returns: Iterator over :class:`CredentialInfo`"
      tags:
      - catalog
      parameters:
      - name: include_unbound
        description: bool (optional) Whether to include credentials not bound to the
          workspace. Effective only if the user has permission to update the credential–workspace
          binding.
        required: false
        schema:
          type: boolean
        in: query
      - name: max_results
        description: int (optional) Maximum number of credentials to return. - If
          not set, the default max page size is used. - When set to a value greater
          than 0, the page length is the minimum of this value and a server-configured
          value. - When set to 0, the page length is set to a server-configured value
          (recommended). - When set to a value less than 0, an invalid parameter error
          is returned.
        required: false
        schema:
          type: integer
        in: query
      - name: page_token
        description: str (optional) Opaque token to retrieve the next page of results.
        required: false
        schema:
          type: string
        in: query
      - name: purpose
        description: :class:`CredentialPurpose` (optional) Return only credentials
          for the specified purpose.
        required: false
        schema:
          type: string
          enum:
          - SERVICE
          - STORAGE
        in: query
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CredentialInfo'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not found
        '500':
          description: Internal server error
  /api/2.1/unity-catalog/credentials/{name_arg}:
    delete:
      operationId: delete_credential
      summary: 'Deletes a service or storage credential from the metastore. The caller
        must be an owner of the

        credential.'
      description: "Deletes a service or storage credential from the metastore. The\
        \ caller must be an owner of the\ncredential.\n\n:param name_arg: str\n  Name\
        \ of the credential.\n:param force: bool (optional)\n  Force an update even\
        \ if there are dependent services (when purpose is **SERVICE**) or dependent\n\
        \  external locations and external tables (when purpose is **STORAGE**)."
      tags:
      - catalog
      parameters:
      - name: name_arg
        description: str Name of the credential.
        required: true
        schema:
          type: string
        in: path
      - name: force
        description: bool (optional) Force an update even if there are dependent services
          (when purpose is **SERVICE**) or dependent external locations and external
          tables (when purpose is **STORAGE**).
        required: false
        schema:
          type: boolean
        in: query
      responses:
        '200':
          description: Success
    get:
      operationId: get_credential
      summary: 'Gets a service or storage credential from the metastore. The caller
        must be a metastore admin, the

        owner of the credential, or have any permission on the credential.'
      description: "Gets a service or storage credential from the metastore. The caller\
        \ must be a metastore admin, the\nowner of the credential, or have any permission\
        \ on the credential.\n\n:param name_arg: str\n  Name of the credential.\n\n\
        :returns: :class:`CredentialInfo`"
      tags:
      - catalog
      parameters:
      - name: name_arg
        description: str Name of the credential.
        required: true
        schema:
          type: string
        in: path
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CredentialInfo'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not found
        '500':
          description: Internal server error
    patch:
      operationId: update_credential
      summary: Updates a service or storage credential on the metastore.
      description: "Updates a service or storage credential on the metastore.\n\n\
        The caller must be the owner of the credential or a metastore admin or have\
        \ the `MANAGE` permission.\nIf the caller is a metastore admin, only the __owner__\
        \ field can be changed.\n\n:param name_arg: str\n  Name of the credential.\n\
        :param aws_iam_role: :class:`AwsIamRole` (optional)\n  The AWS IAM role configuration.\n\
        :param azure_managed_identity: :class:`AzureManagedIdentity` (optional)\n\
        \  The Azure managed identity configuration.\n:param azure_service_principal:\
        \ :class:`AzureServicePrincipal` (optional)\n  The Azure service principal\
        \ configuration.\n:param comment: str (optional)\n  Comment associated with\
        \ the credential.\n:param databricks_gcp_service_account: :class:`DatabricksGcpServiceAccount`\
        \ (optional)\n  The Databricks managed GCP service account configuration.\n\
        :param force: bool (optional)\n  Force an update even if there are dependent\
        \ services (when purpose is **SERVICE**) or dependent\n  external locations\
        \ and external tables (when purpose is **STORAGE**).\n:param isolation_mode:\
        \ :class:`IsolationMode` (optional)\n  Whether the current securable is accessible\
        \ from all workspaces or a specific set of workspaces.\n:param new_name: str\
        \ (optional)\n  New name of credential.\n:param owner: str (optional)\n  Username\
        \ of current owner of credential.\n:param read_only: bool (optional)\n  Whether\
        \ the credential is usable only for read operations. Only applicable when\
        \ purpose is\n  **STORAGE**.\n:param skip_validation: bool (optional)\n  Supply\
        \ true to this argument to skip validation of the updated credential.\n\n\
        :returns: :class:`CredentialInfo`"
      tags:
      - catalog
      parameters:
      - name: name_arg
        description: str Name of the credential.
        required: true
        schema:
          type: string
        in: path
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                aws_iam_role:
                  $ref: '#/components/schemas/AwsIamRole'
                azure_managed_identity:
                  $ref: '#/components/schemas/AzureManagedIdentity'
                azure_service_principal:
                  $ref: '#/components/schemas/AzureServicePrincipal'
                comment:
                  type: string
                  description: str (optional) Comment associated with the credential.
                databricks_gcp_service_account:
                  $ref: '#/components/schemas/DatabricksGcpServiceAccount'
                force:
                  type: boolean
                  description: bool (optional) Force an update even if there are dependent
                    services (when purpose is **SERVICE**) or dependent external locations
                    and external tables (when purpose is **STORAGE**).
                isolation_mode:
                  type: string
                  enum:
                  - ISOLATION_MODE_ISOLATED
                  - ISOLATION_MODE_OPEN
                  description: :class:`IsolationMode` (optional) Whether the current
                    securable is accessible from all workspaces or a specific set
                    of workspaces.
                new_name:
                  type: string
                  description: str (optional) New name of credential.
                owner:
                  type: string
                  description: str (optional) Username of current owner of credential.
                read_only:
                  type: boolean
                  description: bool (optional) Whether the credential is usable only
                    for read operations. Only applicable when purpose is **STORAGE**.
                skip_validation:
                  type: boolean
                  description: bool (optional) Supply true to this argument to skip
                    validation of the updated credential.
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CredentialInfo'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not found
        '500':
          description: Internal server error
  /api/2.1/unity-catalog/temporary-service-credentials:
    post:
      operationId: generate_temporary_service_credential
      summary: 'Returns a set of temporary credentials generated using the specified
        service credential. The caller

        must be a metastore admin or have the metastore privilege **ACCESS** on the
        service credential.'
      description: "Returns a set of temporary credentials generated using the specified\
        \ service credential. The caller\nmust be a metastore admin or have the metastore\
        \ privilege **ACCESS** on the service credential.\n\n:param credential_name:\
        \ str\n  The name of the service credential used to generate a temporary credential\n\
        :param azure_options: :class:`GenerateTemporaryServiceCredentialAzureOptions`\
        \ (optional)\n:param gcp_options: :class:`GenerateTemporaryServiceCredentialGcpOptions`\
        \ (optional)\n\n:returns: :class:`TemporaryCredentials`"
      tags:
      - catalog
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                credential_name:
                  type: string
                  description: str The name of the service credential used to generate
                    a temporary credential
                azure_options:
                  $ref: '#/components/schemas/GenerateTemporaryServiceCredentialAzureOptions'
                gcp_options:
                  $ref: '#/components/schemas/GenerateTemporaryServiceCredentialGcpOptions'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TemporaryCredentials'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not found
        '500':
          description: Internal server error
  /api/2.1/unity-catalog/validate-credentials:
    post:
      operationId: validate_credential
      summary: Validates a credential.
      description: "Validates a credential.\n\nFor service credentials (purpose is\
        \ **SERVICE**), either the __credential_name__ or the cloud-specific\ncredential\
        \ must be provided.\n\nFor storage credentials (purpose is **STORAGE**), at\
        \ least one of __external_location_name__ and\n__url__ need to be provided.\
        \ If only one of them is provided, it will be used for validation. And if\n\
        both are provided, the __url__ will be used for validation, and __external_location_name__\
        \ will be\nignored when checking overlapping urls. Either the __credential_name__\
        \ or the cloud-specific\ncredential must be provided.\n\nThe caller must be\
        \ a metastore admin or the credential owner or have the required permission\
        \ on the\nmetastore and the credential (e.g., **CREATE_EXTERNAL_LOCATION**\
        \ when purpose is **STORAGE**).\n\n:param aws_iam_role: :class:`AwsIamRole`\
        \ (optional)\n:param azure_managed_identity: :class:`AzureManagedIdentity`\
        \ (optional)\n:param credential_name: str (optional)\n  Required. The name\
        \ of an existing credential or long-lived cloud credential to validate.\n\
        :param databricks_gcp_service_account: :class:`DatabricksGcpServiceAccount`\
        \ (optional)\n:param external_location_name: str (optional)\n  The name of\
        \ an existing external location to validate. Only applicable for storage credentials\n\
        \  (purpose is **STORAGE**.)\n:param purpose: :class:`CredentialPurpose` (optional)\n\
        \  The purpose of the credential. This should only be used when the credential\
        \ is specified.\n:param read_only: bool (optional)\n  Whether the credential\
        \ is only usable for read operations. Only applicable for storage credentials\n\
        \  (purpose is **STORAGE**.)\n:param url: str (optional)\n  The external location\
        \ url to validate. Only applicable when purpose is **STORAGE**.\n\n:returns:\
        \ :class:`ValidateCredentialResponse`"
      tags:
      - catalog
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                aws_iam_role:
                  $ref: '#/components/schemas/AwsIamRole'
                azure_managed_identity:
                  $ref: '#/components/schemas/AzureManagedIdentity'
                credential_name:
                  type: string
                  description: str (optional) Required. The name of an existing credential
                    or long-lived cloud credential to validate.
                databricks_gcp_service_account:
                  $ref: '#/components/schemas/DatabricksGcpServiceAccount'
                external_location_name:
                  type: string
                  description: str (optional) The name of an existing external location
                    to validate. Only applicable for storage credentials (purpose
                    is **STORAGE**.)
                purpose:
                  type: string
                  enum:
                  - SERVICE
                  - STORAGE
                  description: :class:`CredentialPurpose` (optional) The purpose of
                    the credential. This should only be used when the credential is
                    specified.
                read_only:
                  type: boolean
                  description: bool (optional) Whether the credential is only usable
                    for read operations. Only applicable for storage credentials (purpose
                    is **STORAGE**.)
                url:
                  type: string
                  description: str (optional) The external location url to validate.
                    Only applicable when purpose is **STORAGE**.
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidateCredentialResponse'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not found
        '500':
          description: Internal server error
  /api/2.1/unity-catalog/entity-tag-assignments:
    post:
      operationId: create
      summary: Creates a tag assignment for an Unity Catalog entity.
      description: 'Creates a tag assignment for an Unity Catalog entity.


        To add tags to Unity Catalog entities, you must own the entity or have the
        following privileges: -

        **APPLY TAG** on the entity - **USE SCHEMA** on the entity''s parent schema
        - **USE CATALOG** on the

        entity''s parent catalog


        To add a governed tag to Unity Catalog entities, you must also have the **ASSIGN**
        or **MANAGE**

        permission on the tag policy. See [Manage tag policy permissions].


        [Manage tag policy permissions]: https://docs.databricks.com/aws/en/admin/tag-policies/manage-permissions


        :param tag_assignment: :class:`EntityTagAssignment`


        :returns: :class:`EntityTagAssignment`'
      tags:
      - catalog
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EntityTagAssignment'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityTagAssignment'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not found
        '500':
          description: Internal server error
  /api/2.0/lineage-tracking/external-lineage:
    post:
      operationId: create_external_lineage_relationship
      summary: 'Creates an external lineage relationship between a Databricks or external
        metadata object and another

        external metadata object.'
      description: 'Creates an external lineage relationship between a Databricks
        or external metadata object and another

        external metadata object.


        :param external_lineage_relationship: :class:`CreateRequestExternalLineage`


        :returns: :class:`ExternalLineageRelationship`'
      tags:
      - catalog
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRequestExternalLineage'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExternalLineageRelationship'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not found
        '500':
          description: Internal server error
    delete:
      operationId: delete_external_lineage_relationship
      summary: 'Deletes an external lineage relationship between a Databricks or external
        metadata object and another

        external metadata object.'
      description: 'Deletes an external lineage relationship between a Databricks
        or external metadata object and another

        external metadata object.


        :param external_lineage_relationship: :class:`DeleteRequestExternalLineage`'
      tags:
      - catalog
      parameters:
      - name: external_lineage_relationship
        description: :class:`DeleteRequestExternalLineage`
        required: true
        schema:
          $ref: '#/components/schemas/DeleteRequestExternalLineage'
        in: query
      responses:
        '200':
          description: Success
    get:
      operationId: list_external_lineage_relationships
      summary: 'Lists external lineage relationships of a Databricks object or external
        metadata given a supplied

        direction.'
      description: "Lists external lineage relationships of a Databricks object or\
        \ external metadata given a supplied\ndirection.\n\n:param object_info: :class:`ExternalLineageObject`\n\
        \  The object to query external lineage relationships for. Since this field\
        \ is a query parameter,\n  please flatten the nested fields. For example,\
        \ if the object is a table, the query parameter should\n  look like: `object_info.table.name=main.sales.customers`\n\
        :param lineage_direction: :class:`LineageDirection`\n  The lineage direction\
        \ to filter on.\n:param page_size: int (optional)\n  Specifies the maximum\
        \ number of external lineage relationships to return in a single response.\
        \ The\n  value must be less than or equal to 1000.\n:param page_token: str\
        \ (optional)\n  Opaque pagination token to go to next page based on previous\
        \ query.\n\n:returns: Iterator over :class:`ExternalLineageInfo`"
      tags:
      - catalog
      parameters:
      - name: object_info
        description: ':class:`ExternalLineageObject` The object to query external
          lineage relationships for. Since this field is a query parameter, please
          flatten the nested fields. For example, if the object is a table, the query
          parameter should look like: `object_info.table.name=main.sales.customers`'
        required: true
        schema:
          $ref: '#/components/schemas/ExternalLineageObject'
        in: query
      - name: lineage_direction
        description: :class:`LineageDirection` The lineage direction to filter on.
        required: true
        schema:
          type: string
          enum:
          - DOWNSTREAM
          - UPSTREAM
        in: query
      - name: page_size
        description: int (optional) Specifies the maximum number of external lineage
          relationships to return in a single response. The value must be less than
          or equal to 1000.
        required: false
        schema:
          type: integer
        in: query
      - name: page_token
        description: str (optional) Opaque pagination token to go to next page based
          on previous query.
        required: false
        schema:
          type: string
        in: query
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExternalLineageInfo'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not found
        '500':
          description: Internal server error
  /api/2.1/unity-catalog/external-locations:
    post:
      operationId: create
      summary: 'Creates a new external location entry in the metastore. The caller
        must be a metastore admin or have

        the **CREATE_EXTERNAL_LOCATION** privilege on both the metastore and the associated
        storage

        credential.'
      description: "Creates a new external location entry in the metastore. The caller\
        \ must be a metastore admin or have\nthe **CREATE_EXTERNAL_LOCATION** privilege\
        \ on both the metastore and the associated storage\ncredential.\n\n:param\
        \ name: str\n  Name of the external location.\n:param url: str\n  Path URL\
        \ of the external location.\n:param credential_name: str\n  Name of the storage\
        \ credential used with this location.\n:param comment: str (optional)\n  User-provided\
        \ free-form text description.\n:param enable_file_events: bool (optional)\n\
        \  Whether to enable file events on this external location.\n:param encryption_details:\
        \ :class:`EncryptionDetails` (optional)\n:param fallback: bool (optional)\n\
        \  Indicates whether fallback mode is enabled for this external location.\
        \ When fallback mode is\n  enabled, the access to the location falls back\
        \ to cluster credentials if UC credentials are not\n  sufficient.\n:param\
        \ file_event_queue: :class:`FileEventQueue` (optional)\n  File event queue\
        \ settings. If `enable_file_events` is `true`, must be defined and have exactly\
        \ one\n  of the documented properties.\n:param read_only: bool (optional)\n\
        \  Indicates whether the external location is read-only.\n:param skip_validation:\
        \ bool (optional)\n  Skips validation of the storage credential associated\
        \ with the external location.\n\n:returns: :class:`ExternalLocationInfo`"
      tags:
      - catalog
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: str Name of the external location.
                url:
                  type: string
                  description: str Path URL of the external location.
                credential_name:
                  type: string
                  description: str Name of the storage credential used with this location.
                comment:
                  type: string
                  description: str (optional) User-provided free-form text description.
                enable_file_events:
                  type: boolean
                  description: bool (optional) Whether to enable file events on this
                    external location.
                encryption_details:
                  $ref: '#/components/schemas/EncryptionDetails'
                fallback:
                  type: boolean
                  description: bool (optional) Indicates whether fallback mode is
                    enabled for this external location. When fallback mode is enabled,
                    the access to the location falls back to cluster credentials if
                    UC credentials are not sufficient.
                file_event_queue:
                  $ref: '#/components/schemas/FileEventQueue'
                read_only:
                  type: boolean
                  description: bool (optional) Indicates whether the external location
                    is read-only.
                skip_validation:
                  type: boolean
                  description: bool (optional) Skips validation of the storage credential
                    associated with the external location.
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExternalLocationInfo'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not found
        '500':
          description: Internal server error
    get:
      operationId: list
      summary: 'Gets an array of external locations (__ExternalLocationInfo__ objects)
        from the metastore. The caller

        must be a metastore admin, the owner of the external location, or a user that
        has some privilege on

        the external location. There is no guarantee of a specific ordering of the
        elements in the array.'
      description: "Gets an array of external locations (__ExternalLocationInfo__\
        \ objects) from the metastore. The caller\nmust be a metastore admin, the\
        \ owner of the external location, or a user that has some privilege on\nthe\
        \ external location. There is no guarantee of a specific ordering of the elements\
        \ in the array.\n\nNOTE: we recommend using max_results=0 to use the paginated\
        \ version of this API. Unpaginated calls\nwill be deprecated soon.\n\nPAGINATION\
        \ BEHAVIOR: When using pagination (max_results >= 0), a page may contain zero\
        \ results while\nstill providing a next_page_token. Clients must continue\
        \ reading pages until next_page_token is\nabsent, which is the only indication\
        \ that the end of results has been reached. This behavior follows\nGoogle\
        \ AIP-158 guidelines.\n\n:param include_browse: bool (optional)\n  Whether\
        \ to include external locations in the response for which the principal can\
        \ only access\n  selective metadata for\n:param include_unbound: bool (optional)\n\
        \  Whether to include external locations not bound to the workspace. Effective\
        \ only if the user has\n  permission to update the location–workspace binding.\n\
        :param max_results: int (optional)\n  Maximum number of external locations\
        \ to return. If not set, all the external locations are returned\n  (not recommended).\
        \ - when set to a value greater than 0, the page length is the minimum of\
        \ this\n  value and a server configured value; - when set to 0, the page length\
        \ is set to a server configured\n  value (recommended); - when set to a value\
        \ less than 0, an invalid parameter error is returned;\n:param page_token:\
        \ str (optional)\n  Opaque pagination token to go to next page based on previous\
        \ query.\n\n:returns: Iterator over :class:`ExternalLocationInfo`"
      tags:
      - catalog
      parameters:
      - name: include_browse
        description: bool (optional) Whether to include external locations in the
          response for which the principal can only access selective metadata for
        required: false
        schema:
          type: boolean
        in: query
      - name: include_unbound
        description: bool (optional) Whether to include external locations not bound
          to the workspace. Effective only if the user has permission to update the
          location–workspace binding.
        required: false
        schema:
          type: boolean
        in: query
      - name: max_results
        description: int (optional) Maximum number of external locations to return.
          If not set, all the external locations are returned (not recommended). -
          when set to a value greater than 0, the page length is the minimum of this
          value and a server configured value; - when set to 0, the page length is
          set to a server configured value (recommended); - when set to a value less
          than 0, an invalid parameter error is returned;
        required: false
        schema:
          type: integer
        in: query
      - name: page_token
        description: str (optional) Opaque pagination token to go to next page based
          on previous query.
        required: false
        schema:
          type: string
        in: query
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExternalLocationInfo'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not found
        '500':
          description: Internal server error
  /api/2.1/unity-catalog/external-locations/{name}:
    delete:
      operationId: delete
      summary: 'Deletes the specified external location from the metastore. The caller
        must be the owner of the

        external location.'
      description: "Deletes the specified external location from the metastore. The\
        \ caller must be the owner of the\nexternal location.\n\n:param name: str\n\
        \  Name of the external location.\n:param force: bool (optional)\n  Force\
        \ deletion even if there are dependent external tables or mounts."
      tags:
      - catalog
      parameters:
      - name: name
        description: str Name of the external location.
        required: true
        schema:
          type: string
        in: path
      - name: force
        description: bool (optional) Force deletion even if there are dependent external
          tables or mounts.
        required: false
        schema:
          type: boolean
        in: query
      responses:
        '200':
          description: Success
    get:
      operationId: get
      summary: 'Gets an external location from the metastore. The caller must be either
        a metastore admin, the owner

        of the external location, or a user that has some privilege on the external
        location.'
      description: "Gets an external location from the metastore. The caller must\
        \ be either a metastore admin, the owner\nof the external location, or a user\
        \ that has some privilege on the external location.\n\n:param name: str\n\
        \  Name of the external location.\n:param include_browse: bool (optional)\n\
        \  Whether to include external locations in the response for which the principal\
        \ can only access\n  selective metadata for\n\n:returns: :class:`ExternalLocationInfo`"
      tags:
      - catalog
      parameters:
      - name: name
        description: str Name of the external location.
        required: true
        schema:
          type: string
        in: path
      - name: include_browse
        description: bool (optional) Whether to include external locations in the
          response for which the principal can only access selective metadata for
        required: false
        schema:
          type: boolean
        in: query
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExternalLocationInfo'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not found
        '500':
          description: Internal server error
    patch:
      operationId: update
      summary: 'Updates an external location in the metastore. The caller must be
        the owner of the external location,

        or be a metastore admin. In the second case, the admin can only update the
        name of the external

        location.'
      description: "Updates an external location in the metastore. The caller must\
        \ be the owner of the external location,\nor be a metastore admin. In the\
        \ second case, the admin can only update the name of the external\nlocation.\n\
        \n:param name: str\n  Name of the external location.\n:param comment: str\
        \ (optional)\n  User-provided free-form text description.\n:param credential_name:\
        \ str (optional)\n  Name of the storage credential used with this location.\n\
        :param enable_file_events: bool (optional)\n  Whether to enable file events\
        \ on this external location.\n:param encryption_details: :class:`EncryptionDetails`\
        \ (optional)\n:param fallback: bool (optional)\n  Indicates whether fallback\
        \ mode is enabled for this external location. When fallback mode is\n  enabled,\
        \ the access to the location falls back to cluster credentials if UC credentials\
        \ are not\n  sufficient.\n:param file_event_queue: :class:`FileEventQueue`\
        \ (optional)\n  File event queue settings. If `enable_file_events` is `true`,\
        \ must be defined and have exactly one\n  of the documented properties.\n\
        :param force: bool (optional)\n  Force update even if changing url invalidates\
        \ dependent external tables or mounts.\n:param isolation_mode: :class:`IsolationMode`\
        \ (optional)\n:param new_name: str (optional)\n  New name for the external\
        \ location.\n:param owner: str (optional)\n  The owner of the external location.\n\
        :param read_only: bool (optional)\n  Indicates whether the external location\
        \ is read-only.\n:param skip_validation: bool (optional)\n  Skips validation\
        \ of the storage credential associated with the external location.\n:param\
        \ url: str (optional)\n  Path URL of the external location.\n\n:returns: :class:`ExternalLocationInfo`"
      tags:
      - catalog
      parameters:
      - name: name
        description: str Name of the external location.
        required: true
        schema:
          type: string
        in: path
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                comment:
                  type: string
                  description: str (optional) User-provided free-form text description.
                credential_name:
                  type: string
                  description: str (optional) Name of the storage credential used
                    with this location.
                enable_file_events:
                  type: boolean
                  description: bool (optional) Whether to enable file events on this
                    external location.
                encryption_details:
                  $ref: '#/components/schemas/EncryptionDetails'
                fallback:
                  type: boolean
                  description: bool (optional) Indicates whether fallback mode is
                    enabled for this external location. When fallback mode is enabled,
                    the access to the location falls back to cluster credentials if
                    UC credentials are not sufficient.
                file_event_queue:
                  $ref: '#/components/schemas/FileEventQueue'
                force:
                  type: boolean
                  description: bool (optional) Force update even if changing url invalidates
                    dependent external tables or mounts.
                isolation_mode:
                  type: string
                  enum:
                  - ISOLATION_MODE_ISOLATED
                  - ISOLATION_MODE_OPEN
                  description: :class:`IsolationMode` (optional)
                new_name:
                  type: string
                  description: str (optional) New name for the external location.
                owner:
                  type: string
                  description: str (optional) The owner of the external location.
                read_only:
                  type: boolean
                  description: bool (optional) Indicates whether the external location
                    is read-only.
                skip_validation:
                  type: boolean
                  description: bool (optional) Skips validation of the storage credential
                    associated with the external location.
                url:
                  type: string
                  description: str (optional) Path URL of the external location.
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExternalLocationInfo'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not found
        '500':
          description: Internal server error
  /api/2.0/lineage-tracking/external-metadata:
    post:
      operationId: create_external_metadata
      summary: 'Creates a new external metadata object in the parent metastore if
        the caller is a metastore admin or

        has the **CREATE_EXTERNAL_METADATA** privilege. Grants **BROWSE** to all account
        users upon creation

        by default.'
      description: 'Creates a new external metadata object in the parent metastore
        if the caller is a metastore admin or

        has the **CREATE_EXTERNAL_METADATA** privilege. Grants **BROWSE** to all account
        users upon creation

        by default.


        :param external_metadata: :class:`ExternalMetadata`


        :returns: :class:`ExternalMetadata`'
      tags:
      - catalog
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExternalMetadata'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExternalMetadata'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not found
        '500':
          description: Internal server error
    get:
      operationId: list_external_metadata
      summary: 'Gets an array of external metadata objects in the metastore. If the
        caller is the metastore admin, all

        external metadata objects will be retrieved. Otherwise, only external metadata
        objects that the caller

        has **BROWSE** on will be retrieved. There is no guarantee of a specific ordering
        of the elements in

        the array.'
      description: "Gets an array of external metadata objects in the metastore. If\
        \ the caller is the metastore admin, all\nexternal metadata objects will be\
        \ retrieved. Otherwise, only external metadata objects that the caller\nhas\
        \ **BROWSE** on will be retrieved. There is no guarantee of a specific ordering\
        \ of the elements in\nthe array.\n\n:param page_size: int (optional)\n  Specifies\
        \ the maximum number of external metadata objects to return in a single response.\
        \ The value\n  must be less than or equal to 1000.\n:param page_token: str\
        \ (optional)\n  Opaque pagination token to go to next page based on previous\
        \ query.\n\n:returns: Iterator over :class:`ExternalMetadata`"
      tags:
      - catalog
      parameters:
      - name: page_size
        description: int (optional) Specifies the maximum number of external metadata
          objects to return in a single response. The value must be less than or equal
          to 1000.
        required: false
        schema:
          type: integer
        in: query
      - name: page_token
        description: str (optional) Opaque pagination token to go to next page based
          on previous query.
        required: false
        schema:
          type: string
        in: query
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExternalMetadata'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not found
        '500':
          description: Internal server error
  /api/2.0/lineage-tracking/external-metadata/{name}:
    delete:
      operationId: delete_external_metadata
      summary: 'Deletes the external metadata object that matches the supplied name.
        The caller must be a metastore

        admin, the owner of the external metadata object, or a user that has the **MANAGE**
        privilege.'
      description: 'Deletes the external metadata object that matches the supplied
        name. The caller must be a metastore

        admin, the owner of the external metadata object, or a user that has the **MANAGE**
        privilege.


        :param name: str'
      tags:
      - catalog
      parameters:
      - name: name
        description: str
        required: true
        schema:
          type: string
        in: path
      responses:
        '200':
          description: Success
    get:
      operationId: get_external_metadata
      summary: 'Gets the specified external metadata object in a metastore. The caller
        must be a metastore admin, the

        owner of the external metadata object, or a user that has the **BROWSE** privilege.'
      description: 'Gets the specified external metadata object in a metastore. The
        caller must be a metastore admin, the

        owner of the external metadata object, or a user that has the **BROWSE** privilege.


        :param name: str


        :returns: :class:`ExternalMetadata`'
      tags:
      - catalog
      parameters:
      - name: name
        description: str
        required: true
        schema:
          type: string
        in: path
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExternalMetadata'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not found
        '500':
          description: Internal server error
  /api/2.1/unity-catalog/functions:
    post:
      operationId: create
      summary: '**WARNING: This API is experimental and will change in future versions**'
      description: "**WARNING: This API is experimental and will change in future\
        \ versions**\n\nCreates a new function\n\nThe user must have the following\
        \ permissions in order for the function to be created: -\n**USE_CATALOG**\
        \ on the function's parent catalog - **USE_SCHEMA** and **CREATE_FUNCTION**\
        \ on the\nfunction's parent schema\n\n:param function_info: :class:`CreateFunction`\n\
        \  Partial __FunctionInfo__ specifying the function to be created.\n\n:returns:\
        \ :class:`FunctionInfo`"
      tags:
      - catalog
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateFunction'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FunctionInfo'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not found
        '500':
          description: Internal server error
    get:
      operationId: list
      summary: 'List functions within the specified parent catalog and schema. If
        the user is a metastore admin, all

        functions are returned in the output list. Otherwise, the user must have the
        **USE_CATALOG** privilege

        on the catalog and the **USE_SCHEMA** privilege on the schema, and the output
        list contains only

        functions for which either the user has the **EXECUTE** privilege or the user
        is the owner. There is

        no guarantee of a specific ordering of the elements in the array.'
      description: "List functions within the specified parent catalog and schema.\
        \ If the user is a metastore admin, all\nfunctions are returned in the output\
        \ list. Otherwise, the user must have the **USE_CATALOG** privilege\non the\
        \ catalog and the **USE_SCHEMA** privilege on the schema, and the output list\
        \ contains only\nfunctions for which either the user has the **EXECUTE** privilege\
        \ or the user is the owner. There is\nno guarantee of a specific ordering\
        \ of the elements in the array.\n\nNOTE: we recommend using max_results=0\
        \ to use the paginated version of this API. Unpaginated calls\nwill be deprecated\
        \ soon.\n\nPAGINATION BEHAVIOR: When using pagination (max_results >= 0),\
        \ a page may contain zero results while\nstill providing a next_page_token.\
        \ Clients must continue reading pages until next_page_token is\nabsent, which\
        \ is the only indication that the end of results has been reached. This behavior\
        \ follows\nGoogle AIP-158 guidelines.\n\n:param catalog_name: str\n  Name\
        \ of parent catalog for functions of interest.\n:param schema_name: str\n\
        \  Parent schema of functions.\n:param include_browse: bool (optional)\n \
        \ Whether to include functions in the response for which the principal can\
        \ only access selective\n  metadata for\n:param max_results: int (optional)\n\
        \  Maximum number of functions to return. If not set, all the functions are\
        \ returned (not recommended).\n  - when set to a value greater than 0, the\
        \ page length is the minimum of this value and a server\n  configured value;\
        \ - when set to 0, the page length is set to a server configured value\n \
        \ (recommended); - when set to a value less than 0, an invalid parameter error\
        \ is returned;\n:param page_token: str (optional)\n  Opaque pagination token\
        \ to go to next page based on previous query.\n\n:returns: Iterator over :class:`FunctionInfo`"
      tags:
      - catalog
      parameters:
      - name: catalog_name
        description: str Name of parent catalog for functions of interest.
        required: true
        schema:
          type: string
        in: query
      - name: schema_name
        description: str Parent schema of functions.
        required: true
        schema:
          type: string
        in: query
      - name: include_browse
        description: bool (optional) Whether to include functions in the response
          for which the principal can only access selective metadata for
        required: false
        schema:
          type: boolean
        in: query
      - name: max_results
        description: int (optional) Maximum number of functions to return. If not
          set, all the functions are returned (not recommended). - when set to a value
          greater than 0, the page length is the minimum of this value and a server
          configured value; - when set to 0, the page length is set to a server configured
          value (recommended); - when set to a value less than 0, an invalid parameter
          error is returned;
        required: false
        schema:
          type: integer
        in: query
      - name: page_token
        description: str (optional) Opaque pagination token to go to next page based
          on previous query.
        required: false
        schema:
          type: string
        in: query
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FunctionInfo'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not found
        '500':
          description: Internal server error
  /api/2.1/unity-catalog/functions/{name}:
    delete:
      operationId: delete
      summary: 'Deletes the function that matches the supplied name. For the deletion
        to succeed, the user must

        satisfy one of the following conditions: - Is the owner of the function''s
        parent catalog - Is the

        owner of the function''s parent schema and have the **USE_CATALOG** privilege
        on its parent catalog -

        Is the owner of the function itself and have both the **USE_CATALOG** privilege
        on its parent catalog

        and the **USE_SCHEMA** privilege on its parent schema'
      description: "Deletes the function that matches the supplied name. For the deletion\
        \ to succeed, the user must\nsatisfy one of the following conditions: - Is\
        \ the owner of the function's parent catalog - Is the\nowner of the function's\
        \ parent schema and have the **USE_CATALOG** privilege on its parent catalog\
        \ -\nIs the owner of the function itself and have both the **USE_CATALOG**\
        \ privilege on its parent catalog\nand the **USE_SCHEMA** privilege on its\
        \ parent schema\n\n:param name: str\n  The fully-qualified name of the function\
        \ (of the form\n  __catalog_name__.__schema_name__.__function__name__) .\n\
        :param force: bool (optional)\n  Force deletion even if the function is notempty."
      tags:
      - catalog
      parameters:
      - name: name
        description: str The fully-qualified name of the function (of the form __catalog_name__.__schema_name__.__function__name__)
          .
        required: true
        schema:
          type: string
        in: path
      - name: force
        description: bool (optional) Force deletion even if the function is notempty.
        required: false
        schema:
          type: boolean
        in: query
      responses:
        '200':
          description: Success
    get:
      operationId: get
      summary: 'Gets a function from within a parent catalog and schema. For the fetch
        to succeed, the user must

        satisfy one of the following requirements: - Is a metastore admin - Is an
        owner of the function''s

        parent catalog - Have the **USE_CATALOG** privilege on the function''s parent
        catalog and be the owner

        of the function - Have the **USE_CATALOG** privilege on the function''s parent
        catalog, the

        **USE_SCHEMA** privilege on the function''s parent schema, and the **EXECUTE**
        privilege on the

        function itself'
      description: "Gets a function from within a parent catalog and schema. For the\
        \ fetch to succeed, the user must\nsatisfy one of the following requirements:\
        \ - Is a metastore admin - Is an owner of the function's\nparent catalog -\
        \ Have the **USE_CATALOG** privilege on the function's parent catalog and\
        \ be the owner\nof the function - Have the **USE_CATALOG** privilege on the\
        \ function's parent catalog, the\n**USE_SCHEMA** privilege on the function's\
        \ parent schema, and the **EXECUTE** privilege on the\nfunction itself\n\n\
        :param name: str\n  The fully-qualified name of the function (of the form\n\
        \  __catalog_name__.__schema_name__.__function__name__).\n:param include_browse:\
        \ bool (optional)\n  Whether to include functions in the response for which\
        \ the principal can only access selective\n  metadata for\n\n:returns: :class:`FunctionInfo`"
      tags:
      - catalog
      parameters:
      - name: name
        description: str The fully-qualified name of the function (of the form __catalog_name__.__schema_name__.__function__name__).
        required: true
        schema:
          type: string
        in: path
      - name: include_browse
        description: bool (optional) Whether to include functions in the response
          for which the principal can only access selective metadata for
        required: false
        schema:
          type: boolean
        in: query
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FunctionInfo'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not found
        '500':
          description: Internal server error
    patch:
      operationId: update
      summary: 'Updates the function that matches the supplied name. Only the owner
        of the function can be updated. If

        the user is not a metastore admin, the user must be a member of the group
        that is the new function

        owner. - Is a metastore admin - Is the owner of the function''s parent catalog
        - Is the owner of the

        function''s parent schema and has the **USE_CATALOG** privilege on its parent
        catalog - Is the owner of

        the function itself and has the **USE_CATALOG** privilege on its parent catalog
        as well as the

        **USE_SCHEMA** privilege on the function''s parent schema.'
      description: "Updates the function that matches the supplied name. Only the\
        \ owner of the function can be updated. If\nthe user is not a metastore admin,\
        \ the user must be a member of the group that is the new function\nowner.\
        \ - Is a metastore admin - Is the owner of the function's parent catalog -\
        \ Is the owner of the\nfunction's parent schema and has the **USE_CATALOG**\
        \ privilege on its parent catalog - Is the owner of\nthe function itself and\
        \ has the **USE_CATALOG** privilege on its parent catalog as well as the\n\
        **USE_SCHEMA** privilege on the function's parent schema.\n\n:param name:\
        \ str\n  The fully-qualified name of the function (of the form\n  __catalog_name__.__schema_name__.__function__name__).\n\
        :param owner: str (optional)\n  Username of current owner of the function.\n\
        \n:returns: :class:`FunctionInfo`"
      tags:
      - catalog
      parameters:
      - name: name
        description: str The fully-qualified name of the function (of the form __catalog_name__.__schema_name__.__function__name__).
        required: true
        schema:
          type: string
        in: path
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                owner:
                  type: string
                  description: str (optional) Username of current owner of the function.
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FunctionInfo'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not found
        '500':
          description: Internal server error
  /api/2.1/unity-catalog/workspaces/{workspace_id}/metastore:
    put:
      operationId: assign
      summary: 'Creates a new metastore assignment. If an assignment for the same
        __workspace_id__ exists, it will be

        overwritten by the new __metastore_id__ and __default_catalog_name__. The
        caller must be an account

        admin.'
      description: "Creates a new metastore assignment. If an assignment for the same\
        \ __workspace_id__ exists, it will be\noverwritten by the new __metastore_id__\
        \ and __default_catalog_name__. The caller must be an account\nadmin.\n\n\
        :param workspace_id: int\n  A workspace ID.\n:param metastore_id: str\n  The\
        \ unique ID of the metastore.\n:param default_catalog_name: str\n  The name\
        \ of the default catalog in the metastore. This field is deprecated. Please\
        \ use \"Default\n  Namespace API\" to configure the default catalog for a\
        \ Databricks workspace."
      tags:
      - catalog
      parameters:
      - name: workspace_id
        description: int A workspace ID.
        required: true
        schema:
          type: integer
        in: path
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                metastore_id:
                  type: string
                  description: str The unique ID of the metastore.
                default_catalog_name:
                  type: string
                  description: str The name of the default catalog in the metastore.
                    This field is deprecated. Please use "Default Namespace API" to
                    configure the default catalog for a Databricks workspace.
      responses:
        '200':
          description: Success
    patch:
      operationId: update_assignment
      summary: 'Updates a metastore assignment. This operation can be used to update
        __metastore_id__ or

        __default_catalog_name__ for a specified Workspace, if the Workspace is already
        assigned a metastore.

        The caller must be an account admin to update __metastore_id__; otherwise,
        the caller can be a

        Workspace admin.'
      description: "Updates a metastore assignment. This operation can be used to\
        \ update __metastore_id__ or\n__default_catalog_name__ for a specified Workspace,\
        \ if the Workspace is already assigned a metastore.\nThe caller must be an\
        \ account admin to update __metastore_id__; otherwise, the caller can be a\n\
        Workspace admin.\n\n:param workspace_id: int\n  A workspace ID.\n:param default_catalog_name:\
        \ str (optional)\n  The name of the default catalog in the metastore. This\
        \ field is deprecated. Please use \"Default\n  Namespace API\" to configure\
        \ the default catalog for a Databricks workspace.\n:param metastore_id: str\
        \ (optional)\n  The unique ID of the metastore."
      tags:
      - catalog
      parameters:
      - name: workspace_id
        description: int A workspace ID.
        required: true
        schema:
          type: integer
        in: path
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                default_catalog_name:
                  type: string
                  description: str (optional) The name of the default catalog in the
                    metastore. This field is deprecated. Please use "Default Namespace
                    API" to configure the default catalog for a Databricks workspace.
                metastore_id:
                  type: string
                  description: str (optional) The unique ID of the metastore.
      responses:
        '200':
          description: Success
  /api/2.1/unity-catalog/metastores:
    post:
      operationId: create
      summary: 'Creates a new metastore based on a provided name and optional storage
        root path. By default (if the

        __owner__ field is not set), the owner of the new metastore is the user calling
        the

        __createMetastore__ API. If the __owner__ field is set to the empty string
        (**""**), the ownership is

        assigned to the System User instead.'
      description: "Creates a new metastore based on a provided name and optional\
        \ storage root path. By default (if the\n__owner__ field is not set), the\
        \ owner of the new metastore is the user calling the\n__createMetastore__\
        \ API. If the __owner__ field is set to the empty string (**\"\"**), the ownership\
        \ is\nassigned to the System User instead.\n\n:param name: str\n  The user-specified\
        \ name of the metastore.\n:param region: str (optional)\n  Cloud region which\
        \ the metastore serves (e.g., `us-west-2`, `westus`).\n:param storage_root:\
        \ str (optional)\n  The storage root URL for metastore\n\n:returns: :class:`MetastoreInfo`"
      tags:
      - catalog
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: str The user-specified name of the metastore.
                region:
                  type: string
                  description: str (optional) Cloud region which the metastore serves
                    (e.g., `us-west-2`, `westus`).
                storage_root:
                  type: string
                  description: str (optional) The storage root URL for metastore
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetastoreInfo'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not found
        '500':
          description: Internal server error
    get:
      operationId: list
      summary: 'Gets an array of the available metastores (as __MetastoreInfo__ objects).
        The caller must be an admin

        to retrieve this info. There is no guarantee of a specific ordering of the
        elements in the array.'
      description: "Gets an array of the available metastores (as __MetastoreInfo__\
        \ objects). The caller must be an admin\nto retrieve this info. There is no\
        \ guarantee of a specific ordering of the elements in the array.\n\nNOTE:\
        \ we recommend using max_results=0 to use the paginated version of this API.\
        \ Unpaginated calls\nwill be deprecated soon.\n\nPAGINATION BEHAVIOR: When\
        \ using pagination (max_results >= 0), a page may contain zero results while\n\
        still providing a next_page_token. Clients must continue reading pages until\
        \ next_page_token is\nabsent, which is the only indication that the end of\
        \ results has been reached. This behavior follows\nGoogle AIP-158 guidelines.\n\
        \n:param max_results: int (optional)\n  Maximum number of metastores to return.\
        \ - when set to a value greater than 0, the page length is the\n  minimum\
        \ of this value and a server configured value; - when set to 0, the page length\
        \ is set to a\n  server configured value (recommended); - when set to a value\
        \ less than 0, an invalid parameter error\n  is returned; - If not set, all\
        \ the metastores are returned (not recommended). - Note: The number of\n \
        \ returned metastores might be less than the specified max_results size, even\
        \ zero. The only\n  definitive indication that no further metastores can be\
        \ fetched is when the next_page_token is unset\n  from the response.\n:param\
        \ page_token: str (optional)\n  Opaque pagination token to go to next page\
        \ based on previous query.\n\n:returns: Iterator over :class:`MetastoreInfo`"
      tags:
      - catalog
      parameters:
      - name: max_results
        description: 'int (optional) Maximum number of metastores to return. - when
          set to a value greater than 0, the page length is the minimum of this value
          and a server configured value; - when set to 0, the page length is set to
          a server configured value (recommended); - when set to a value less than
          0, an invalid parameter error is returned; - If not set, all the metastores
          are returned (not recommended). - Note: The number of returned metastores
          might be less than the specified max_results size, even zero. The only definitive
          indication that no further metastores can be fetched is when the next_page_token
          is unset from the response.'
        required: false
        schema:
          type: integer
        in: query
      - name: page_token
        description: str (optional) Opaque pagination token to go to next page based
          on previous query.
        required: false
        schema:
          type: string
        in: query
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetastoreInfo'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not found
        '500':
          description: Internal server error
  /api/2.1/unity-catalog/current-metastore-assignment:
    get:
      operationId: current
      summary: Gets the metastore assignment for the workspace being accessed.
      description: 'Gets the metastore assignment for the workspace being accessed.



        :returns: :class:`MetastoreAssignment`'
      tags:
      - catalog
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetastoreAssignment'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not found
        '500':
          description: Internal server error
  /api/2.1/unity-catalog/metastores/{id}:
    delete:
      operationId: delete
      summary: Deletes a metastore. The caller must be a metastore admin.
      description: "Deletes a metastore. The caller must be a metastore admin.\n\n\
        :param id: str\n  Unique ID of the metastore.\n:param force: bool (optional)\n\
        \  Force deletion even if the metastore is not empty. Default is false."
      tags:
      - catalog
      parameters:
      - name: id
        description: str Unique ID of the metastore.
        required: true
        schema:
          type: string
        in: path
      - name: force
        description: bool (optional) Force deletion even if the metastore is not empty.
          Default is false.
        required: false
        schema:
          type: boolean
        in: query
      responses:
        '200':
          description: Success
    get:
      operationId: get
      summary: 'Gets a metastore that matches the supplied ID. The caller must be
        a metastore admin to retrieve this

        info.'
      description: "Gets a metastore that matches the supplied ID. The caller must\
        \ be a metastore admin to retrieve this\ninfo.\n\n:param id: str\n  Unique\
        \ ID of the metastore.\n\n:returns: :class:`MetastoreInfo`"
      tags:
      - catalog
      parameters:
      - name: id
        description: str Unique ID of the metastore.
        required: true
        schema:
          type: string
        in: path
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetastoreInfo'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not found
        '500':
          description: Internal server error
    patch:
      operationId: update
      summary: 'Updates information for a specific metastore. The caller must be a
        metastore admin. If the __owner__

        field is set to the empty string (**""**), the ownership is updated to the
        System User.'
      description: "Updates information for a specific metastore. The caller must\
        \ be a metastore admin. If the __owner__\nfield is set to the empty string\
        \ (**\"\"**), the ownership is updated to the System User.\n\n:param id: str\n\
        \  Unique ID of the metastore.\n:param delta_sharing_organization_name: str\
        \ (optional)\n  The organization name of a Delta Sharing entity, to be used\
        \ in Databricks-to-Databricks Delta\n  Sharing as the official name.\n:param\
        \ delta_sharing_recipient_token_lifetime_in_seconds: int (optional)\n  The\
        \ lifetime of delta sharing recipient token in seconds.\n:param delta_sharing_scope:\
        \ :class:`DeltaSharingScopeEnum` (optional)\n  The scope of Delta Sharing\
        \ enabled for the metastore.\n:param new_name: str (optional)\n  New name\
        \ for the metastore.\n:param owner: str (optional)\n  The owner of the metastore.\n\
        :param privilege_model_version: str (optional)\n  Privilege model version\
        \ of the metastore, of the form `major.minor` (e.g., `1.0`).\n:param storage_root_credential_id:\
        \ str (optional)\n  UUID of storage credential to access the metastore storage_root.\n\
        \n:returns: :class:`MetastoreInfo`"
      tags:
      - catalog
      parameters:
      - name: id
        description: str Unique ID of the metastore.
        required: true
        schema:
          type: string
        in: path
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                delta_sharing_organization_name:
                  type: string
                  description: str (optional) The organization name of a Delta Sharing
                    entity, to be used in Databricks-to-Databricks Delta Sharing as
                    the official name.
                delta_sharing_recipient_token_lifetime_in_seconds:
                  type: integer
                  description: int (optional) The lifetime of delta sharing recipient
                    token in seconds.
                delta_sharing_scope:
                  type: string
                  enum:
                  - INTERNAL
                  - INTERNAL_AND_EXTERNAL
                  description: :class:`DeltaSharingScopeEnum` (optional) The scope
                    of Delta Sharing enabled for the metastore.
                new_name:
                  type: string
                  description: str (optional) New name for the metastore.
                owner:
                  type: string
                  description: str (optional) The owner of the metastore.
                privilege_model_version:
                  type: string
                  description: str (optional) Privilege model version of the metastore,
                    of the form `major.minor` (e.g., `1.0`).
                storage_root_credential_id:
                  type: string
                  description: str (optional) UUID of storage credential to access
                    the metastore storage_root.
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetastoreInfo'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not found
        '500':
          description: Internal server error
  /api/2.1/unity-catalog/metastore_summary:
    get:
      operationId: summary
      summary: 'Gets information about a metastore. This summary includes the storage
        credential, the cloud vendor,

        the cloud region, and the global metastore ID.'
      description: 'Gets information about a metastore. This summary includes the
        storage credential, the cloud vendor,

        the cloud region, and the global metastore ID.



        :returns: :class:`GetMetastoreSummaryResponse`'
      tags:
      - catalog
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetMetastoreSummaryResponse'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not found
        '500':
          description: Internal server error
  /api/2.1/unity-catalog/models/{full_name}/versions/{version}:
    delete:
      operationId: delete
      summary: 'Deletes a model version from the specified registered model. Any aliases
        assigned to the model version

        will also be deleted.'
      description: "Deletes a model version from the specified registered model. Any\
        \ aliases assigned to the model version\nwill also be deleted.\n\nThe caller\
        \ must be a metastore admin or an owner of the parent registered model. For\
        \ the latter case,\nthe caller must also be the owner or have the **USE_CATALOG**\
        \ privilege on the parent catalog and the\n**USE_SCHEMA** privilege on the\
        \ parent schema.\n\n:param full_name: str\n  The three-level (fully qualified)\
        \ name of the model version\n:param version: int\n  The integer version number\
        \ of the model version"
      tags:
      - catalog
      parameters:
      - name: full_name
        description: str The three-level (fully qualified) name of the model version
        required: true
        schema:
          type: string
        in: path
      - name: version
        description: int The integer version number of the model version
        required: true
        schema:
          type: integer
        in: path
      responses:
        '200':
          description: Success
  /api/2.0/online-tables:
    post:
      operationId: create
      summary: Create a new Online Table.
      description: "Create a new Online Table.\n\n:param table: :class:`OnlineTable`\n\
        \  Specification of the online table to be created.\n\n:returns:\n  Long-running\
        \ operation waiter for :class:`OnlineTable`.\n  See :method:wait_get_online_table_active\
        \ for more details."
      tags:
      - catalog
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OnlineTable'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OnlineTable'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not found
        '500':
          description: Internal server error
  /api/2.0/online-tables/{name}:
    delete:
      operationId: delete
      summary: 'Delete an online table. Warning: This will delete all the data in
        the online table. If the source

        Delta table was deleted or modified since this Online Table was created, this
        will lose the data

        forever!'
      description: "Delete an online table. Warning: This will delete all the data\
        \ in the online table. If the source\nDelta table was deleted or modified\
        \ since this Online Table was created, this will lose the data\nforever!\n\
        \n:param name: str\n  Full three-part (catalog, schema, table) name of the\
        \ table."
      tags:
      - catalog
      parameters:
      - name: name
        description: str Full three-part (catalog, schema, table) name of the table.
        required: true
        schema:
          type: string
        in: path
      responses:
        '200':
          description: Success
    get:
      operationId: get
      summary: Get information about an existing online table and its status.
      description: "Get information about an existing online table and its status.\n\
        \n:param name: str\n  Full three-part (catalog, schema, table) name of the\
        \ table.\n\n:returns: :class:`OnlineTable`"
      tags:
      - catalog
      parameters:
      - name: name
        description: str Full three-part (catalog, schema, table) name of the table.
        required: true
        schema:
          type: string
        in: path
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OnlineTable'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not found
        '500':
          description: Internal server error
  /api/2.1/unity-catalog/policies:
    post:
      operationId: create_policy
      summary: Creates a new policy on a securable. The new policy applies to the
        securable and all its descendants.
      description: "Creates a new policy on a securable. The new policy applies to\
        \ the securable and all its descendants.\n\n:param policy_info: :class:`PolicyInfo`\n\
        \  Required. The policy to create.\n\n:returns: :class:`PolicyInfo`"
      tags:
      - catalog
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PolicyInfo'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicyInfo'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not found
        '500':
          description: Internal server error
  /api/2.1/unity-catalog/tables/{table_name}/monitor:
    post:
      operationId: create
      summary: Creates a new monitor for the specified table.
      description: "Creates a new monitor for the specified table.\n\nThe caller must\
        \ either: 1. be an owner of the table's parent catalog, have **USE_SCHEMA**\
        \ on the\ntable's parent schema, and have **SELECT** access on the table 2.\
        \ have **USE_CATALOG** on the table's\nparent catalog, be an owner of the\
        \ table's parent schema, and have **SELECT** access on the table. 3.\nhave\
        \ the following permissions: - **USE_CATALOG** on the table's parent catalog\
        \ - **USE_SCHEMA** on\nthe table's parent schema - be an owner of the table.\n\
        \nWorkspace assets, such as the dashboard, will be created in the workspace\
        \ where this call was made.\n\n:param table_name: str\n  UC table name in\
        \ format `catalog.schema.table_name`. This field corresponds to the\n  {full_table_name_arg}\
        \ arg in the endpoint path.\n:param output_schema_name: str\n  [Create:REQ\
        \ Update:REQ] Schema where output tables are created. Needs to be in 2-level\
        \ format\n  {catalog}.{schema}\n:param assets_dir: str\n  [Create:REQ Update:IGN]\
        \ Field for specifying the absolute path to a custom directory to store\n\
        \  data-monitoring assets. Normally prepopulated to a default user location\
        \ via UI and Python APIs.\n:param baseline_table_name: str (optional)\n  [Create:OPT\
        \ Update:OPT] Baseline table name. Baseline data is used to compute drift\
        \ from the data in\n  the monitored `table_name`. The baseline table and the\
        \ monitored table shall have the same schema.\n:param custom_metrics: List[:class:`MonitorMetric`]\
        \ (optional)\n  [Create:OPT Update:OPT] Custom metrics.\n:param data_classification_config:\
        \ :class:`MonitorDataClassificationConfig` (optional)\n  [Create:OPT Update:OPT]\
        \ Data classification related config.\n:param inference_log: :class:`MonitorInferenceLog`\
        \ (optional)\n:param latest_monitor_failure_msg: str (optional)\n  [Create:ERR\
        \ Update:IGN] The latest error message for a monitor failure.\n:param notifications:\
        \ :class:`MonitorNotifications` (optional)\n  [Create:OPT Update:OPT] Field\
        \ for specifying notification settings.\n:param schedule: :class:`MonitorCronSchedule`\
        \ (optional)\n  [Create:OPT Update:OPT] The monitor schedule.\n:param skip_builtin_dashboard:\
        \ bool (optional)\n  Whether to skip creating a default dashboard summarizing\
        \ data quality metrics.\n:param slicing_exprs: List[str] (optional)\n  [Create:OPT\
        \ Update:OPT] List of column expressions to slice data with for targeted analysis.\
        \ The\n  data is grouped by each expression independently, resulting in a\
        \ separate slice for each predicate\n  and its complements. For example `slicing_exprs=[“col_1”,\
        \ “col_2 > 10”]` will generate the\n  following slices: two slices for `col_2\
        \ > 10` (True and False), and one slice per unique value in\n  `col1`. For\
        \ high-cardinality columns, only the top 100 unique values by frequency will\
        \ generate\n  slices.\n:param snapshot: :class:`MonitorSnapshot` (optional)\n\
        \  Configuration for monitoring snapshot tables.\n:param time_series: :class:`MonitorTimeSeries`\
        \ (optional)\n  Configuration for monitoring time series tables.\n:param warehouse_id:\
        \ str (optional)\n  Optional argument to specify the warehouse for dashboard\
        \ creation. If not specified, the first\n  running warehouse will be used.\n\
        \n:returns: :class:`MonitorInfo`"
      tags:
      - catalog
      parameters:
      - name: table_name
        description: str UC table name in format `catalog.schema.table_name`. This
          field corresponds to the {full_table_name_arg} arg in the endpoint path.
        required: true
        schema:
          type: string
        in: path
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                output_schema_name:
                  type: string
                  description: str [Create:REQ Update:REQ] Schema where output tables
                    are created. Needs to be in 2-level format {catalog}.{schema}
                assets_dir:
                  type: string
                  description: str [Create:REQ Update:IGN] Field for specifying the
                    absolute path to a custom directory to store data-monitoring assets.
                    Normally prepopulated to a default user location via UI and Python
                    APIs.
                baseline_table_name:
                  type: string
                  description: str (optional) [Create:OPT Update:OPT] Baseline table
                    name. Baseline data is used to compute drift from the data in
                    the monitored `table_name`. The baseline table and the monitored
                    table shall have the same schema.
                custom_metrics:
                  type: array
                  items:
                    $ref: '#/components/schemas/MonitorMetric'
                  description: List[:class:`MonitorMetric`] (optional) [Create:OPT
                    Update:OPT] Custom metrics.
                data_classification_config:
                  $ref: '#/components/schemas/MonitorDataClassificationConfig'
                inference_log:
                  $ref: '#/components/schemas/MonitorInferenceLog'
                latest_monitor_failure_msg:
                  type: string
                  description: str (optional) [Create:ERR Update:IGN] The latest error
                    message for a monitor failure.
                notifications:
                  $ref: '#/components/schemas/MonitorNotifications'
                schedule:
                  $ref: '#/components/schemas/MonitorCronSchedule'
                skip_builtin_dashboard:
                  type: boolean
                  description: bool (optional) Whether to skip creating a default
                    dashboard summarizing data quality metrics.
                slicing_exprs:
                  type: array
                  items:
                    type: string
                  description: 'List[str] (optional) [Create:OPT Update:OPT] List
                    of column expressions to slice data with for targeted analysis.
                    The data is grouped by each expression independently, resulting
                    in a separate slice for each predicate and its complements. For
                    example `slicing_exprs=[“col_1”, “col_2 > 10”]` will generate
                    the following slices: two slices for `col_2 > 10` (True and False),
                    and one slice per unique value in `col1`. For high-cardinality
                    columns, only the top 100 unique values by frequency will generate
                    slices.'
                snapshot:
                  $ref: '#/components/schemas/MonitorSnapshot'
                time_series:
                  $ref: '#/components/schemas/MonitorTimeSeries'
                warehouse_id:
                  type: string
                  description: str (optional) Optional argument to specify the warehouse
                    for dashboard creation. If not specified, the first running warehouse
                    will be used.
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MonitorInfo'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not found
        '500':
          description: Internal server error
    delete:
      operationId: delete
      summary: Deletes a monitor for the specified table.
      description: "Deletes a monitor for the specified table.\n\nThe caller must\
        \ either: 1. be an owner of the table's parent catalog 2. have **USE_CATALOG**\
        \ on the\ntable's parent catalog and be an owner of the table's parent schema\
        \ 3. have the following permissions:\n- **USE_CATALOG** on the table's parent\
        \ catalog - **USE_SCHEMA** on the table's parent schema - be an\nowner of\
        \ the table.\n\nAdditionally, the call must be made from the workspace where\
        \ the monitor was created.\n\nNote that the metric tables and dashboard will\
        \ not be deleted as part of this call; those assets must\nbe manually cleaned\
        \ up (if desired).\n\n:param table_name: str\n  UC table name in format `catalog.schema.table_name`.\
        \ This field corresponds to the\n  {full_table_name_arg} arg in the endpoint\
        \ path.\n\n:returns: :class:`DeleteMonitorResponse`"
      tags:
      - catalog
      parameters:
      - name: table_name
        description: str UC table name in format `catalog.schema.table_name`. This
          field corresponds to the {full_table_name_arg} arg in the endpoint path.
        required: true
        schema:
          type: string
        in: path
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteMonitorResponse'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not found
        '500':
          description: Internal server error
    get:
      operationId: get
      summary: Gets a monitor for the specified table.
      description: "Gets a monitor for the specified table.\n\nThe caller must either:\
        \ 1. be an owner of the table's parent catalog 2. have **USE_CATALOG** on\
        \ the\ntable's parent catalog and be an owner of the table's parent schema.\
        \ 3. have the following\npermissions: - **USE_CATALOG** on the table's parent\
        \ catalog - **USE_SCHEMA** on the table's parent\nschema - **SELECT** privilege\
        \ on the table.\n\nThe returned information includes configuration values,\
        \ as well as information on assets created by\nthe monitor. Some information\
        \ (e.g., dashboard) may be filtered out if the caller is in a different\n\
        workspace than where the monitor was created.\n\n:param table_name: str\n\
        \  UC table name in format `catalog.schema.table_name`. This field corresponds\
        \ to the\n  {full_table_name_arg} arg in the endpoint path.\n\n:returns: :class:`MonitorInfo`"
      tags:
      - catalog
      parameters:
      - name: table_name
        description: str UC table name in format `catalog.schema.table_name`. This
          field corresponds to the {full_table_name_arg} arg in the endpoint path.
        required: true
        schema:
          type: string
        in: path
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MonitorInfo'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not found
        '500':
          description: Internal server error
    put:
      operationId: update
      summary: Updates a monitor for the specified table.
      description: "Updates a monitor for the specified table.\n\nThe caller must\
        \ either: 1. be an owner of the table's parent catalog 2. have **USE_CATALOG**\
        \ on the\ntable's parent catalog and be an owner of the table's parent schema\
        \ 3. have the following permissions:\n- **USE_CATALOG** on the table's parent\
        \ catalog - **USE_SCHEMA** on the table's parent schema - be an\nowner of\
        \ the table.\n\nAdditionally, the call must be made from the workspace where\
        \ the monitor was created, and the caller\nmust be the original creator of\
        \ the monitor.\n\nCertain configuration fields, such as output asset identifiers,\
        \ cannot be updated.\n\n:param table_name: str\n  UC table name in format\
        \ `catalog.schema.table_name`. This field corresponds to the\n  {full_table_name_arg}\
        \ arg in the endpoint path.\n:param output_schema_name: str\n  [Create:REQ\
        \ Update:REQ] Schema where output tables are created. Needs to be in 2-level\
        \ format\n  {catalog}.{schema}\n:param baseline_table_name: str (optional)\n\
        \  [Create:OPT Update:OPT] Baseline table name. Baseline data is used to compute\
        \ drift from the data in\n  the monitored `table_name`. The baseline table\
        \ and the monitored table shall have the same schema.\n:param custom_metrics:\
        \ List[:class:`MonitorMetric`] (optional)\n  [Create:OPT Update:OPT] Custom\
        \ metrics.\n:param dashboard_id: str (optional)\n  [Create:ERR Update:OPT]\
        \ Id of dashboard that visualizes the computed metrics. This can be empty\
        \ if\n  the monitor is in PENDING state.\n:param data_classification_config:\
        \ :class:`MonitorDataClassificationConfig` (optional)\n  [Create:OPT Update:OPT]\
        \ Data classification related config.\n:param inference_log: :class:`MonitorInferenceLog`\
        \ (optional)\n:param latest_monitor_failure_msg: str (optional)\n  [Create:ERR\
        \ Update:IGN] The latest error message for a monitor failure.\n:param notifications:\
        \ :class:`MonitorNotifications` (optional)\n  [Create:OPT Update:OPT] Field\
        \ for specifying notification settings.\n:param schedule: :class:`MonitorCronSchedule`\
        \ (optional)\n  [Create:OPT Update:OPT] The monitor schedule.\n:param slicing_exprs:\
        \ List[str] (optional)\n  [Create:OPT Update:OPT] List of column expressions\
        \ to slice data with for targeted analysis. The\n  data is grouped by each\
        \ expression independently, resulting in a separate slice for each predicate\n\
        \  and its complements. For example `slicing_exprs=[“col_1”, “col_2 > 10”]`\
        \ will generate the\n  following slices: two slices for `col_2 > 10` (True\
        \ and False), and one slice per unique value in\n  `col1`. For high-cardinality\
        \ columns, only the top 100 unique values by frequency will generate\n  slices.\n\
        :param snapshot: :class:`MonitorSnapshot` (optional)\n  Configuration for\
        \ monitoring snapshot tables.\n:param time_series: :class:`MonitorTimeSeries`\
        \ (optional)\n  Configuration for monitoring time series tables.\n\n:returns:\
        \ :class:`MonitorInfo`"
      tags:
      - catalog
      parameters:
      - name: table_name
        description: str UC table name in format `catalog.schema.table_name`. This
          field corresponds to the {full_table_name_arg} arg in the endpoint path.
        required: true
        schema:
          type: string
        in: path
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                output_schema_name:
                  type: string
                  description: str [Create:REQ Update:REQ] Schema where output tables
                    are created. Needs to be in 2-level format {catalog}.{schema}
                baseline_table_name:
                  type: string
                  description: str (optional) [Create:OPT Update:OPT] Baseline table
                    name. Baseline data is used to compute drift from the data in
                    the monitored `table_name`. The baseline table and the monitored
                    table shall have the same schema.
                custom_metrics:
                  type: array
                  items:
                    $ref: '#/components/schemas/MonitorMetric'
                  description: List[:class:`MonitorMetric`] (optional) [Create:OPT
                    Update:OPT] Custom metrics.
                dashboard_id:
                  type: string
                  description: str (optional) [Create:ERR Update:OPT] Id of dashboard
                    that visualizes the computed metrics. This can be empty if the
                    monitor is in PENDING state.
                data_classification_config:
                  $ref: '#/components/schemas/MonitorDataClassificationConfig'
                inference_log:
                  $ref: '#/components/schemas/MonitorInferenceLog'
                latest_monitor_failure_msg:
                  type: string
                  description: str (optional) [Create:ERR Update:IGN] The latest error
                    message for a monitor failure.
                notifications:
                  $ref: '#/components/schemas/MonitorNotifications'
                schedule:
                  $ref: '#/components/schemas/MonitorCronSchedule'
                slicing_exprs:
                  type: array
                  items:
                    type: string
                  description: 'List[str] (optional) [Create:OPT Update:OPT] List
                    of column expressions to slice data with for targeted analysis.
                    The data is grouped by each expression independently, resulting
                    in a separate slice for each predicate and its complements. For
                    example `slicing_exprs=[“col_1”, “col_2 > 10”]` will generate
                    the following slices: two slices for `col_2 > 10` (True and False),
                    and one slice per unique value in `col1`. For high-cardinality
                    columns, only the top 100 unique values by frequency will generate
                    slices.'
                snapshot:
                  $ref: '#/components/schemas/MonitorSnapshot'
                time_series:
                  $ref: '#/components/schemas/MonitorTimeSeries'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MonitorInfo'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not found
        '500':
          description: Internal server error
  /api/2.1/unity-catalog/tables/{table_name}/monitor/refreshes:
    get:
      operationId: list_refreshes
      summary: Gets an array containing the history of the most recent refreshes (up
        to 25) for this table.
      description: "Gets an array containing the history of the most recent refreshes\
        \ (up to 25) for this table.\n\nThe caller must either: 1. be an owner of\
        \ the table's parent catalog 2. have **USE_CATALOG** on the\ntable's parent\
        \ catalog and be an owner of the table's parent schema 3. have the following\
        \ permissions:\n- **USE_CATALOG** on the table's parent catalog - **USE_SCHEMA**\
        \ on the table's parent schema -\n**SELECT** privilege on the table.\n\nAdditionally,\
        \ the call must be made from the workspace where the monitor was created.\n\
        \n:param table_name: str\n  UC table name in format `catalog.schema.table_name`.\
        \ table_name is case insensitive and spaces are\n  disallowed.\n\n:returns:\
        \ :class:`MonitorRefreshListResponse`"
      tags:
      - catalog
      parameters:
      - name: table_name
        description: str UC table name in format `catalog.schema.table_name`. table_name
          is case insensitive and spaces are disallowed.
        required: true
        schema:
          type: string
        in: path
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MonitorRefreshListResponse'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not found
        '500':
          description: Internal server error
    post:
      operationId: run_refresh
      summary: 'Queues a metric refresh on the monitor for the specified table. The
        refresh will execute in the

        background.'
      description: "Queues a metric refresh on the monitor for the specified table.\
        \ The refresh will execute in the\nbackground.\n\nThe caller must either:\
        \ 1. be an owner of the table's parent catalog 2. have **USE_CATALOG** on\
        \ the\ntable's parent catalog and be an owner of the table's parent schema\
        \ 3. have the following permissions:\n- **USE_CATALOG** on the table's parent\
        \ catalog - **USE_SCHEMA** on the table's parent schema - be an\nowner of\
        \ the table\n\nAdditionally, the call must be made from the workspace where\
        \ the monitor was created.\n\n:param table_name: str\n  UC table name in format\
        \ `catalog.schema.table_name`. table_name is case insensitive and spaces are\n\
        \  disallowed.\n\n:returns: :class:`MonitorRefreshInfo`"
      tags:
      - catalog
      parameters:
      - name: table_name
        description: str UC table name in format `catalog.schema.table_name`. table_name
          is case insensitive and spaces are disallowed.
        required: true
        schema:
          type: string
        in: path
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MonitorRefreshInfo'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not found
        '500':
          description: Internal server error
  /api/2.1/unity-catalog/models:
    post:
      operationId: create
      summary: Creates a new registered model in Unity Catalog.
      description: "Creates a new registered model in Unity Catalog.\n\nFile storage\
        \ for model versions in the registered model will be located in the default\
        \ location which\nis specified by the parent schema, or the parent catalog,\
        \ or the Metastore.\n\nFor registered model creation to succeed, the user\
        \ must satisfy the following conditions: - The caller\nmust be a metastore\
        \ admin, or be the owner of the parent catalog and schema, or have the\n**USE_CATALOG**\
        \ privilege on the parent catalog and the **USE_SCHEMA** privilege on the\
        \ parent schema.\n- The caller must have the **CREATE MODEL** or **CREATE\
        \ FUNCTION** privilege on the parent schema.\n\n:param aliases: List[:class:`RegisteredModelAlias`]\
        \ (optional)\n  List of aliases associated with the registered model\n:param\
        \ browse_only: bool (optional)\n  Indicates whether the principal is limited\
        \ to retrieving metadata for the associated object through\n  the BROWSE privilege\
        \ when include_browse is enabled in the request.\n:param catalog_name: str\
        \ (optional)\n  The name of the catalog where the schema and the registered\
        \ model reside\n:param comment: str (optional)\n  The comment attached to\
        \ the registered model\n:param created_at: int (optional)\n  Creation timestamp\
        \ of the registered model in milliseconds since the Unix epoch\n:param created_by:\
        \ str (optional)\n  The identifier of the user who created the registered\
        \ model\n:param full_name: str (optional)\n  The three-level (fully qualified)\
        \ name of the registered model\n:param metastore_id: str (optional)\n  The\
        \ unique identifier of the metastore\n:param name: str (optional)\n  The name\
        \ of the registered model\n:param owner: str (optional)\n  The identifier\
        \ of the user who owns the registered model\n:param schema_name: str (optional)\n\
        \  The name of the schema where the registered model resides\n:param storage_location:\
        \ str (optional)\n  The storage location on the cloud under which model version\
        \ data files are stored\n:param updated_at: int (optional)\n  Last-update\
        \ timestamp of the registered model in milliseconds since the Unix epoch\n\
        :param updated_by: str (optional)\n  The identifier of the user who updated\
        \ the registered model last time\n\n:returns: :class:`RegisteredModelInfo`"
      tags:
      - catalog
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                aliases:
                  type: array
                  items:
                    $ref: '#/components/schemas/RegisteredModelAlias'
                  description: List[:class:`RegisteredModelAlias`] (optional) List
                    of aliases associated with the registered model
                browse_only:
                  type: boolean
                  description: bool (optional) Indicates whether the principal is
                    limited to retrieving metadata for the associated object through
                    the BROWSE privilege when include_browse is enabled in the request.
                catalog_name:
                  type: string
                  description: str (optional) The name of the catalog where the schema
                    and the registered model reside
                comment:
                  type: string
                  description: str (optional) The comment attached to the registered
                    model
                created_at:
                  type: integer
                  description: int (optional) Creation timestamp of the registered
                    model in milliseconds since the Unix epoch
                created_by:
                  type: string
                  description: str (optional) The identifier of the user who created
                    the registered model
                full_name:
                  type: string
                  description: str (optional) The three-level (fully qualified) name
                    of the registered model
                metastore_id:
                  type: string
                  description: str (optional) The unique identifier of the metastore
                name:
                  type: string
                  description: str (optional) The name of the registered model
                owner:
                  type: string
                  description: str (optional) The identifier of the user who owns
                    the registered model
                schema_name:
                  type: string
                  description: str (optional) The name of the schema where the registered
                    model resides
                storage_location:
                  type: string
                  description: str (optional) The storage location on the cloud under
                    which model version data files are stored
                updated_at:
                  type: integer
                  description: int (optional) Last-update timestamp of the registered
                    model in milliseconds since the Unix epoch
                updated_by:
                  type: string
                  description: str (optional) The identifier of the user who updated
                    the registered model last time
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisteredModelInfo'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not found
        '500':
          description: Internal server error
    get:
      operationId: list
      summary: 'List registered models. You can list registered models under a particular
        schema, or list all

        registered models in the current metastore.'
      description: "List registered models. You can list registered models under a\
        \ particular schema, or list all\nregistered models in the current metastore.\n\
        \nThe returned models are filtered based on the privileges of the calling\
        \ user. For example, the\nmetastore admin is able to list all the registered\
        \ models. A regular user needs to be the owner or\nhave the **EXECUTE** privilege\
        \ on the registered model to recieve the registered models in the\nresponse.\
        \ For the latter case, the caller must also be the owner or have the **USE_CATALOG**\
        \ privilege\non the parent catalog and the **USE_SCHEMA** privilege on the\
        \ parent schema.\n\nThere is no guarantee of a specific ordering of the elements\
        \ in the response.\n\n:param catalog_name: str (optional)\n  The identifier\
        \ of the catalog under which to list registered models. If specified, schema_name\
        \ must\n  be specified.\n:param include_browse: bool (optional)\n  Whether\
        \ to include registered models in the response for which the principal can\
        \ only access\n  selective metadata for\n:param max_results: int (optional)\n\
        \  Max number of registered models to return.\n\n  If both catalog and schema\
        \ are specified: - when max_results is not specified, the page length is\n\
        \  set to a server configured value (10000, as of 4/2/2024). - when set to\
        \ a value greater than 0, the\n  page length is the minimum of this value\
        \ and a server configured value (10000, as of 4/2/2024); -\n  when set to\
        \ 0, the page length is set to a server configured value (10000, as of 4/2/2024);\
        \ - when\n  set to a value less than 0, an invalid parameter error is returned;\n\
        \n  If neither schema nor catalog is specified: - when max_results is not\
        \ specified, the page length is\n  set to a server configured value (100,\
        \ as of 4/2/2024). - when set to a value greater than 0, the\n  page length\
        \ is the minimum of this value and a server configured value (1000, as of\
        \ 4/2/2024); -\n  when set to 0, the page length is set to a server configured\
        \ value (100, as of 4/2/2024); - when set\n  to a value less than 0, an invalid\
        \ parameter error is returned;\n:param page_token: str (optional)\n  Opaque\
        \ token to send for the next page of results (pagination).\n:param schema_name:\
        \ str (optional)\n  The identifier of the schema under which to list registered\
        \ models. If specified, catalog_name must\n  be specified.\n\n:returns: Iterator\
        \ over :class:`RegisteredModelInfo`"
      tags:
      - catalog
      parameters:
      - name: catalog_name
        description: str (optional) The identifier of the catalog under which to list
          registered models. If specified, schema_name must be specified.
        required: false
        schema:
          type: string
        in: query
      - name: include_browse
        description: bool (optional) Whether to include registered models in the response
          for which the principal can only access selective metadata for
        required: false
        schema:
          type: boolean
        in: query
      - name: max_results
        description: 'int (optional) Max number of registered models to return. If
          both catalog and schema are specified: - when max_results is not specified,
          the page length is set to a server configured value (10000, as of 4/2/2024).
          - when set to a value greater than 0, the page length is the minimum of
          this value and a server configured value (10000, as of 4/2/2024); - when
          set to 0, the page length is set to a server configured value (10000, as
          of 4/2/2024); - when set to a value less than 0, an invalid parameter error
          is returned; If neither schema nor catalog is specified: - when max_results
          is not specified, the page length is set to a server configured value (100,
          as of 4/2/2024). - when set to a value greater than 0, the page length is
          the minimum of this value and a server configured value (1000, as of 4/2/2024);
          - when set to 0, the page length is set to a server configured value (100,
          as of 4/2/2024); - when set to a value less than 0, an invalid parameter
          error is returned;'
        required: false
        schema:
          type: integer
        in: query
      - name: page_token
        description: str (optional) Opaque token to send for the next page of results
          (pagination).
        required: false
        schema:
          type: string
        in: query
      - name: schema_name
        description: str (optional) The identifier of the schema under which to list
          registered models. If specified, catalog_name must be specified.
        required: false
        schema:
          type: string
        in: query
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisteredModelInfo'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not found
        '500':
          description: Internal server error
  /api/2.1/unity-catalog/models/{full_name}:
    delete:
      operationId: delete
      summary: Deletes a registered model and all its model versions from the specified
        parent catalog and schema.
      description: "Deletes a registered model and all its model versions from the\
        \ specified parent catalog and schema.\n\nThe caller must be a metastore admin\
        \ or an owner of the registered model. For the latter case, the\ncaller must\
        \ also be the owner or have the **USE_CATALOG** privilege on the parent catalog\
        \ and the\n**USE_SCHEMA** privilege on the parent schema.\n\n:param full_name:\
        \ str\n  The three-level (fully qualified) name of the registered model"
      tags:
      - catalog
      parameters:
      - name: full_name
        description: str The three-level (fully qualified) name of the registered
          model
        required: true
        schema:
          type: string
        in: path
      responses:
        '200':
          description: Success
    get:
      operationId: get
      summary: Get a registered model.
      description: "Get a registered model.\n\nThe caller must be a metastore admin\
        \ or an owner of (or have the **EXECUTE** privilege on) the\nregistered model.\
        \ For the latter case, the caller must also be the owner or have the **USE_CATALOG**\n\
        privilege on the parent catalog and the **USE_SCHEMA** privilege on the parent\
        \ schema.\n\n:param full_name: str\n  The three-level (fully qualified) name\
        \ of the registered model\n:param include_aliases: bool (optional)\n  Whether\
        \ to include registered model aliases in the response\n:param include_browse:\
        \ bool (optional)\n  Whether to include registered models in the response\
        \ for which the principal can only access\n  selective metadata for\n\n:returns:\
        \ :class:`RegisteredModelInfo`"
      tags:
      - catalog
      parameters:
      - name: full_name
        description: str The three-level (fully qualified) name of the registered
          model
        required: true
        schema:
          type: string
        in: path
      - name: include_aliases
        description: bool (optional) Whether to include registered model aliases in
          the response
        required: false
        schema:
          type: boolean
        in: query
      - name: include_browse
        description: bool (optional) Whether to include registered models in the response
          for which the principal can only access selective metadata for
        required: false
        schema:
          type: boolean
        in: query
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisteredModelInfo'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not found
        '500':
          description: Internal server error
    patch:
      operationId: update
      summary: Updates the specified registered model.
      description: "Updates the specified registered model.\n\nThe caller must be\
        \ a metastore admin or an owner of the registered model. For the latter case,\
        \ the\ncaller must also be the owner or have the **USE_CATALOG** privilege\
        \ on the parent catalog and the\n**USE_SCHEMA** privilege on the parent schema.\n\
        \nCurrently only the name, the owner or the comment of the registered model\
        \ can be updated.\n\n:param full_name: str\n  The three-level (fully qualified)\
        \ name of the registered model\n:param aliases: List[:class:`RegisteredModelAlias`]\
        \ (optional)\n  List of aliases associated with the registered model\n:param\
        \ browse_only: bool (optional)\n  Indicates whether the principal is limited\
        \ to retrieving metadata for the associated object through\n  the BROWSE privilege\
        \ when include_browse is enabled in the request.\n:param catalog_name: str\
        \ (optional)\n  The name of the catalog where the schema and the registered\
        \ model reside\n:param comment: str (optional)\n  The comment attached to\
        \ the registered model\n:param created_at: int (optional)\n  Creation timestamp\
        \ of the registered model in milliseconds since the Unix epoch\n:param created_by:\
        \ str (optional)\n  The identifier of the user who created the registered\
        \ model\n:param metastore_id: str (optional)\n  The unique identifier of the\
        \ metastore\n:param name: str (optional)\n  The name of the registered model\n\
        :param new_name: str (optional)\n  New name for the registered model.\n:param\
        \ owner: str (optional)\n  The identifier of the user who owns the registered\
        \ model\n:param schema_name: str (optional)\n  The name of the schema where\
        \ the registered model resides\n:param storage_location: str (optional)\n\
        \  The storage location on the cloud under which model version data files\
        \ are stored\n:param updated_at: int (optional)\n  Last-update timestamp of\
        \ the registered model in milliseconds since the Unix epoch\n:param updated_by:\
        \ str (optional)\n  The identifier of the user who updated the registered\
        \ model last time\n\n:returns: :class:`RegisteredModelInfo`"
      tags:
      - catalog
      parameters:
      - name: full_name
        description: str The three-level (fully qualified) name of the registered
          model
        required: true
        schema:
          type: string
        in: path
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                aliases:
                  type: array
                  items:
                    $ref: '#/components/schemas/RegisteredModelAlias'
                  description: List[:class:`RegisteredModelAlias`] (optional) List
                    of aliases associated with the registered model
                browse_only:
                  type: boolean
                  description: bool (optional) Indicates whether the principal is
                    limited to retrieving metadata for the associated object through
                    the BROWSE privilege when include_browse is enabled in the request.
                catalog_name:
                  type: string
                  description: str (optional) The name of the catalog where the schema
                    and the registered model reside
                comment:
                  type: string
                  description: str (optional) The comment attached to the registered
                    model
                created_at:
                  type: integer
                  description: int (optional) Creation timestamp of the registered
                    model in milliseconds since the Unix epoch
                created_by:
                  type: string
                  description: str (optional) The identifier of the user who created
                    the registered model
                metastore_id:
                  type: string
                  description: str (optional) The unique identifier of the metastore
                name:
                  type: string
                  description: str (optional) The name of the registered model
                new_name:
                  type: string
                  description: str (optional) New name for the registered model.
                owner:
                  type: string
                  description: str (optional) The identifier of the user who owns
                    the registered model
                schema_name:
                  type: string
                  description: str (optional) The name of the schema where the registered
                    model resides
                storage_location:
                  type: string
                  description: str (optional) The storage location on the cloud under
                    which model version data files are stored
                updated_at:
                  type: integer
                  description: int (optional) Last-update timestamp of the registered
                    model in milliseconds since the Unix epoch
                updated_by:
                  type: string
                  description: str (optional) The identifier of the user who updated
                    the registered model last time
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisteredModelInfo'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not found
        '500':
          description: Internal server error
  /api/2.1/unity-catalog/models/{full_name}/aliases/{alias}:
    delete:
      operationId: delete_alias
      summary: Deletes a registered model alias.
      description: "Deletes a registered model alias.\n\nThe caller must be a metastore\
        \ admin or an owner of the registered model. For the latter case, the\ncaller\
        \ must also be the owner or have the **USE_CATALOG** privilege on the parent\
        \ catalog and the\n**USE_SCHEMA** privilege on the parent schema.\n\n:param\
        \ full_name: str\n  The three-level (fully qualified) name of the registered\
        \ model\n:param alias: str\n  The name of the alias"
      tags:
      - catalog
      parameters:
      - name: full_name
        description: str The three-level (fully qualified) name of the registered
          model
        required: true
        schema:
          type: string
        in: path
      - name: alias
        description: str The name of the alias
        required: true
        schema:
          type: string
        in: path
      responses:
        '200':
          description: Success
  /api/3.0/rfa/requests:
    post:
      operationId: batch_create_access_requests
      summary: 'Creates access requests for Unity Catalog permissions for a specified
        principal on a securable object.

        This Batch API can take in multiple principals, securable objects, and permissions
        as the input and

        returns the access request destinations for each. Principals must be unique
        across the API call.'
      description: "Creates access requests for Unity Catalog permissions for a specified\
        \ principal on a securable object.\nThis Batch API can take in multiple principals,\
        \ securable objects, and permissions as the input and\nreturns the access\
        \ request destinations for each. Principals must be unique across the API\
        \ call.\n\nThe supported securable types are: \"metastore\", \"catalog\",\
        \ \"schema\", \"table\", \"external_location\",\n\"connection\", \"credential\"\
        , \"function\", \"registered_model\", and \"volume\".\n\n:param requests:\
        \ List[:class:`CreateAccessRequest`] (optional)\n  A list of individual access\
        \ requests, where each request corresponds to a set of permissions being\n\
        \  requested on a list of securables for a specified principal.\n\n  At most\
        \ 30 requests per API call.\n\n:returns: :class:`BatchCreateAccessRequestsResponse`"
      tags:
      - catalog
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                requests:
                  type: array
                  items:
                    $ref: '#/components/schemas/CreateAccessRequest'
                  description: List[:class:`CreateAccessRequest`] (optional) A list
                    of individual access requests, where each request corresponds
                    to a set of permissions being requested on a list of securables
                    for a specified principal. At most 30 requests per API call.
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchCreateAccessRequestsResponse'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not found
        '500':
          description: Internal server error
  /api/3.0/rfa/destinations/{securable_type}/{full_name}:
    get:
      operationId: get_access_request_destinations
      summary: 'Gets an array of access request destinations for the specified securable.
        Any caller can see URL

        destinations or the destinations on the metastore. Otherwise, only those with
        **BROWSE** permissions

        on the securable can see destinations.'
      description: "Gets an array of access request destinations for the specified\
        \ securable. Any caller can see URL\ndestinations or the destinations on the\
        \ metastore. Otherwise, only those with **BROWSE** permissions\non the securable\
        \ can see destinations.\n\nThe supported securable types are: \"metastore\"\
        , \"catalog\", \"schema\", \"table\", \"external_location\",\n\"connection\"\
        , \"credential\", \"function\", \"registered_model\", and \"volume\".\n\n\
        :param securable_type: str\n  The type of the securable.\n:param full_name:\
        \ str\n  The full name of the securable.\n\n:returns: :class:`AccessRequestDestinations`"
      tags:
      - catalog
      parameters:
      - name: securable_type
        description: str The type of the securable.
        required: true
        schema:
          type: string
        in: path
      - name: full_name
        description: str The full name of the securable.
        required: true
        schema:
          type: string
        in: path
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessRequestDestinations'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not found
        '500':
          description: Internal server error
  /api/3.0/rfa/destinations:
    patch:
      operationId: update_access_request_destinations
      summary: 'Updates the access request destinations for the given securable. The
        caller must be a metastore admin,

        the owner of the securable, or a user that has the **MANAGE** privilege on
        the securable in order to

        assign destinations. Destinations cannot be updated for securables underneath
        schemas (tables,

        volumes, functions, and models). For these securable types, destinations are
        inherited from the parent

        securable. A maximum of 5 emails and 5 external notification destinations
        (Slack, Microsoft Teams, and

        Generic Webhook destinations) can be assigned to a securable. If a URL destination
        is assigned, no

        other destinations can be set.'
      description: "Updates the access request destinations for the given securable.\
        \ The caller must be a metastore admin,\nthe owner of the securable, or a\
        \ user that has the **MANAGE** privilege on the securable in order to\nassign\
        \ destinations. Destinations cannot be updated for securables underneath schemas\
        \ (tables,\nvolumes, functions, and models). For these securable types, destinations\
        \ are inherited from the parent\nsecurable. A maximum of 5 emails and 5 external\
        \ notification destinations (Slack, Microsoft Teams, and\nGeneric Webhook\
        \ destinations) can be assigned to a securable. If a URL destination is assigned,\
        \ no\nother destinations can be set.\n\nThe supported securable types are:\
        \ \"metastore\", \"catalog\", \"schema\", \"table\", \"external_location\"\
        ,\n\"connection\", \"credential\", \"function\", \"registered_model\", and\
        \ \"volume\".\n\n:param access_request_destinations: :class:`AccessRequestDestinations`\n\
        \  The access request destinations to assign to the securable. For each destination,\
        \ a\n  **destination_id** and **destination_type** must be defined.\n:param\
        \ update_mask: str\n  The field mask must be a single string, with multiple\
        \ fields separated by commas (no spaces). The\n  field path is relative to\
        \ the resource object, using a dot (`.`) to navigate sub-fields (e.g.,\n \
        \ `author.given_name`). Specification of elements in sequence or map fields\
        \ is not allowed, as only\n  the entire collection field can be specified.\
        \ Field names must exactly match the resource field\n  names.\n\n  A field\
        \ mask of `*` indicates full replacement. It’s recommended to always explicitly\
        \ list the\n  fields being updated and avoid using `*` wildcards, as it can\
        \ lead to unintended results if the API\n  changes in the future.\n\n:returns:\
        \ :class:`AccessRequestDestinations`"
      tags:
      - catalog
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                access_request_destinations:
                  $ref: '#/components/schemas/AccessRequestDestinations'
                update_mask:
                  type: string
                  description: str The field mask must be a single string, with multiple
                    fields separated by commas (no spaces). The field path is relative
                    to the resource object, using a dot (`.`) to navigate sub-fields
                    (e.g., `author.given_name`). Specification of elements in sequence
                    or map fields is not allowed, as only the entire collection field
                    can be specified. Field names must exactly match the resource
                    field names. A field mask of `*` indicates full replacement. It’s
                    recommended to always explicitly list the fields being updated
                    and avoid using `*` wildcards, as it can lead to unintended results
                    if the API changes in the future.
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessRequestDestinations'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not found
        '500':
          description: Internal server error
  /api/2.1/unity-catalog/schemas:
    post:
      operationId: create
      summary: 'Creates a new schema for catalog in the Metastore. The caller must
        be a metastore admin, or have the

        **CREATE_SCHEMA** privilege in the parent catalog.'
      description: "Creates a new schema for catalog in the Metastore. The caller\
        \ must be a metastore admin, or have the\n**CREATE_SCHEMA** privilege in the\
        \ parent catalog.\n\n:param name: str\n  Name of schema, relative to parent\
        \ catalog.\n:param catalog_name: str\n  Name of parent catalog.\n:param comment:\
        \ str (optional)\n  User-provided free-form text description.\n:param properties:\
        \ Dict[str,str] (optional)\n  A map of key-value properties attached to the\
        \ securable.\n:param storage_root: str (optional)\n  Storage root URL for\
        \ managed tables within schema.\n\n:returns: :class:`SchemaInfo`"
      tags:
      - catalog
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: str Name of schema, relative to parent catalog.
                catalog_name:
                  type: string
                  description: str Name of parent catalog.
                comment:
                  type: string
                  description: str (optional) User-provided free-form text description.
                properties:
                  type: object
                  additionalProperties: true
                  description: Dict[str,str] (optional) A map of key-value properties
                    attached to the securable.
                storage_root:
                  type: string
                  description: str (optional) Storage root URL for managed tables
                    within schema.
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchemaInfo'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not found
        '500':
          description: Internal server error
    get:
      operationId: list
      summary: 'Gets an array of schemas for a catalog in the metastore. If the caller
        is the metastore admin or the

        owner of the parent catalog, all schemas for the catalog will be retrieved.
        Otherwise, only schemas

        owned by the caller (or for which the caller has the **USE_SCHEMA** privilege)
        will be retrieved.

        There is no guarantee of a specific ordering of the elements in the array.'
      description: "Gets an array of schemas for a catalog in the metastore. If the\
        \ caller is the metastore admin or the\nowner of the parent catalog, all schemas\
        \ for the catalog will be retrieved. Otherwise, only schemas\nowned by the\
        \ caller (or for which the caller has the **USE_SCHEMA** privilege) will be\
        \ retrieved.\nThere is no guarantee of a specific ordering of the elements\
        \ in the array.\n\nNOTE: we recommend using max_results=0 to use the paginated\
        \ version of this API. Unpaginated calls\nwill be deprecated soon.\n\nPAGINATION\
        \ BEHAVIOR: When using pagination (max_results >= 0), a page may contain zero\
        \ results while\nstill providing a next_page_token. Clients must continue\
        \ reading pages until next_page_token is\nabsent, which is the only indication\
        \ that the end of results has been reached. This behavior follows\nGoogle\
        \ AIP-158 guidelines.\n\n:param catalog_name: str\n  Parent catalog for schemas\
        \ of interest.\n:param include_browse: bool (optional)\n  Whether to include\
        \ schemas in the response for which the principal can only access selective\n\
        \  metadata for\n:param max_results: int (optional)\n  Maximum number of schemas\
        \ to return. If not set, all the schemas are returned (not recommended). -\n\
        \  when set to a value greater than 0, the page length is the minimum of this\
        \ value and a server\n  configured value; - when set to 0, the page length\
        \ is set to a server configured value\n  (recommended); - when set to a value\
        \ less than 0, an invalid parameter error is returned;\n:param page_token:\
        \ str (optional)\n  Opaque pagination token to go to next page based on previous\
        \ query.\n\n:returns: Iterator over :class:`SchemaInfo`"
      tags:
      - catalog
      parameters:
      - name: catalog_name
        description: str Parent catalog for schemas of interest.
        required: true
        schema:
          type: string
        in: query
      - name: include_browse
        description: bool (optional) Whether to include schemas in the response for
          which the principal can only access selective metadata for
        required: false
        schema:
          type: boolean
        in: query
      - name: max_results
        description: int (optional) Maximum number of schemas to return. If not set,
          all the schemas are returned (not recommended). - when set to a value greater
          than 0, the page length is the minimum of this value and a server configured
          value; - when set to 0, the page length is set to a server configured value
          (recommended); - when set to a value less than 0, an invalid parameter error
          is returned;
        required: false
        schema:
          type: integer
        in: query
      - name: page_token
        description: str (optional) Opaque pagination token to go to next page based
          on previous query.
        required: false
        schema:
          type: string
        in: query
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchemaInfo'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not found
        '500':
          description: Internal server error
  /api/2.1/unity-catalog/schemas/{full_name}:
    delete:
      operationId: delete
      summary: 'Deletes the specified schema from the parent catalog. The caller must
        be the owner of the schema or an

        owner of the parent catalog.'
      description: "Deletes the specified schema from the parent catalog. The caller\
        \ must be the owner of the schema or an\nowner of the parent catalog.\n\n\
        :param full_name: str\n  Full name of the schema.\n:param force: bool (optional)\n\
        \  Force deletion even if the schema is not empty."
      tags:
      - catalog
      parameters:
      - name: full_name
        description: str Full name of the schema.
        required: true
        schema:
          type: string
        in: path
      - name: force
        description: bool (optional) Force deletion even if the schema is not empty.
        required: false
        schema:
          type: boolean
        in: query
      responses:
        '200':
          description: Success
    get:
      operationId: get
      summary: 'Gets the specified schema within the metastore. The caller must be
        a metastore admin, the owner of the

        schema, or a user that has the **USE_SCHEMA** privilege on the schema.'
      description: "Gets the specified schema within the metastore. The caller must\
        \ be a metastore admin, the owner of the\nschema, or a user that has the **USE_SCHEMA**\
        \ privilege on the schema.\n\n:param full_name: str\n  Full name of the schema.\n\
        :param include_browse: bool (optional)\n  Whether to include schemas in the\
        \ response for which the principal can only access selective\n  metadata for\n\
        \n:returns: :class:`SchemaInfo`"
      tags:
      - catalog
      parameters:
      - name: full_name
        description: str Full name of the schema.
        required: true
        schema:
          type: string
        in: path
      - name: include_browse
        description: bool (optional) Whether to include schemas in the response for
          which the principal can only access selective metadata for
        required: false
        schema:
          type: boolean
        in: query
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchemaInfo'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not found
        '500':
          description: Internal server error
    patch:
      operationId: update
      summary: 'Updates a schema for a catalog. The caller must be the owner of the
        schema or a metastore admin. If

        the caller is a metastore admin, only the __owner__ field can be changed in
        the update. If the

        __name__ field must be updated, the caller must be a metastore admin or have
        the **CREATE_SCHEMA**

        privilege on the parent catalog.'
      description: "Updates a schema for a catalog. The caller must be the owner of\
        \ the schema or a metastore admin. If\nthe caller is a metastore admin, only\
        \ the __owner__ field can be changed in the update. If the\n__name__ field\
        \ must be updated, the caller must be a metastore admin or have the **CREATE_SCHEMA**\n\
        privilege on the parent catalog.\n\n:param full_name: str\n  Full name of\
        \ the schema.\n:param comment: str (optional)\n  User-provided free-form text\
        \ description.\n:param enable_predictive_optimization: :class:`EnablePredictiveOptimization`\
        \ (optional)\n  Whether predictive optimization should be enabled for this\
        \ object and objects under it.\n:param new_name: str (optional)\n  New name\
        \ for the schema.\n:param owner: str (optional)\n  Username of current owner\
        \ of schema.\n:param properties: Dict[str,str] (optional)\n  A map of key-value\
        \ properties attached to the securable.\n\n:returns: :class:`SchemaInfo`"
      tags:
      - catalog
      parameters:
      - name: full_name
        description: str Full name of the schema.
        required: true
        schema:
          type: string
        in: path
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                comment:
                  type: string
                  description: str (optional) User-provided free-form text description.
                enable_predictive_optimization:
                  type: string
                  enum:
                  - DISABLE
                  - ENABLE
                  - INHERIT
                  description: :class:`EnablePredictiveOptimization` (optional) Whether
                    predictive optimization should be enabled for this object and
                    objects under it.
                new_name:
                  type: string
                  description: str (optional) New name for the schema.
                owner:
                  type: string
                  description: str (optional) Username of current owner of schema.
                properties:
                  type: object
                  additionalProperties: true
                  description: Dict[str,str] (optional) A map of key-value properties
                    attached to the securable.
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchemaInfo'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not found
        '500':
          description: Internal server error
  /api/2.1/unity-catalog/storage-credentials:
    post:
      operationId: create
      summary: Creates a new storage credential.
      description: "Creates a new storage credential.\n\nThe caller must be a metastore\
        \ admin or have the **CREATE_STORAGE_CREDENTIAL** privilege on the\nmetastore.\n\
        \n:param name: str\n  The credential name. The name must be unique among storage\
        \ and service credentials within the\n  metastore.\n:param aws_iam_role: :class:`AwsIamRoleRequest`\
        \ (optional)\n  The AWS IAM role configuration.\n:param azure_managed_identity:\
        \ :class:`AzureManagedIdentityRequest` (optional)\n  The Azure managed identity\
        \ configuration.\n:param azure_service_principal: :class:`AzureServicePrincipal`\
        \ (optional)\n  The Azure service principal configuration.\n:param cloudflare_api_token:\
        \ :class:`CloudflareApiToken` (optional)\n  The Cloudflare API token configuration.\n\
        :param comment: str (optional)\n  Comment associated with the credential.\n\
        :param databricks_gcp_service_account: :class:`DatabricksGcpServiceAccountRequest`\
        \ (optional)\n  The Databricks managed GCP service account configuration.\n\
        :param read_only: bool (optional)\n  Whether the credential is usable only\
        \ for read operations. Only applicable when purpose is\n  **STORAGE**.\n:param\
        \ skip_validation: bool (optional)\n  Supplying true to this argument skips\
        \ validation of the created credential.\n\n:returns: :class:`StorageCredentialInfo`"
      tags:
      - catalog
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: str The credential name. The name must be unique among
                    storage and service credentials within the metastore.
                aws_iam_role:
                  $ref: '#/components/schemas/AwsIamRoleRequest'
                azure_managed_identity:
                  $ref: '#/components/schemas/AzureManagedIdentityRequest'
                azure_service_principal:
                  $ref: '#/components/schemas/AzureServicePrincipal'
                cloudflare_api_token:
                  $ref: '#/components/schemas/CloudflareApiToken'
                comment:
                  type: string
                  description: str (optional) Comment associated with the credential.
                databricks_gcp_service_account:
                  $ref: '#/components/schemas/DatabricksGcpServiceAccountRequest'
                read_only:
                  type: boolean
                  description: bool (optional) Whether the credential is usable only
                    for read operations. Only applicable when purpose is **STORAGE**.
                skip_validation:
                  type: boolean
                  description: bool (optional) Supplying true to this argument skips
                    validation of the created credential.
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StorageCredentialInfo'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not found
        '500':
          description: Internal server error
    get:
      operationId: list
      summary: 'Gets an array of storage credentials (as __StorageCredentialInfo__
        objects). The array is limited to

        only those storage credentials the caller has permission to access. If the
        caller is a metastore

        admin, retrieval of credentials is unrestricted. There is no guarantee of
        a specific ordering of the

        elements in the array.'
      description: "Gets an array of storage credentials (as __StorageCredentialInfo__\
        \ objects). The array is limited to\nonly those storage credentials the caller\
        \ has permission to access. If the caller is a metastore\nadmin, retrieval\
        \ of credentials is unrestricted. There is no guarantee of a specific ordering\
        \ of the\nelements in the array.\n\nNOTE: we recommend using max_results=0\
        \ to use the paginated version of this API. Unpaginated calls\nwill be deprecated\
        \ soon.\n\nPAGINATION BEHAVIOR: When using pagination (max_results >= 0),\
        \ a page may contain zero results while\nstill providing a next_page_token.\
        \ Clients must continue reading pages until next_page_token is\nabsent, which\
        \ is the only indication that the end of results has been reached. This behavior\
        \ follows\nGoogle AIP-158 guidelines.\n\n:param include_unbound: bool (optional)\n\
        \  Whether to include credentials not bound to the workspace. Effective only\
        \ if the user has permission\n  to update the credential–workspace binding.\n\
        :param max_results: int (optional)\n  Maximum number of storage credentials\
        \ to return. If not set, all the storage credentials are\n  returned (not\
        \ recommended). - when set to a value greater than 0, the page length is the\
        \ minimum of\n  this value and a server configured value; - when set to 0,\
        \ the page length is set to a server\n  configured value (recommended); -\
        \ when set to a value less than 0, an invalid parameter error is\n  returned;\n\
        :param page_token: str (optional)\n  Opaque pagination token to go to next\
        \ page based on previous query.\n\n:returns: Iterator over :class:`StorageCredentialInfo`"
      tags:
      - catalog
      parameters:
      - name: include_unbound
        description: bool (optional) Whether to include credentials not bound to the
          workspace. Effective only if the user has permission to update the credential–workspace
          binding.
        required: false
        schema:
          type: boolean
        in: query
      - name: max_results
        description: int (optional) Maximum number of storage credentials to return.
          If not set, all the storage credentials are returned (not recommended).
          - when set to a value greater than 0, the page length is the minimum of
          this value and a server configured value; - when set to 0, the page length
          is set to a server configured value (recommended); - when set to a value
          less than 0, an invalid parameter error is returned;
        required: false
        schema:
          type: integer
        in: query
      - name: page_token
        description: str (optional) Opaque pagination token to go to next page based
          on previous query.
        required: false
        schema:
          type: string
        in: query
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StorageCredentialInfo'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not found
        '500':
          description: Internal server error
  /api/2.1/unity-catalog/storage-credentials/{name}:
    delete:
      operationId: delete
      summary: 'Deletes a storage credential from the metastore. The caller must be
        an owner of the storage

        credential.'
      description: "Deletes a storage credential from the metastore. The caller must\
        \ be an owner of the storage\ncredential.\n\n:param name: str\n  Name of the\
        \ storage credential.\n:param force: bool (optional)\n  Force an update even\
        \ if there are dependent external locations or external tables (when purpose\
        \ is\n  **STORAGE**) or dependent services (when purpose is **SERVICE**)."
      tags:
      - catalog
      parameters:
      - name: name
        description: str Name of the storage credential.
        required: true
        schema:
          type: string
        in: path
      - name: force
        description: bool (optional) Force an update even if there are dependent external
          locations or external tables (when purpose is **STORAGE**) or dependent
          services (when purpose is **SERVICE**).
        required: false
        schema:
          type: boolean
        in: query
      responses:
        '200':
          description: Success
    get:
      operationId: get
      summary: 'Gets a storage credential from the metastore. The caller must be a
        metastore admin, the owner of the

        storage credential, or have some permission on the storage credential.'
      description: "Gets a storage credential from the metastore. The caller must\
        \ be a metastore admin, the owner of the\nstorage credential, or have some\
        \ permission on the storage credential.\n\n:param name: str\n  Name of the\
        \ storage credential.\n\n:returns: :class:`StorageCredentialInfo`"
      tags:
      - catalog
      parameters:
      - name: name
        description: str Name of the storage credential.
        required: true
        schema:
          type: string
        in: path
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StorageCredentialInfo'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not found
        '500':
          description: Internal server error
    patch:
      operationId: update
      summary: Updates a storage credential on the metastore.
      description: "Updates a storage credential on the metastore.\n\nThe caller must\
        \ be the owner of the storage credential or a metastore admin. If the caller\
        \ is a\nmetastore admin, only the **owner** field can be changed.\n\n:param\
        \ name: str\n  Name of the storage credential.\n:param aws_iam_role: :class:`AwsIamRoleRequest`\
        \ (optional)\n  The AWS IAM role configuration.\n:param azure_managed_identity:\
        \ :class:`AzureManagedIdentityResponse` (optional)\n  The Azure managed identity\
        \ configuration.\n:param azure_service_principal: :class:`AzureServicePrincipal`\
        \ (optional)\n  The Azure service principal configuration.\n:param cloudflare_api_token:\
        \ :class:`CloudflareApiToken` (optional)\n  The Cloudflare API token configuration.\n\
        :param comment: str (optional)\n  Comment associated with the credential.\n\
        :param databricks_gcp_service_account: :class:`DatabricksGcpServiceAccountRequest`\
        \ (optional)\n  The Databricks managed GCP service account configuration.\n\
        :param force: bool (optional)\n  Force update even if there are dependent\
        \ external locations or external tables.\n:param isolation_mode: :class:`IsolationMode`\
        \ (optional)\n  Whether the current securable is accessible from all workspaces\
        \ or a specific set of workspaces.\n:param new_name: str (optional)\n  New\
        \ name for the storage credential.\n:param owner: str (optional)\n  Username\
        \ of current owner of credential.\n:param read_only: bool (optional)\n  Whether\
        \ the credential is usable only for read operations. Only applicable when\
        \ purpose is\n  **STORAGE**.\n:param skip_validation: bool (optional)\n  Supplying\
        \ true to this argument skips validation of the updated credential.\n\n:returns:\
        \ :class:`StorageCredentialInfo`"
      tags:
      - catalog
      parameters:
      - name: name
        description: str Name of the storage credential.
        required: true
        schema:
          type: string
        in: path
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                aws_iam_role:
                  $ref: '#/components/schemas/AwsIamRoleRequest'
                azure_managed_identity:
                  $ref: '#/components/schemas/AzureManagedIdentityResponse'
                azure_service_principal:
                  $ref: '#/components/schemas/AzureServicePrincipal'
                cloudflare_api_token:
                  $ref: '#/components/schemas/CloudflareApiToken'
                comment:
                  type: string
                  description: str (optional) Comment associated with the credential.
                databricks_gcp_service_account:
                  $ref: '#/components/schemas/DatabricksGcpServiceAccountRequest'
                force:
                  type: boolean
                  description: bool (optional) Force update even if there are dependent
                    external locations or external tables.
                isolation_mode:
                  type: string
                  enum:
                  - ISOLATION_MODE_ISOLATED
                  - ISOLATION_MODE_OPEN
                  description: :class:`IsolationMode` (optional) Whether the current
                    securable is accessible from all workspaces or a specific set
                    of workspaces.
                new_name:
                  type: string
                  description: str (optional) New name for the storage credential.
                owner:
                  type: string
                  description: str (optional) Username of current owner of credential.
                read_only:
                  type: boolean
                  description: bool (optional) Whether the credential is usable only
                    for read operations. Only applicable when purpose is **STORAGE**.
                skip_validation:
                  type: boolean
                  description: bool (optional) Supplying true to this argument skips
                    validation of the updated credential.
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StorageCredentialInfo'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not found
        '500':
          description: Internal server error
  /api/2.1/unity-catalog/validate-storage-credentials:
    post:
      operationId: validate
      summary: 'Validates a storage credential. At least one of __external_location_name__
        and __url__ need to be

        provided. If only one of them is provided, it will be used for validation.
        And if both are provided,

        the __url__ will be used for validation, and __external_location_name__ will
        be ignored when checking

        overlapping urls.'
      description: "Validates a storage credential. At least one of __external_location_name__\
        \ and __url__ need to be\nprovided. If only one of them is provided, it will\
        \ be used for validation. And if both are provided,\nthe __url__ will be used\
        \ for validation, and __external_location_name__ will be ignored when checking\n\
        overlapping urls.\n\nEither the __storage_credential_name__ or the cloud-specific\
        \ credential must be provided.\n\nThe caller must be a metastore admin or\
        \ the storage credential owner or have the\n**CREATE_EXTERNAL_LOCATION** privilege\
        \ on the metastore and the storage credential.\n\n:param aws_iam_role: :class:`AwsIamRoleRequest`\
        \ (optional)\n  The AWS IAM role configuration.\n:param azure_managed_identity:\
        \ :class:`AzureManagedIdentityRequest` (optional)\n  The Azure managed identity\
        \ configuration.\n:param azure_service_principal: :class:`AzureServicePrincipal`\
        \ (optional)\n  The Azure service principal configuration.\n:param cloudflare_api_token:\
        \ :class:`CloudflareApiToken` (optional)\n  The Cloudflare API token configuration.\n\
        :param databricks_gcp_service_account: :class:`DatabricksGcpServiceAccountRequest`\
        \ (optional)\n  The Databricks created GCP service account configuration.\n\
        :param external_location_name: str (optional)\n  The name of an existing external\
        \ location to validate.\n:param read_only: bool (optional)\n  Whether the\
        \ storage credential is only usable for read operations.\n:param storage_credential_name:\
        \ str (optional)\n  Required. The name of an existing credential or long-lived\
        \ cloud credential to validate.\n:param url: str (optional)\n  The external\
        \ location url to validate.\n\n:returns: :class:`ValidateStorageCredentialResponse`"
      tags:
      - catalog
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                aws_iam_role:
                  $ref: '#/components/schemas/AwsIamRoleRequest'
                azure_managed_identity:
                  $ref: '#/components/schemas/AzureManagedIdentityRequest'
                azure_service_principal:
                  $ref: '#/components/schemas/AzureServicePrincipal'
                cloudflare_api_token:
                  $ref: '#/components/schemas/CloudflareApiToken'
                databricks_gcp_service_account:
                  $ref: '#/components/schemas/DatabricksGcpServiceAccountRequest'
                external_location_name:
                  type: string
                  description: str (optional) The name of an existing external location
                    to validate.
                read_only:
                  type: boolean
                  description: bool (optional) Whether the storage credential is only
                    usable for read operations.
                storage_credential_name:
                  type: string
                  description: str (optional) Required. The name of an existing credential
                    or long-lived cloud credential to validate.
                url:
                  type: string
                  description: str (optional) The external location url to validate.
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidateStorageCredentialResponse'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not found
        '500':
          description: Internal server error
  /api/2.1/unity-catalog/constraints:
    post:
      operationId: create
      summary: Creates a new table constraint.
      description: "Creates a new table constraint.\n\nFor the table constraint creation\
        \ to succeed, the user must satisfy both of these conditions: - the\nuser\
        \ must have the **USE_CATALOG** privilege on the table's parent catalog, the\
        \ **USE_SCHEMA**\nprivilege on the table's parent schema, and be the owner\
        \ of the table. - if the new constraint is a\n__ForeignKeyConstraint__, the\
        \ user must have the **USE_CATALOG** privilege on the referenced parent\n\
        table's catalog, the **USE_SCHEMA** privilege on the referenced parent table's\
        \ schema, and be the\nowner of the referenced parent table.\n\n:param full_name_arg:\
        \ str\n  The full name of the table referenced by the constraint.\n:param\
        \ constraint: :class:`TableConstraint`\n\n:returns: :class:`TableConstraint`"
      tags:
      - catalog
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                full_name_arg:
                  type: string
                  description: str The full name of the table referenced by the constraint.
                constraint:
                  $ref: '#/components/schemas/TableConstraint'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TableConstraint'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not found
        '500':
          description: Internal server error
  /api/2.1/unity-catalog/constraints/{full_name}:
    delete:
      operationId: delete
      summary: Deletes a table constraint.
      description: "Deletes a table constraint.\n\nFor the table constraint deletion\
        \ to succeed, the user must satisfy both of these conditions: - the\nuser\
        \ must have the **USE_CATALOG** privilege on the table's parent catalog, the\
        \ **USE_SCHEMA**\nprivilege on the table's parent schema, and be the owner\
        \ of the table. - if __cascade__ argument is\n**true**, the user must have\
        \ the following permissions on all of the child tables: the **USE_CATALOG**\n\
        privilege on the table's catalog, the **USE_SCHEMA** privilege on the table's\
        \ schema, and be the owner\nof the table.\n\n:param full_name: str\n  Full\
        \ name of the table referenced by the constraint.\n:param constraint_name:\
        \ str\n  The name of the constraint to delete.\n:param cascade: bool\n  If\
        \ true, try deleting all child constraints of the current constraint. If false,\
        \ reject this\n  operation if the current constraint has any child constraints."
      tags:
      - catalog
      parameters:
      - name: full_name
        description: str Full name of the table referenced by the constraint.
        required: true
        schema:
          type: string
        in: path
      - name: constraint_name
        description: str The name of the constraint to delete.
        required: true
        schema:
          type: string
        in: query
      - name: cascade
        description: bool If true, try deleting all child constraints of the current
          constraint. If false, reject this operation if the current constraint has
          any child constraints.
        required: true
        schema:
          type: boolean
        in: query
      responses:
        '200':
          description: Success
  /api/2.1/unity-catalog/tables:
    post:
      operationId: create
      summary: Creates a new table in the specified catalog and schema.
      description: "Creates a new table in the specified catalog and schema.\n\nTo\
        \ create an external delta table, the caller must have the **EXTERNAL_USE_SCHEMA**\
        \ privilege on the\nparent schema and the **EXTERNAL_USE_LOCATION** privilege\
        \ on the external location. These privileges\nmust always be granted explicitly,\
        \ and cannot be inherited through ownership or **ALL_PRIVILEGES**.\n\nStandard\
        \ UC permissions needed to create tables still apply: **USE_CATALOG** on the\
        \ parent catalog (or\nownership of the parent catalog), **CREATE_TABLE** and\
        \ **USE_SCHEMA** on the parent schema (or\nownership of the parent schema),\
        \ and **CREATE_EXTERNAL_TABLE** on external location.\n\nThe **columns** field\
        \ needs to be in a Spark compatible format, so we recommend you use Spark\
        \ to\ncreate these tables. The API itself does not validate the correctness\
        \ of the column spec. If the spec\nis not Spark compatible, the tables may\
        \ not be readable by Databricks Runtime.\n\nNOTE: The Create Table API for\
        \ external clients only supports creating **external delta tables**. The\n\
        values shown in the respective enums are all values supported by Databricks,\
        \ however for this specific\nCreate Table API, only **table_type** **EXTERNAL**\
        \ and **data_source_format** **DELTA** are supported.\nAdditionally, column\
        \ masks are not supported when creating tables through this API.\n\n:param\
        \ name: str\n  Name of table, relative to parent schema.\n:param catalog_name:\
        \ str\n  Name of parent catalog.\n:param schema_name: str\n  Name of parent\
        \ schema relative to its parent catalog.\n:param table_type: :class:`TableType`\n\
        :param data_source_format: :class:`DataSourceFormat`\n:param storage_location:\
        \ str\n  Storage root URL for table (for **MANAGED**, **EXTERNAL** tables).\n\
        :param columns: List[:class:`ColumnInfo`] (optional)\n  The array of __ColumnInfo__\
        \ definitions of the table's columns.\n:param properties: Dict[str,str] (optional)\n\
        \  A map of key-value properties attached to the securable.\n\n:returns: :class:`TableInfo`"
      tags:
      - catalog
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: str Name of table, relative to parent schema.
                catalog_name:
                  type: string
                  description: str Name of parent catalog.
                schema_name:
                  type: string
                  description: str Name of parent schema relative to its parent catalog.
                table_type:
                  type: string
                  enum:
                  - EXTERNAL
                  - EXTERNAL_SHALLOW_CLONE
                  - FOREIGN
                  - MANAGED
                  - MANAGED_SHALLOW_CLONE
                  - MATERIALIZED_VIEW
                  - METRIC_VIEW
                  - STREAMING_TABLE
                  - VIEW
                  description: :class:`TableType`
                data_source_format:
                  type: string
                  enum:
                  - AVRO
                  - BIGQUERY_FORMAT
                  - CSV
                  - DATABRICKS_FORMAT
                  - DATABRICKS_ROW_STORE_FORMAT
                  - DELTA
                  - DELTASHARING
                  - DELTA_UNIFORM_HUDI
                  - DELTA_UNIFORM_ICEBERG
                  - HIVE
                  - ICEBERG
                  - JSON
                  - MONGODB_FORMAT
                  - MYSQL_FORMAT
                  - NETSUITE_FORMAT
                  - ORACLE_FORMAT
                  - ORC
                  - PARQUET
                  - POSTGRESQL_FORMAT
                  - REDSHIFT_FORMAT
                  - SALESFORCE_DATA_CLOUD_FORMAT
                  - SALESFORCE_FORMAT
                  - SNOWFLAKE_FORMAT
                  - SQLDW_FORMAT
                  - SQLSERVER_FORMAT
                  - TERADATA_FORMAT
                  - TEXT
                  - UNITY_CATALOG
                  - VECTOR_INDEX_FORMAT
                  - WORKDAY_RAAS_FORMAT
                  description: :class:`DataSourceFormat`
                storage_location:
                  type: string
                  description: str Storage root URL for table (for **MANAGED**, **EXTERNAL**
                    tables).
                columns:
                  type: array
                  items:
                    $ref: '#/components/schemas/ColumnInfo'
                  description: List[:class:`ColumnInfo`] (optional) The array of __ColumnInfo__
                    definitions of the table's columns.
                properties:
                  type: object
                  additionalProperties: true
                  description: Dict[str,str] (optional) A map of key-value properties
                    attached to the securable.
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TableInfo'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not found
        '500':
          description: Internal server error
    get:
      operationId: list
      summary: 'Gets an array of all tables for the current metastore under the parent
        catalog and schema. The caller

        must be a metastore admin or an owner of (or have the **SELECT** privilege
        on) the table. For the

        latter case, the caller must also be the owner or have the **USE_CATALOG**
        privilege on the parent

        catalog and the **USE_SCHEMA** privilege on the parent schema. There is no
        guarantee of a specific

        ordering of the elements in the array.'
      description: "Gets an array of all tables for the current metastore under the\
        \ parent catalog and schema. The caller\nmust be a metastore admin or an owner\
        \ of (or have the **SELECT** privilege on) the table. For the\nlatter case,\
        \ the caller must also be the owner or have the **USE_CATALOG** privilege\
        \ on the parent\ncatalog and the **USE_SCHEMA** privilege on the parent schema.\
        \ There is no guarantee of a specific\nordering of the elements in the array.\n\
        \nNOTE: we recommend using max_results=0 to use the paginated version of this\
        \ API. Unpaginated calls\nwill be deprecated soon.\n\nPAGINATION BEHAVIOR:\
        \ When using pagination (max_results >= 0), a page may contain zero results\
        \ while\nstill providing a next_page_token. Clients must continue reading\
        \ pages until next_page_token is\nabsent, which is the only indication that\
        \ the end of results has been reached. This behavior follows\nGoogle AIP-158\
        \ guidelines.\n\n:param catalog_name: str\n  Name of parent catalog for tables\
        \ of interest.\n:param schema_name: str\n  Parent schema of tables.\n:param\
        \ include_browse: bool (optional)\n  Whether to include tables in the response\
        \ for which the principal can only access selective metadata\n  for.\n:param\
        \ include_manifest_capabilities: bool (optional)\n  Whether to include a manifest\
        \ containing table capabilities in the response.\n:param max_results: int\
        \ (optional)\n  Maximum number of tables to return. If not set, all the tables\
        \ are returned (not recommended). -\n  when set to a value greater than 0,\
        \ the page length is the minimum of this value and a server\n  configured\
        \ value; - when set to 0, the page length is set to a server configured value\n\
        \  (recommended); - when set to a value less than 0, an invalid parameter\
        \ error is returned;\n:param omit_columns: bool (optional)\n  Whether to omit\
        \ the columns of the table from the response or not.\n:param omit_properties:\
        \ bool (optional)\n  Whether to omit the properties of the table from the\
        \ response or not.\n:param omit_username: bool (optional)\n  Whether to omit\
        \ the username of the table (e.g. owner, updated_by, created_by) from the\
        \ response or\n  not.\n:param page_token: str (optional)\n  Opaque token to\
        \ send for the next page of results (pagination).\n\n:returns: Iterator over\
        \ :class:`TableInfo`"
      tags:
      - catalog
      parameters:
      - name: catalog_name
        description: str Name of parent catalog for tables of interest.
        required: true
        schema:
          type: string
        in: query
      - name: schema_name
        description: str Parent schema of tables.
        required: true
        schema:
          type: string
        in: query
      - name: include_browse
        description: bool (optional) Whether to include tables in the response for
          which the principal can only access selective metadata for.
        required: false
        schema:
          type: boolean
        in: query
      - name: include_manifest_capabilities
        description: bool (optional) Whether to include a manifest containing table
          capabilities in the response.
        required: false
        schema:
          type: boolean
        in: query
      - name: max_results
        description: int (optional) Maximum number of tables to return. If not set,
          all the tables are returned (not recommended). - when set to a value greater
          than 0, the page length is the minimum of this value and a server configured
          value; - when set to 0, the page length is set to a server configured value
          (recommended); - when set to a value less than 0, an invalid parameter error
          is returned;
        required: false
        schema:
          type: integer
        in: query
      - name: omit_columns
        description: bool (optional) Whether to omit the columns of the table from
          the response or not.
        required: false
        schema:
          type: boolean
        in: query
      - name: omit_properties
        description: bool (optional) Whether to omit the properties of the table from
          the response or not.
        required: false
        schema:
          type: boolean
        in: query
      - name: omit_username
        description: bool (optional) Whether to omit the username of the table (e.g.
          owner, updated_by, created_by) from the response or not.
        required: false
        schema:
          type: boolean
        in: query
      - name: page_token
        description: str (optional) Opaque token to send for the next page of results
          (pagination).
        required: false
        schema:
          type: string
        in: query
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TableInfo'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not found
        '500':
          description: Internal server error
  /api/2.1/unity-catalog/tables/{full_name}:
    delete:
      operationId: delete
      summary: 'Deletes a table from the specified parent catalog and schema. The
        caller must be the owner of the

        parent catalog, have the **USE_CATALOG** privilege on the parent catalog and
        be the owner of the

        parent schema, or be the owner of the table and have the **USE_CATALOG** privilege
        on the parent

        catalog and the **USE_SCHEMA** privilege on the parent schema.'
      description: "Deletes a table from the specified parent catalog and schema.\
        \ The caller must be the owner of the\nparent catalog, have the **USE_CATALOG**\
        \ privilege on the parent catalog and be the owner of the\nparent schema,\
        \ or be the owner of the table and have the **USE_CATALOG** privilege on the\
        \ parent\ncatalog and the **USE_SCHEMA** privilege on the parent schema.\n\
        \n:param full_name: str\n  Full name of the table."
      tags:
      - catalog
      parameters:
      - name: full_name
        description: str Full name of the table.
        required: true
        schema:
          type: string
        in: path
      responses:
        '200':
          description: Success
    get:
      operationId: get
      summary: 'Gets a table from the metastore for a specific catalog and schema.
        The caller must satisfy one of the

        following requirements: * Be a metastore admin * Be the owner of the parent
        catalog * Be the owner of

        the parent schema and have the **USE_CATALOG** privilege on the parent catalog
        * Have the

        **USE_CATALOG** privilege on the parent catalog and the **USE_SCHEMA** privilege
        on the parent schema,

        and either be the table owner or have the **SELECT** privilege on the table.'
      description: "Gets a table from the metastore for a specific catalog and schema.\
        \ The caller must satisfy one of the\nfollowing requirements: * Be a metastore\
        \ admin * Be the owner of the parent catalog * Be the owner of\nthe parent\
        \ schema and have the **USE_CATALOG** privilege on the parent catalog * Have\
        \ the\n**USE_CATALOG** privilege on the parent catalog and the **USE_SCHEMA**\
        \ privilege on the parent schema,\nand either be the table owner or have the\
        \ **SELECT** privilege on the table.\n\n:param full_name: str\n  Full name\
        \ of the table.\n:param include_browse: bool (optional)\n  Whether to include\
        \ tables in the response for which the principal can only access selective\
        \ metadata\n  for.\n:param include_delta_metadata: bool (optional)\n  Whether\
        \ delta metadata should be included in the response.\n:param include_manifest_capabilities:\
        \ bool (optional)\n  Whether to include a manifest containing table capabilities\
        \ in the response.\n\n:returns: :class:`TableInfo`"
      tags:
      - catalog
      parameters:
      - name: full_name
        description: str Full name of the table.
        required: true
        schema:
          type: string
        in: path
      - name: include_browse
        description: bool (optional) Whether to include tables in the response for
          which the principal can only access selective metadata for.
        required: false
        schema:
          type: boolean
        in: query
      - name: include_delta_metadata
        description: bool (optional) Whether delta metadata should be included in
          the response.
        required: false
        schema:
          type: boolean
        in: query
      - name: include_manifest_capabilities
        description: bool (optional) Whether to include a manifest containing table
          capabilities in the response.
        required: false
        schema:
          type: boolean
        in: query
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TableInfo'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not found
        '500':
          description: Internal server error
    patch:
      operationId: update
      summary: 'Change the owner of the table. The caller must be the owner of the
        parent catalog, have the

        **USE_CATALOG** privilege on the parent catalog and be the owner of the parent
        schema, or be the owner

        of the table and have the **USE_CATALOG** privilege on the parent catalog
        and the **USE_SCHEMA**

        privilege on the parent schema.'
      description: "Change the owner of the table. The caller must be the owner of\
        \ the parent catalog, have the\n**USE_CATALOG** privilege on the parent catalog\
        \ and be the owner of the parent schema, or be the owner\nof the table and\
        \ have the **USE_CATALOG** privilege on the parent catalog and the **USE_SCHEMA**\n\
        privilege on the parent schema.\n\n:param full_name: str\n  Full name of the\
        \ table.\n:param owner: str (optional)\n  Username of current owner of table."
      tags:
      - catalog
      parameters:
      - name: full_name
        description: str Full name of the table.
        required: true
        schema:
          type: string
        in: path
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                owner:
                  type: string
                  description: str (optional) Username of current owner of table.
      responses:
        '200':
          description: Success
  /api/2.1/unity-catalog/tables/{full_name}/exists:
    get:
      operationId: exists
      summary: 'Gets if a table exists in the metastore for a specific catalog and
        schema. The caller must satisfy one

        of the following requirements: * Be a metastore admin * Be the owner of the
        parent catalog * Be the

        owner of the parent schema and have the **USE_CATALOG** privilege on the parent
        catalog * Have the

        **USE_CATALOG** privilege on the parent catalog and the **USE_SCHEMA** privilege
        on the parent schema,

        and either be the table owner or have the **SELECT** privilege on the table.
        * Have **BROWSE**

        privilege on the parent catalog * Have **BROWSE** privilege on the parent
        schema'
      description: "Gets if a table exists in the metastore for a specific catalog\
        \ and schema. The caller must satisfy one\nof the following requirements:\
        \ * Be a metastore admin * Be the owner of the parent catalog * Be the\nowner\
        \ of the parent schema and have the **USE_CATALOG** privilege on the parent\
        \ catalog * Have the\n**USE_CATALOG** privilege on the parent catalog and\
        \ the **USE_SCHEMA** privilege on the parent schema,\nand either be the table\
        \ owner or have the **SELECT** privilege on the table. * Have **BROWSE**\n\
        privilege on the parent catalog * Have **BROWSE** privilege on the parent\
        \ schema\n\n:param full_name: str\n  Full name of the table.\n\n:returns:\
        \ :class:`TableExistsResponse`"
      tags:
      - catalog
      parameters:
      - name: full_name
        description: str Full name of the table.
        required: true
        schema:
          type: string
        in: path
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TableExistsResponse'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not found
        '500':
          description: Internal server error
  /api/2.1/unity-catalog/table-summaries:
    get:
      operationId: list_summaries
      summary: 'Gets an array of summaries for tables for a schema and catalog within
        the metastore. The table

        summaries returned are either:'
      description: "Gets an array of summaries for tables for a schema and catalog\
        \ within the metastore. The table\nsummaries returned are either:\n\n* summaries\
        \ for tables (within the current metastore and parent catalog and schema),\
        \ when the user is\na metastore admin, or: * summaries for tables and schemas\
        \ (within the current metastore and parent\ncatalog) for which the user has\
        \ ownership or the **SELECT** privilege on the table and ownership or\n**USE_SCHEMA**\
        \ privilege on the schema, provided that the user also has ownership or the\n\
        **USE_CATALOG** privilege on the parent catalog.\n\nThere is no guarantee\
        \ of a specific ordering of the elements in the array.\n\n:param catalog_name:\
        \ str\n  Name of parent catalog for tables of interest.\n:param include_manifest_capabilities:\
        \ bool (optional)\n  Whether to include a manifest containing table capabilities\
        \ in the response.\n:param max_results: int (optional)\n  Maximum number of\
        \ summaries for tables to return. If not set, the page length is set to a\
        \ server\n  configured value (10000, as of 1/5/2024). - when set to a value\
        \ greater than 0, the page length is\n  the minimum of this value and a server\
        \ configured value (10000, as of 1/5/2024); - when set to 0,\n  the page length\
        \ is set to a server configured value (10000, as of 1/5/2024) (recommended);\
        \ - when\n  set to a value less than 0, an invalid parameter error is returned;\n\
        :param page_token: str (optional)\n  Opaque pagination token to go to next\
        \ page based on previous query.\n:param schema_name_pattern: str (optional)\n\
        \  A sql LIKE pattern (% and _) for schema names. All schemas will be returned\
        \ if not set or empty.\n:param table_name_pattern: str (optional)\n  A sql\
        \ LIKE pattern (% and _) for table names. All tables will be returned if not\
        \ set or empty.\n\n:returns: Iterator over :class:`TableSummary`"
      tags:
      - catalog
      parameters:
      - name: catalog_name
        description: str Name of parent catalog for tables of interest.
        required: true
        schema:
          type: string
        in: query
      - name: include_manifest_capabilities
        description: bool (optional) Whether to include a manifest containing table
          capabilities in the response.
        required: false
        schema:
          type: boolean
        in: query
      - name: max_results
        description: int (optional) Maximum number of summaries for tables to return.
          If not set, the page length is set to a server configured value (10000,
          as of 1/5/2024). - when set to a value greater than 0, the page length is
          the minimum of this value and a server configured value (10000, as of 1/5/2024);
          - when set to 0, the page length is set to a server configured value (10000,
          as of 1/5/2024) (recommended); - when set to a value less than 0, an invalid
          parameter error is returned;
        required: false
        schema:
          type: integer
        in: query
      - name: page_token
        description: str (optional) Opaque pagination token to go to next page based
          on previous query.
        required: false
        schema:
          type: string
        in: query
      - name: schema_name_pattern
        description: str (optional) A sql LIKE pattern (% and _) for schema names.
          All schemas will be returned if not set or empty.
        required: false
        schema:
          type: string
        in: query
      - name: table_name_pattern
        description: str (optional) A sql LIKE pattern (% and _) for table names.
          All tables will be returned if not set or empty.
        required: false
        schema:
          type: string
        in: query
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TableSummary'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not found
        '500':
          description: Internal server error
  /api/2.0/unity-catalog/temporary-path-credentials:
    post:
      operationId: generate_temporary_path_credentials
      summary: 'Get a short-lived credential for directly accessing cloud storage
        locations registered in Databricks.

        The Generate Temporary Path Credentials API is only supported for external
        storage paths, specifically

        external locations and external tables. Managed tables are not supported by
        this API. The metastore

        must have **external_access_enabled** flag set to true (default false). The
        caller must have the

        **EXTERNAL_USE_LOCATION** privilege on the external location; this privilege
        can only be granted by

        external location owners. For requests on existing external tables, the caller
        must also have the

        **EXTERNAL_USE_SCHEMA** privilege on the parent schema; this privilege can
        only be granted by catalog

        owners.'
      description: "Get a short-lived credential for directly accessing cloud storage\
        \ locations registered in Databricks.\nThe Generate Temporary Path Credentials\
        \ API is only supported for external storage paths, specifically\nexternal\
        \ locations and external tables. Managed tables are not supported by this\
        \ API. The metastore\nmust have **external_access_enabled** flag set to true\
        \ (default false). The caller must have the\n**EXTERNAL_USE_LOCATION** privilege\
        \ on the external location; this privilege can only be granted by\nexternal\
        \ location owners. For requests on existing external tables, the caller must\
        \ also have the\n**EXTERNAL_USE_SCHEMA** privilege on the parent schema; this\
        \ privilege can only be granted by catalog\nowners.\n\n:param url: str\n \
        \ URL for path-based access.\n:param operation: :class:`PathOperation`\n \
        \ The operation being performed on the path.\n:param dry_run: bool (optional)\n\
        \  Optional. When set to true, the service will not validate that the generated\
        \ credentials can perform\n  write operations, therefore no new paths will\
        \ be created and the response will not contain valid\n  credentials. Defaults\
        \ to false.\n\n:returns: :class:`GenerateTemporaryPathCredentialResponse`"
      tags:
      - catalog
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                url:
                  type: string
                  description: str URL for path-based access.
                operation:
                  type: string
                  enum:
                  - PATH_CREATE_TABLE
                  - PATH_READ
                  - PATH_READ_WRITE
                  description: :class:`PathOperation` The operation being performed
                    on the path.
                dry_run:
                  type: boolean
                  description: bool (optional) Optional. When set to true, the service
                    will not validate that the generated credentials can perform write
                    operations, therefore no new paths will be created and the response
                    will not contain valid credentials. Defaults to false.
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenerateTemporaryPathCredentialResponse'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not found
        '500':
          description: Internal server error
  /api/2.0/unity-catalog/temporary-table-credentials:
    post:
      operationId: generate_temporary_table_credentials
      summary: 'Get a short-lived credential for directly accessing the table data
        on cloud storage. The metastore

        must have **external_access_enabled** flag set to true (default false). The
        caller must have the

        **EXTERNAL_USE_SCHEMA** privilege on the parent schema and this privilege
        can only be granted by

        catalog owners.'
      description: "Get a short-lived credential for directly accessing the table\
        \ data on cloud storage. The metastore\nmust have **external_access_enabled**\
        \ flag set to true (default false). The caller must have the\n**EXTERNAL_USE_SCHEMA**\
        \ privilege on the parent schema and this privilege can only be granted by\n\
        catalog owners.\n\n:param operation: :class:`TableOperation` (optional)\n\
        \  The operation performed against the table data, either READ or READ_WRITE.\
        \ If READ_WRITE is\n  specified, the credentials returned will have write\
        \ permissions, otherwise, it will be read only.\n:param table_id: str (optional)\n\
        \  UUID of the table to read or write.\n\n:returns: :class:`GenerateTemporaryTableCredentialResponse`"
      tags:
      - catalog
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                operation:
                  type: string
                  enum:
                  - READ
                  - READ_WRITE
                  description: :class:`TableOperation` (optional) The operation performed
                    against the table data, either READ or READ_WRITE. If READ_WRITE
                    is specified, the credentials returned will have write permissions,
                    otherwise, it will be read only.
                table_id:
                  type: string
                  description: str (optional) UUID of the table to read or write.
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenerateTemporaryTableCredentialResponse'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not found
        '500':
          description: Internal server error
  /api/2.1/unity-catalog/volumes:
    post:
      operationId: create
      summary: Creates a new volume.
      description: "Creates a new volume.\n\nThe user could create either an external\
        \ volume or a managed volume. An external volume will be\ncreated in the specified\
        \ external location, while a managed volume will be located in the default\n\
        location which is specified by the parent schema, or the parent catalog, or\
        \ the Metastore.\n\nFor the volume creation to succeed, the user must satisfy\
        \ following conditions: - The caller must be a\nmetastore admin, or be the\
        \ owner of the parent catalog and schema, or have the **USE_CATALOG**\nprivilege\
        \ on the parent catalog and the **USE_SCHEMA** privilege on the parent schema.\
        \ - The caller\nmust have **CREATE VOLUME** privilege on the parent schema.\n\
        \nFor an external volume, following conditions also need to satisfy - The\
        \ caller must have **CREATE\nEXTERNAL VOLUME** privilege on the external location.\
        \ - There are no other tables, nor volumes\nexisting in the specified storage\
        \ location. - The specified storage location is not under the location\nof\
        \ other tables, nor volumes, or catalogs or schemas.\n\n:param catalog_name:\
        \ str\n  The name of the catalog where the schema and the volume are\n:param\
        \ schema_name: str\n  The name of the schema where the volume is\n:param name:\
        \ str\n  The name of the volume\n:param volume_type: :class:`VolumeType`\n\
        \  The type of the volume. An external volume is located in the specified\
        \ external location. A managed\n  volume is located in the default location\
        \ which is specified by the parent schema, or the parent\n  catalog, or the\
        \ Metastore. [Learn more]\n\n  [Learn more]: https://docs.databricks.com/aws/en/volumes/managed-vs-external\n\
        :param comment: str (optional)\n  The comment attached to the volume\n:param\
        \ storage_location: str (optional)\n  The storage location on the cloud\n\n\
        :returns: :class:`VolumeInfo`"
      tags:
      - catalog
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                catalog_name:
                  type: string
                  description: str The name of the catalog where the schema and the
                    volume are
                schema_name:
                  type: string
                  description: str The name of the schema where the volume is
                name:
                  type: string
                  description: str The name of the volume
                volume_type:
                  type: string
                  enum:
                  - EXTERNAL
                  - MANAGED
                  description: ':class:`VolumeType` The type of the volume. An external
                    volume is located in the specified external location. A managed
                    volume is located in the default location which is specified by
                    the parent schema, or the parent catalog, or the Metastore. [Learn
                    more] [Learn more]: https://docs.databricks.com/aws/en/volumes/managed-vs-external'
                comment:
                  type: string
                  description: str (optional) The comment attached to the volume
                storage_location:
                  type: string
                  description: str (optional) The storage location on the cloud
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VolumeInfo'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not found
        '500':
          description: Internal server error
    get:
      operationId: list
      summary: Gets an array of volumes for the current metastore under the parent
        catalog and schema.
      description: "Gets an array of volumes for the current metastore under the parent\
        \ catalog and schema.\n\nThe returned volumes are filtered based on the privileges\
        \ of the calling user. For example, the\nmetastore admin is able to list all\
        \ the volumes. A regular user needs to be the owner or have the\n**READ VOLUME**\
        \ privilege on the volume to receive the volumes in the response. For the\
        \ latter case,\nthe caller must also be the owner or have the **USE_CATALOG**\
        \ privilege on the parent catalog and the\n**USE_SCHEMA** privilege on the\
        \ parent schema.\n\nThere is no guarantee of a specific ordering of the elements\
        \ in the array.\n\n:param catalog_name: str\n  The identifier of the catalog\n\
        :param schema_name: str\n  The identifier of the schema\n:param include_browse:\
        \ bool (optional)\n  Whether to include volumes in the response for which\
        \ the principal can only access selective\n  metadata for\n:param max_results:\
        \ int (optional)\n  Maximum number of volumes to return (page length).\n\n\
        \  If not set, the page length is set to a server configured value (10000,\
        \ as of 1/29/2024). - when set\n  to a value greater than 0, the page length\
        \ is the minimum of this value and a server configured\n  value (10000, as\
        \ of 1/29/2024); - when set to 0, the page length is set to a server configured\
        \ value\n  (10000, as of 1/29/2024) (recommended); - when set to a value less\
        \ than 0, an invalid parameter\n  error is returned;\n\n  Note: this parameter\
        \ controls only the maximum number of volumes to return. The actual number\
        \ of\n  volumes returned in a page may be smaller than this value, including\
        \ 0, even if there are more\n  pages.\n:param page_token: str (optional)\n\
        \  Opaque token returned by a previous request. It must be included in the\
        \ request to retrieve the next\n  page of results (pagination).\n\n:returns:\
        \ Iterator over :class:`VolumeInfo`"
      tags:
      - catalog
      parameters:
      - name: catalog_name
        description: str The identifier of the catalog
        required: true
        schema:
          type: string
        in: query
      - name: schema_name
        description: str The identifier of the schema
        required: true
        schema:
          type: string
        in: query
      - name: include_browse
        description: bool (optional) Whether to include volumes in the response for
          which the principal can only access selective metadata for
        required: false
        schema:
          type: boolean
        in: query
      - name: max_results
        description: 'int (optional) Maximum number of volumes to return (page length).
          If not set, the page length is set to a server configured value (10000,
          as of 1/29/2024). - when set to a value greater than 0, the page length
          is the minimum of this value and a server configured value (10000, as of
          1/29/2024); - when set to 0, the page length is set to a server configured
          value (10000, as of 1/29/2024) (recommended); - when set to a value less
          than 0, an invalid parameter error is returned; Note: this parameter controls
          only the maximum number of volumes to return. The actual number of volumes
          returned in a page may be smaller than this value, including 0, even if
          there are more pages.'
        required: false
        schema:
          type: integer
        in: query
      - name: page_token
        description: str (optional) Opaque token returned by a previous request. It
          must be included in the request to retrieve the next page of results (pagination).
        required: false
        schema:
          type: string
        in: query
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VolumeInfo'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not found
        '500':
          description: Internal server error
  /api/2.1/unity-catalog/volumes/{name}:
    delete:
      operationId: delete
      summary: Deletes a volume from the specified parent catalog and schema.
      description: "Deletes a volume from the specified parent catalog and schema.\n\
        \nThe caller must be a metastore admin or an owner of the volume. For the\
        \ latter case, the caller must\nalso be the owner or have the **USE_CATALOG**\
        \ privilege on the parent catalog and the **USE_SCHEMA**\nprivilege on the\
        \ parent schema.\n\n:param name: str\n  The three-level (fully qualified)\
        \ name of the volume"
      tags:
      - catalog
      parameters:
      - name: name
        description: str The three-level (fully qualified) name of the volume
        required: true
        schema:
          type: string
        in: path
      responses:
        '200':
          description: Success
    get:
      operationId: read
      summary: Gets a volume from the metastore for a specific catalog and schema.
      description: "Gets a volume from the metastore for a specific catalog and schema.\n\
        \nThe caller must be a metastore admin or an owner of (or have the **READ\
        \ VOLUME** privilege on) the\nvolume. For the latter case, the caller must\
        \ also be the owner or have the **USE_CATALOG** privilege\non the parent catalog\
        \ and the **USE_SCHEMA** privilege on the parent schema.\n\n:param name: str\n\
        \  The three-level (fully qualified) name of the volume\n:param include_browse:\
        \ bool (optional)\n  Whether to include volumes in the response for which\
        \ the principal can only access selective\n  metadata for\n\n:returns: :class:`VolumeInfo`"
      tags:
      - catalog
      parameters:
      - name: name
        description: str The three-level (fully qualified) name of the volume
        required: true
        schema:
          type: string
        in: path
      - name: include_browse
        description: bool (optional) Whether to include volumes in the response for
          which the principal can only access selective metadata for
        required: false
        schema:
          type: boolean
        in: query
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VolumeInfo'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not found
        '500':
          description: Internal server error
    patch:
      operationId: update
      summary: Updates the specified volume under the specified parent catalog and
        schema.
      description: "Updates the specified volume under the specified parent catalog\
        \ and schema.\n\nThe caller must be a metastore admin or an owner of the volume.\
        \ For the latter case, the caller must\nalso be the owner or have the **USE_CATALOG**\
        \ privilege on the parent catalog and the **USE_SCHEMA**\nprivilege on the\
        \ parent schema.\n\nCurrently only the name, the owner or the comment of the\
        \ volume could be updated.\n\n:param name: str\n  The three-level (fully qualified)\
        \ name of the volume\n:param comment: str (optional)\n  The comment attached\
        \ to the volume\n:param new_name: str (optional)\n  New name for the volume.\n\
        :param owner: str (optional)\n  The identifier of the user who owns the volume\n\
        \n:returns: :class:`VolumeInfo`"
      tags:
      - catalog
      parameters:
      - name: name
        description: str The three-level (fully qualified) name of the volume
        required: true
        schema:
          type: string
        in: path
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                comment:
                  type: string
                  description: str (optional) The comment attached to the volume
                new_name:
                  type: string
                  description: str (optional) New name for the volume.
                owner:
                  type: string
                  description: str (optional) The identifier of the user who owns
                    the volume
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VolumeInfo'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not found
        '500':
          description: Internal server error
  /api/2.1/unity-catalog/workspace-bindings/catalogs/{name}:
    get:
      operationId: get
      summary: 'Gets workspace bindings of the catalog. The caller must be a metastore
        admin or an owner of the

        catalog.'
      description: "Gets workspace bindings of the catalog. The caller must be a metastore\
        \ admin or an owner of the\ncatalog.\n\n:param name: str\n  The name of the\
        \ catalog.\n\n:returns: :class:`GetCatalogWorkspaceBindingsResponse`"
      tags:
      - catalog
      parameters:
      - name: name
        description: str The name of the catalog.
        required: true
        schema:
          type: string
        in: path
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCatalogWorkspaceBindingsResponse'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not found
        '500':
          description: Internal server error
components:
  schemas:
    AccessRequestDestinations:
      type: object
      description: 'AccessRequestDestinations(destinations: ''List[NotificationDestination]'',
        securable: ''Securable'', are_any_destinations_hidden: ''Optional[bool]''
        = None)'
      properties:
        destinations:
          type: string
          description: 'The access request destinations for the securable.  securable:
            Securable The securable for which the access request destinations are
            being retrieved.'
        securable:
          type: string
          description: 'The securable for which the access request destinations are
            being retrieved.  are_any_destinations_hidden: Optional[bool] = None """Indicates
            whether any destinations are hidden from the caller due to a lack of permissions.
            This value is true if the caller does not have permission to see all destinations.'
        are_any_destinations_hidden:
          type: string
          description: Indicates whether any destinations are hidden from the caller
            due to a lack of permissions. This value is true if the caller does not
            have permission to see all destinations.
    AccountsCreateMetastoreAssignmentResponse:
      type: object
      description: The metastore assignment was successfully created.
      properties: {}
    AccountsCreateMetastoreResponse:
      type: object
      description: 'AccountsCreateMetastoreResponse(metastore_info: ''Optional[MetastoreInfo]''
        = None)'
      properties:
        metastore_info:
          type: string
          description: ''
    AccountsCreateStorageCredentialInfo:
      type: object
      description: 'AccountsCreateStorageCredentialInfo(credential_info: ''Optional[StorageCredentialInfo]''
        = None)'
      properties:
        credential_info:
          type: string
          description: ''
    AccountsDeleteMetastoreAssignmentResponse:
      type: object
      description: The metastore assignment was successfully deleted.
      properties: {}
    AccountsDeleteMetastoreResponse:
      type: object
      description: The metastore was successfully deleted.
      properties: {}
    AccountsDeleteStorageCredentialResponse:
      type: object
      description: The storage credential was successfully deleted.
      properties: {}
    AccountsGetMetastoreResponse:
      type: object
      description: The metastore was successfully returned.
      properties:
        metastore_info:
          type: string
          description: ''
    AccountsListMetastoresResponse:
      type: object
      description: Metastores were returned successfully.
      properties:
        metastores:
          type: string
          description: 'An array of metastore information objects.  def as_dict(self)
            -> dict: Serializes the AccountsListMetastoresResponse into a dictionary
            suitable for use as a JSON request body.'
    AccountsMetastoreAssignment:
      type: object
      description: The workspace metastore assignment was successfully returned.
      properties:
        metastore_assignment:
          type: string
          description: ''
    AccountsStorageCredentialInfo:
      type: object
      description: The storage credential was successfully retrieved.
      properties:
        credential_info:
          type: string
          description: ''
    AccountsUpdateMetastoreAssignmentResponse:
      type: object
      description: The metastore assignment was successfully updated.
      properties: {}
    AccountsUpdateMetastoreResponse:
      type: object
      description: The metastore update request succeeded.
      properties:
        metastore_info:
          type: string
          description: ''
    AccountsUpdateStorageCredentialResponse:
      type: object
      description: The storage credential was successfully updated.
      properties:
        credential_info:
          type: string
          description: ''
    ArtifactAllowlistInfo:
      type: object
      description: 'ArtifactAllowlistInfo(artifact_matchers: ''Optional[List[ArtifactMatcher]]''
        = None, created_at: ''Optional[int]'' = None, created_by: ''Optional[str]''
        = None, metastore_id: ''Optional[str]'' = None)'
      properties:
        artifact_matchers:
          type: string
          description: 'A list of allowed artifact match patterns.  created_at: Optional[int]
            = None Time at which this artifact allowlist was set, in epoch milliseconds.'
        created_at:
          type: string
          description: 'Time at which this artifact allowlist was set, in epoch milliseconds.  created_by:
            Optional[str] = None Username of the user who set the artifact allowlist.'
        created_by:
          type: string
          description: 'Username of the user who set the artifact allowlist.  metastore_id:
            Optional[str] = None Unique identifier of parent metastore.'
        metastore_id:
          type: string
          description: 'Unique identifier of parent metastore.  def as_dict(self)
            -> dict: Serializes the ArtifactAllowlistInfo into a dictionary suitable
            for use as a JSON request body.'
    ArtifactMatcher:
      type: object
      description: 'ArtifactMatcher(artifact: ''str'', match_type: ''MatchType'')'
      properties:
        artifact:
          type: string
          description: 'The artifact path or maven coordinate  match_type: MatchType
            The pattern matching type of the artifact'
        match_type:
          type: string
          description: 'The pattern matching type of the artifact  def as_dict(self)
            -> dict: Serializes the ArtifactMatcher into a dictionary suitable for
            use as a JSON request body.'
    ArtifactType:
      type: string
      description: The artifact type
      enum:
      - INIT_SCRIPT
      - LIBRARY_JAR
      - LIBRARY_MAVEN
    AssignResponse:
      type: object
      description: AssignResponse()
      properties: {}
    AwsCredentials:
      type: object
      description: 'AWS temporary credentials for API authentication. Read more at

        https://docs.aws.amazon.com/STS/latest/APIReference/API_Credentials.html.'
      properties:
        access_key_id:
          type: string
          description: 'The access key ID that identifies the temporary credentials.  access_point:
            Optional[str] = None """The Amazon Resource Name (ARN) of the S3 access
            point for temporary credentials related the external location.'
        access_point:
          type: string
          description: The Amazon Resource Name (ARN) of the S3 access point for temporary
            credentials related the external location.
        secret_access_key:
          type: string
          description: 'The secret access key that can be used to sign AWS API requests.  session_token:
            Optional[str] = None The token that users must pass to AWS API to use
            the temporary credentials.'
        session_token:
          type: string
          description: 'The token that users must pass to AWS API to use the temporary
            credentials.  def as_dict(self) -> dict: Serializes the AwsCredentials
            into a dictionary suitable for use as a JSON request body.'
    AwsIamRole:
      type: object
      description: The AWS IAM role configuration
      properties:
        external_id:
          type: string
          description: 'The external ID used in role assumption to prevent the confused
            deputy problem.  role_arn: Optional[str] = None The Amazon Resource Name
            (ARN) of the AWS IAM role used to vend temporary credentials.'
        role_arn:
          type: string
          description: 'The Amazon Resource Name (ARN) of the AWS IAM role used to
            vend temporary credentials.  unity_catalog_iam_arn: Optional[str] = None
            """The Amazon Resource Name (ARN) of the AWS IAM user managed by Databricks.
            This is the identity that is going to assume the AWS IAM role.'
        unity_catalog_iam_arn:
          type: string
          description: The Amazon Resource Name (ARN) of the AWS IAM user managed
            by Databricks. This is the identity that is going to assume the AWS IAM
            role.
    AwsIamRoleRequest:
      type: object
      description: The AWS IAM role configuration
      properties:
        role_arn:
          type: string
          description: 'The Amazon Resource Name (ARN) of the AWS IAM role used to
            vend temporary credentials.  def as_dict(self) -> dict: Serializes the
            AwsIamRoleRequest into a dictionary suitable for use as a JSON request
            body.'
    AwsIamRoleResponse:
      type: object
      description: The AWS IAM role configuration
      properties:
        role_arn:
          type: string
          description: 'The Amazon Resource Name (ARN) of the AWS IAM role used to
            vend temporary credentials.  external_id: Optional[str] = None The external
            ID used in role assumption to prevent the confused deputy problem.'
        external_id:
          type: string
          description: 'The external ID used in role assumption to prevent the confused
            deputy problem.  unity_catalog_iam_arn: Optional[str] = None """The Amazon
            Resource Name (ARN) of the AWS IAM user managed by Databricks. This is
            the identity that is going to assume the AWS IAM role.'
        unity_catalog_iam_arn:
          type: string
          description: The Amazon Resource Name (ARN) of the AWS IAM user managed
            by Databricks. This is the identity that is going to assume the AWS IAM
            role.
    AwsSqsQueue:
      type: object
      description: 'AwsSqsQueue(managed_resource_id: ''Optional[str]'' = None, queue_url:
        ''Optional[str]'' = None)'
      properties:
        managed_resource_id:
          type: string
          description: 'Unique identifier included in the name of file events managed
            cloud resources.  queue_url: Optional[str] = None """The AQS queue url
            in the format https://sqs.{region}.amazonaws.com/{account id}/{queue name}
            Required for provided_sqs.'
        queue_url:
          type: string
          description: The AQS queue url in the format https://sqs.{region}.amazonaws.com/{account
            id}/{queue name} Required for provided_sqs.
    AzureActiveDirectoryToken:
      type: object
      description: 'Azure Active Directory token, essentially the Oauth token for
        Azure Service Principal or Managed

        Identity. Read more at

        https://learn.microsoft.com/en-us/azure/databricks/dev-tools/api/latest/aad/service-prin-aad-token'
      properties:
        aad_token:
          type: string
          description: Opaque token that contains claims that you can use in Azure
            Active Directory to access cloud services.
    AzureManagedIdentity:
      type: object
      description: The Azure managed identity configuration.
      properties:
        access_connector_id:
          type: string
          description: The Azure resource ID of the Azure Databricks Access Connector.
            Use the format `/subscriptions/{guid}/resourceGroups/{rg-name}/providers/Microsoft.Databricks/accessConnectors/{connector-name}`.
        credential_id:
          type: string
          description: 'The Databricks internal ID that represents this managed identity.  managed_identity_id:
            Optional[str] = None """The Azure resource ID of the managed identity.
            Use the format, `/subscriptions/{guid}/resourceGroups/{rg-name}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identity-name}`
            This is only available for user-assgined identities. For system-assigned
            identities, the access_connector_id is used to identify the identity.
            If this field is not provided, then we assume the AzureManagedIdentity
            is using the system-assigned identity.'
        managed_identity_id:
          type: string
          description: The Azure resource ID of the managed identity. Use the format,
            `/subscriptions/{guid}/resourceGroups/{rg-name}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identity-name}`
            This is only available for user-assgined identities. For system-assigned
            identities, the access_connector_id is used to identify the identity.
            If this field is not provided, then we assume the AzureManagedIdentity
            is using the system-assigned identity.
    AzureManagedIdentityRequest:
      type: object
      description: The Azure managed identity configuration.
      properties:
        access_connector_id:
          type: string
          description: The Azure resource ID of the Azure Databricks Access Connector.
            Use the format `/subscriptions/{guid}/resourceGroups/{rg-name}/providers/Microsoft.Databricks/accessConnectors/{connector-name}`.
        managed_identity_id:
          type: string
          description: The Azure resource ID of the managed identity. Use the format,
            `/subscriptions/{guid}/resourceGroups/{rg-name}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identity-name}`
            This is only available for user-assgined identities. For system-assigned
            identities, the access_connector_id is used to identify the identity.
            If this field is not provided, then we assume the AzureManagedIdentity
            is using the system-assigned identity.
    AzureManagedIdentityResponse:
      type: object
      description: The Azure managed identity configuration.
      properties:
        access_connector_id:
          type: string
          description: The Azure resource ID of the Azure Databricks Access Connector.
            Use the format `/subscriptions/{guid}/resourceGroups/{rg-name}/providers/Microsoft.Databricks/accessConnectors/{connector-name}`.
        credential_id:
          type: string
          description: 'The Databricks internal ID that represents this managed identity.  managed_identity_id:
            Optional[str] = None """The Azure resource ID of the managed identity.
            Use the format, `/subscriptions/{guid}/resourceGroups/{rg-name}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identity-name}`
            This is only available for user-assgined identities. For system-assigned
            identities, the access_connector_id is used to identify the identity.
            If this field is not provided, then we assume the AzureManagedIdentity
            is using the system-assigned identity.'
        managed_identity_id:
          type: string
          description: The Azure resource ID of the managed identity. Use the format,
            `/subscriptions/{guid}/resourceGroups/{rg-name}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identity-name}`
            This is only available for user-assgined identities. For system-assigned
            identities, the access_connector_id is used to identify the identity.
            If this field is not provided, then we assume the AzureManagedIdentity
            is using the system-assigned identity.
    AzureQueueStorage:
      type: object
      description: 'AzureQueueStorage(managed_resource_id: ''Optional[str]'' = None,
        queue_url: ''Optional[str]'' = None, resource_group: ''Optional[str]'' = None,
        subscription_id: ''Optional[str]'' = None)'
      properties:
        managed_resource_id:
          type: string
          description: 'Unique identifier included in the name of file events managed
            cloud resources.  queue_url: Optional[str] = None """The AQS queue url
            in the format https://{storage account}.queue.core.windows.net/{queue
            name} Required for provided_aqs.'
        queue_url:
          type: string
          description: The AQS queue url in the format https://{storage account}.queue.core.windows.net/{queue
            name} Required for provided_aqs.
        resource_group:
          type: string
          description: The resource group for the queue, event grid subscription,
            and external location storage account. Only required for locations with
            a service principal storage credential
        subscription_id:
          type: string
          description: Optional subscription id for the queue, event grid subscription,
            and external location storage account. Required for locations with a service
            principal storage credential
    AzureServicePrincipal:
      type: object
      description: The Azure service principal configuration. Only applicable when
        purpose is **STORAGE**.
      properties:
        directory_id:
          type: string
          description: 'The directory ID corresponding to the Azure Active Directory
            (AAD) tenant of the application.  application_id: str The application
            ID of the application registration within the referenced AAD tenant.'
        application_id:
          type: string
          description: 'The application ID of the application registration within
            the referenced AAD tenant.  client_secret: str The client secret generated
            for the above app ID in AAD.'
        client_secret:
          type: string
          description: 'The client secret generated for the above app ID in AAD.  def
            as_dict(self) -> dict: Serializes the AzureServicePrincipal into a dictionary
            suitable for use as a JSON request body.'
    AzureUserDelegationSas:
      type: object
      description: 'Azure temporary credentials for API authentication. Read more
        at

        https://docs.microsoft.com/en-us/rest/api/storageservices/create-user-delegation-sas'
      properties:
        sas_token:
          type: string
          description: 'The signed URI (SAS Token) used to access blob services for
            a given path  def as_dict(self) -> dict: Serializes the AzureUserDelegationSas
            into a dictionary suitable for use as a JSON request body.'
    BatchCreateAccessRequestsResponse:
      type: object
      description: 'BatchCreateAccessRequestsResponse(responses: ''Optional[List[CreateAccessRequestResponse]]''
        = None)'
      properties:
        responses:
          type: string
          description: 'The access request destinations for each securable object
            the principal requested.  def as_dict(self) -> dict: Serializes the BatchCreateAccessRequestsResponse
            into a dictionary suitable for use as a JSON request body.'
    CancelRefreshResponse:
      type: object
      description: CancelRefreshResponse()
      properties: {}
    CatalogInfo:
      type: object
      description: 'CatalogInfo(browse_only: ''Optional[bool]'' = None, catalog_type:
        ''Optional[CatalogType]'' = None, comment: ''Optional[str]'' = None, connection_name:
        ''Optional[str]'' = None, created_at: ''Optional[int]'' = None, created_by:
        ''Optional[str]'' = None, effective_predictive_optimization_flag: ''Optional[EffectivePredictiveOptimizationFlag]''
        = None, enable_predictive_optimization: ''Optional[EnablePredictiveOptimization]''
        = None, full_name: ''Optional[str]'' = None, isolation_mode: ''Optional[CatalogIsolationMode]''
        = None, metastore_id: ''Optional[str]'' = None, name: ''Optional[str]'' =
        None, options: ''Optional[Dict[str, str]]'' = None, owner: ''Optional[str]''
        = None, properties: ''Optional[Dict[str, str]]'' = None, provider_name: ''Optional[str]''
        = None, provisioning_info: ''Optional[ProvisioningInfo]'' = None, securable_type:
        ''Optional[SecurableType]'' = None, share_name: ''Optional[str]'' = None,
        storage_location: ''Optional[str]'' = None, storage_root: ''Optional[str]''
        = None, updated_at: ''Optional[int]'' = None, updated_by: ''Optional[str]''
        = None)'
      properties:
        browse_only:
          type: string
          description: Indicates whether the principal is limited to retrieving metadata
            for the associated object through the BROWSE privilege when include_browse
            is enabled in the request.
        catalog_type:
          type: string
          description: ''
        comment:
          type: string
          description: 'User-provided free-form text description.  connection_name:
            Optional[str] = None The name of the connection to an external data source.'
        connection_name:
          type: string
          description: 'The name of the connection to an external data source.  created_at:
            Optional[int] = None Time at which this catalog was created, in epoch
            milliseconds.'
        created_at:
          type: string
          description: 'Time at which this catalog was created, in epoch milliseconds.  created_by:
            Optional[str] = None Username of catalog creator.'
        created_by:
          type: string
          description: 'Username of catalog creator.  effective_predictive_optimization_flag:
            Optional[EffectivePredictiveOptimizationFlag] = None  enable_predictive_optimization:
            Optional[EnablePredictiveOptimization] = None Whether predictive optimization
            should be enabled for this object and objects under it.'
        effective_predictive_optimization_flag:
          type: string
          description: ''
        enable_predictive_optimization:
          type: string
          description: 'Whether predictive optimization should be enabled for this
            object and objects under it.  full_name: Optional[str] = None The full
            name of the catalog. Corresponds with the name field.'
        full_name:
          type: string
          description: 'The full name of the catalog. Corresponds with the name field.  isolation_mode:
            Optional[CatalogIsolationMode] = None Whether the current securable is
            accessible from all workspaces or a specific set of workspaces.'
        isolation_mode:
          type: string
          description: 'Whether the current securable is accessible from all workspaces
            or a specific set of workspaces.  metastore_id: Optional[str] = None Unique
            identifier of parent metastore.'
        metastore_id:
          type: string
          description: 'Unique identifier of parent metastore.  name: Optional[str]
            = None Name of catalog.'
        name:
          type: string
          description: 'The name of the connection to an external data source.  created_at:
            Optional[int] = None Time at which this catalog was created, in epoch
            milliseconds.'
        options:
          type: string
          description: 'A map of key-value properties attached to the securable.  owner:
            Optional[str] = None Username of current owner of catalog.'
        owner:
          type: string
          description: 'Username of current owner of catalog.  properties: Optional[Dict[str,
            str]] = None A map of key-value properties attached to the securable.'
        properties:
          type: string
          description: 'A map of key-value properties attached to the securable.  provider_name:
            Optional[str] = None """The name of delta sharing provider.  A Delta Sharing
            catalog is a catalog that is based on a Delta share on a remote sharing
            server.'
        provider_name:
          type: string
          description: The name of delta sharing provider.  A Delta Sharing catalog
            is a catalog that is based on a Delta share on a remote sharing server.
        provisioning_info:
          type: string
          description: ''
        securable_type:
          type: string
          description: ''
        share_name:
          type: string
          description: 'The name of the share under the share provider.  storage_location:
            Optional[str] = None Storage Location URL (full path) for managed tables
            within catalog.'
        storage_location:
          type: string
          description: 'Storage Location URL (full path) for managed tables within
            catalog.  storage_root: Optional[str] = None Storage root URL for managed
            tables within catalog.'
        storage_root:
          type: string
          description: 'Storage root URL for managed tables within catalog.  updated_at:
            Optional[int] = None Time at which this catalog was last modified, in
            epoch milliseconds.'
        updated_at:
          type: string
          description: 'Time at which this catalog was last modified, in epoch milliseconds.  updated_by:
            Optional[str] = None Username of user who last modified catalog.'
        updated_by:
          type: string
          description: 'Username of user who last modified catalog.  def as_dict(self)
            -> dict: Serializes the CatalogInfo into a dictionary suitable for use
            as a JSON request body.'
    CatalogIsolationMode:
      type: string
      description: 'Create a collection of name/value pairs.


        Example enumeration:


        >>> class Color(Enum):

        ...     RED = 1

        ...     BLUE = 2

        ...     GREEN = 3


        Access them by:


        - attribute access::


        >>> Color.RED

        <Color.RED: 1>


        - value lookup:


        >>> Color(1)

        <Color.RED: 1>


        - name lookup:


        >>> Color[''RED'']

        <Color.RED: 1>


        Enumerations can be iterated over, and know how many members they have:


        >>> len(Color)

        3


        >>> list(Color)

        [<Color.RED: 1>, <Color.BLUE: 2>, <Color.GREEN: 3>]


        Methods can be added to enumerations, and members can have their own

        attributes -- see the documentation for details.'
      enum:
      - ISOLATED
      - OPEN
    CatalogType:
      type: string
      description: The type of the catalog.
      enum:
      - DELTASHARING_CATALOG
      - FOREIGN_CATALOG
      - INTERNAL_CATALOG
      - MANAGED_CATALOG
      - MANAGED_ONLINE_CATALOG
      - SYSTEM_CATALOG
    CloudflareApiToken:
      type: object
      description: 'The Cloudflare API token configuration. Read more at

        https://developers.cloudflare.com/r2/api/s3/tokens/'
      properties:
        access_key_id:
          type: string
          description: 'The access key ID associated with the API token.  secret_access_key:
            str The secret access token generated for the above access key ID.'
        secret_access_key:
          type: string
          description: 'The secret access token generated for the above access key
            ID.  account_id: str The ID of the account associated with the API token.'
        account_id:
          type: string
          description: 'The ID of the account associated with the API token.  def
            as_dict(self) -> dict: Serializes the CloudflareApiToken into a dictionary
            suitable for use as a JSON request body.'
    ColumnInfo:
      type: object
      description: 'ColumnInfo(comment: ''Optional[str]'' = None, mask: ''Optional[ColumnMask]''
        = None, name: ''Optional[str]'' = None, nullable: ''Optional[bool]'' = None,
        partition_index: ''Optional[int]'' = None, position: ''Optional[int]'' = None,
        type_interval_type: ''Optional[str]'' = None, type_json: ''Optional[str]''
        = None, type_name: ''Optional[ColumnTypeName]'' = None, type_precision: ''Optional[int]''
        = None, type_scale: ''Optional[int]'' = None, type_text: ''Optional[str]''
        = None)'
      properties:
        comment:
          type: string
          description: 'User-provided free-form text description.  mask: Optional[ColumnMask]
            = None  name: Optional[str] = None Name of Column.'
        mask:
          type: string
          description: ''
        name:
          type: string
          description: 'Name of Column.  nullable: Optional[bool] = None Whether field
            may be Null (default: true).'
        nullable:
          type: string
          description: 'Whether field may be Null (default: true).  partition_index:
            Optional[int] = None Partition index for column.'
        partition_index:
          type: string
          description: 'Partition index for column.  position: Optional[int] = None
            Ordinal position of column (starting at position 0).'
        position:
          type: string
          description: 'Ordinal position of column (starting at position 0).  type_interval_type:
            Optional[str] = None Format of IntervalType.'
        type_interval_type:
          type: string
          description: 'Format of IntervalType.  type_json: Optional[str] = None Full
            data type specification, JSON-serialized.'
        type_json:
          type: string
          description: 'Full data type specification, JSON-serialized.  type_name:
            Optional[ColumnTypeName] = None  type_precision: Optional[int] = None
            Digits of precision; required for DecimalTypes.'
        type_name:
          type: string
          description: ''
        type_precision:
          type: string
          description: 'Digits of precision; required for DecimalTypes.  type_scale:
            Optional[int] = None Digits to right of decimal; Required for DecimalTypes.'
        type_scale:
          type: string
          description: 'Digits to right of decimal; Required for DecimalTypes.  type_text:
            Optional[str] = None Full data type specification as SQL/catalogString
            text.'
        type_text:
          type: string
          description: 'Full data type specification as SQL/catalogString text.  def
            as_dict(self) -> dict: Serializes the ColumnInfo into a dictionary suitable
            for use as a JSON request body.'
    ColumnMask:
      type: object
      description: 'ColumnMask(function_name: ''Optional[str]'' = None, using_column_names:
        ''Optional[List[str]]'' = None)'
      properties:
        function_name:
          type: string
          description: 'The full name of the column mask SQL UDF.  using_column_names:
            Optional[List[str]] = None """The list of additional table columns to
            be passed as input to the column mask function. The first arg of the mask
            function should be of the type of the column being masked and the types
            of the rest of the args should match the types of columns in ''using_column_names''.'
        using_column_names:
          type: string
          description: The list of additional table columns to be passed as input
            to the column mask function. The first arg of the mask function should
            be of the type of the column being masked and the types of the rest of
            the args should match the types of columns in 'using_column_names'.
    ColumnMaskOptions:
      type: object
      description: 'ColumnMaskOptions(function_name: ''str'', on_column: ''str'',
        using: ''Optional[List[FunctionArgument]]'' = None)'
      properties:
        function_name:
          type: string
          description: The fully qualified name of the column mask function. The function
            is called on each row of the target table. The function's first argument
            and its return type should match the type of the masked column. Required
            on create and update.
        on_column:
          type: string
          description: The alias of the column to be masked. The alias must refer
            to one of matched columns. The values of the column is passed to the column
            mask function as the first argument. Required on create and update.
        using:
          type: string
          description: Optional list of column aliases or constant literals to be
            passed as additional arguments to the column mask function. The type of
            each column should match the positional argument of the column mask function.
    ColumnRelationship:
      type: object
      description: 'ColumnRelationship(source: ''Optional[str]'' = None, target: ''Optional[str]''
        = None)'
      properties:
        source:
          type: string
          description: ''
        target:
          type: string
          description: ''
    ColumnTypeName:
      type: string
      description: 'Create a collection of name/value pairs.


        Example enumeration:


        >>> class Color(Enum):

        ...     RED = 1

        ...     BLUE = 2

        ...     GREEN = 3


        Access them by:


        - attribute access::


        >>> Color.RED

        <Color.RED: 1>


        - value lookup:


        >>> Color(1)

        <Color.RED: 1>


        - name lookup:


        >>> Color[''RED'']

        <Color.RED: 1>


        Enumerations can be iterated over, and know how many members they have:


        >>> len(Color)

        3


        >>> list(Color)

        [<Color.RED: 1>, <Color.BLUE: 2>, <Color.GREEN: 3>]


        Methods can be added to enumerations, and members can have their own

        attributes -- see the documentation for details.'
      enum:
      - ARRAY
      - BINARY
      - BOOLEAN
      - BYTE
      - CHAR
      - DATE
      - DECIMAL
      - DOUBLE
      - FLOAT
      - GEOGRAPHY
      - GEOMETRY
      - INT
      - INTERVAL
      - LONG
      - MAP
      - 'NULL'
      - SHORT
      - STRING
      - STRUCT
      - TABLE_TYPE
      - TIMESTAMP
      - TIMESTAMP_NTZ
      - USER_DEFINED_TYPE
      - VARIANT
    ConnectionDependency:
      type: object
      description: A connection that is dependent on a SQL object.
      properties:
        connection_name:
          type: string
          description: 'Full name of the dependent connection, in the form of __connection_name__.  def
            as_dict(self) -> dict: Serializes the ConnectionDependency into a dictionary
            suitable for use as a JSON request body.'
    ConnectionInfo:
      type: object
      description: 'Next ID: 23'
      properties:
        comment:
          type: string
          description: 'User-provided free-form text description.  connection_id:
            Optional[str] = None Unique identifier of the Connection.'
        connection_id:
          type: string
          description: 'Unique identifier of the Connection.  connection_type: Optional[ConnectionType]
            = None The type of connection.'
        connection_type:
          type: string
          description: 'The type of connection.  created_at: Optional[int] = None
            Time at which this connection was created, in epoch milliseconds.'
        created_at:
          type: string
          description: 'Time at which this connection was created, in epoch milliseconds.  created_by:
            Optional[str] = None Username of connection creator.'
        created_by:
          type: string
          description: 'Username of connection creator.  credential_type: Optional[CredentialType]
            = None The type of credential.'
        credential_type:
          type: string
          description: 'The type of credential.  full_name: Optional[str] = None Full
            name of connection.'
        full_name:
          type: string
          description: 'Full name of connection.  metastore_id: Optional[str] = None
            Unique identifier of parent metastore.'
        metastore_id:
          type: string
          description: 'Unique identifier of parent metastore.  name: Optional[str]
            = None Name of the connection.'
        name:
          type: string
          description: 'Full name of connection.  metastore_id: Optional[str] = None
            Unique identifier of parent metastore.'
        options:
          type: string
          description: 'A map of key-value properties attached to the securable.  owner:
            Optional[str] = None Username of current owner of the connection.'
        owner:
          type: string
          description: 'Username of current owner of the connection.  properties:
            Optional[Dict[str, str]] = None A map of key-value properties attached
            to the securable.'
        properties:
          type: string
          description: 'A map of key-value properties attached to the securable.  provisioning_info:
            Optional[ProvisioningInfo] = None  read_only: Optional[bool] = None If
            the connection is read only.'
        provisioning_info:
          type: string
          description: ''
        read_only:
          type: string
          description: 'If the connection is read only.  securable_type: Optional[SecurableType]
            = None  updated_at: Optional[int] = None Time at which this connection
            was updated, in epoch milliseconds.'
        securable_type:
          type: string
          description: ''
        updated_at:
          type: string
          description: 'Time at which this connection was updated, in epoch milliseconds.  updated_by:
            Optional[str] = None Username of user who last modified connection.'
        updated_by:
          type: string
          description: 'Username of user who last modified connection.  url: Optional[str]
            = None URL of the remote data source, extracted from options.'
        url:
          type: string
          description: 'URL of the remote data source, extracted from options.  def
            as_dict(self) -> dict: Serializes the ConnectionInfo into a dictionary
            suitable for use as a JSON request body.'
    ConnectionType:
      type: string
      description: 'Next Id: 46'
      enum:
      - BIGQUERY
      - DATABRICKS
      - GA4_RAW_DATA
      - GLUE
      - HIVE_METASTORE
      - HTTP
      - MYSQL
      - ORACLE
      - PALANTIR
      - POSTGRESQL
      - POWER_BI
      - REDSHIFT
      - SALESFORCE
      - SALESFORCE_DATA_CLOUD
      - SERVICENOW
      - SNOWFLAKE
      - SQLDW
      - SQLSERVER
      - TERADATA
      - UNKNOWN_CONNECTION_TYPE
      - WORKDAY_RAAS
    ContinuousUpdateStatus:
      type: object
      description: 'Detailed status of an online table. Shown if the online table
        is in the ONLINE_CONTINUOUS_UPDATE

        or the ONLINE_UPDATING_PIPELINE_RESOURCES state.'
      properties:
        initial_pipeline_sync_progress:
          type: string
          description: 'Progress of the initial data synchronization.  last_processed_commit_version:
            Optional[int] = None """The last source table Delta version that was synced
            to the online table. Note that this Delta version may not be completely
            synced to the online table yet.'
        last_processed_commit_version:
          type: string
          description: The last source table Delta version that was synced to the
            online table. Note that this Delta version may not be completely synced
            to the online table yet.
        timestamp:
          type: string
          description: The timestamp of the last time any data was synchronized from
            the source table to the online table.
    CreateAccessRequest:
      type: object
      description: 'CreateAccessRequest(behalf_of: ''Optional[Principal]'' = None,
        comment: ''Optional[str]'' = None, securable_permissions: ''Optional[List[SecurablePermissions]]''
        = None)'
      properties:
        behalf_of:
          type: string
          description: Optional. The principal this request is for. Empty `behalf_of`
            defaults to the requester's identity.  Principals must be unique across
            the API call.
        comment:
          type: string
          description: Optional. Comment associated with the request.  At most 200
            characters, can only contain lowercase/uppercase letters (a-z, A-Z), numbers
            (0-9), punctuation, and spaces.
        securable_permissions:
          type: string
          description: List of securables and their corresponding requested UC privileges.  At
            most 30 securables can be requested for a principal per batched call.
            Each securable can only be requested once per principal.
    CreateAccessRequestResponse:
      type: object
      description: 'CreateAccessRequestResponse(behalf_of: ''Optional[Principal]''
        = None, request_destinations: ''Optional[List[AccessRequestDestinations]]''
        = None)'
      properties:
        behalf_of:
          type: string
          description: 'The principal the request was made on behalf of.  request_destinations:
            Optional[List[AccessRequestDestinations]] = None The access request destinations
            for all the securables the principal requested.'
        request_destinations:
          type: string
          description: 'The access request destinations for all the securables the
            principal requested.  def as_dict(self) -> dict: Serializes the CreateAccessRequestResponse
            into a dictionary suitable for use as a JSON request body.'
    CreateAccountsMetastore:
      type: object
      description: 'CreateAccountsMetastore(name: ''str'', region: ''Optional[str]''
        = None, storage_root: ''Optional[str]'' = None)'
      properties:
        name:
          type: string
          description: 'The user-specified name of the metastore.  region: Optional[str]
            = None Cloud region which the metastore serves (e.g., `us-west-2`, `westus`).'
        region:
          type: string
          description: 'Cloud region which the metastore serves (e.g., `us-west-2`,
            `westus`).  storage_root: Optional[str] = None The storage root URL for
            metastore'
        storage_root:
          type: string
          description: 'The storage root URL for metastore  def as_dict(self) -> dict:
            Serializes the CreateAccountsMetastore into a dictionary suitable for
            use as a JSON request body.'
    CreateAccountsStorageCredential:
      type: object
      description: 'CreateAccountsStorageCredential(name: ''str'', aws_iam_role: ''Optional[AwsIamRoleRequest]''
        = None, azure_managed_identity: ''Optional[AzureManagedIdentityRequest]''
        = None, azure_service_principal: ''Optional[AzureServicePrincipal]'' = None,
        cloudflare_api_token: ''Optional[CloudflareApiToken]'' = None, comment: ''Optional[str]''
        = None, databricks_gcp_service_account: ''Optional[DatabricksGcpServiceAccountRequest]''
        = None, read_only: ''Optional[bool]'' = None)'
      properties:
        name:
          type: string
          description: The credential name. The name must be unique among storage
            and service credentials within the metastore.
        aws_iam_role:
          type: string
          description: 'The AWS IAM role configuration.  azure_managed_identity: Optional[AzureManagedIdentityRequest]
            = None The Azure managed identity configuration.'
        azure_managed_identity:
          type: string
          description: 'The Azure managed identity configuration.  azure_service_principal:
            Optional[AzureServicePrincipal] = None The Azure service principal configuration.'
        azure_service_principal:
          type: string
          description: 'The Azure service principal configuration.  cloudflare_api_token:
            Optional[CloudflareApiToken] = None The Cloudflare API token configuration.'
        cloudflare_api_token:
          type: string
          description: 'The Cloudflare API token configuration.  comment: Optional[str]
            = None Comment associated with the credential.'
        comment:
          type: string
          description: 'Comment associated with the credential.  databricks_gcp_service_account:
            Optional[DatabricksGcpServiceAccountRequest] = None The Databricks managed
            GCP service account configuration.'
        databricks_gcp_service_account:
          type: string
          description: 'The Databricks managed GCP service account configuration.  read_only:
            Optional[bool] = None """Whether the credential is usable only for read
            operations. Only applicable when purpose is **STORAGE**.'
        read_only:
          type: string
          description: Whether the credential is usable only for read operations.
            Only applicable when purpose is **STORAGE**.
    CreateFunction:
      type: object
      description: 'CreateFunction(name: ''str'', catalog_name: ''str'', schema_name:
        ''str'', input_params: ''FunctionParameterInfos'', data_type: ''ColumnTypeName'',
        full_data_type: ''str'', routine_body: ''CreateFunctionRoutineBody'', routine_definition:
        ''str'', parameter_style: ''CreateFunctionParameterStyle'', is_deterministic:
        ''bool'', sql_data_access: ''CreateFunctionSqlDataAccess'', is_null_call:
        ''bool'', security_type: ''CreateFunctionSecurityType'', specific_name: ''str'',
        comment: ''Optional[str]'' = None, external_language: ''Optional[str]'' =
        None, external_name: ''Optional[str]'' = None, properties: ''Optional[str]''
        = None, return_params: ''Optional[FunctionParameterInfos]'' = None, routine_dependencies:
        ''Optional[DependencyList]'' = None, sql_path: ''Optional[str]'' = None)'
      properties:
        name:
          type: string
          description: 'Name of function, relative to parent schema.  catalog_name:
            str Name of parent Catalog.'
        catalog_name:
          type: string
          description: 'Name of parent Catalog.  schema_name: str Name of parent Schema
            relative to its parent Catalog.'
        schema_name:
          type: string
          description: 'Name of parent Schema relative to its parent Catalog.  input_params:
            FunctionParameterInfos Function input parameters.'
        input_params:
          type: string
          description: 'Function input parameters.  data_type: ColumnTypeName Scalar
            function return data type.'
        data_type:
          type: string
          description: 'Scalar function return data type.  full_data_type: str Pretty
            printed function data type.'
        full_data_type:
          type: string
          description: 'Pretty printed function data type.  routine_body: CreateFunctionRoutineBody
            """Function language. When **EXTERNAL** is used, the language of the routine
            function should be specified in the **external_language** field, and the
            **return_params** of the function cannot be used (as **TABLE** return
            type is not supported), and the **sql_data_access** field must be **NO_SQL**.'
        routine_body:
          type: string
          description: Function language. When **EXTERNAL** is used, the language
            of the routine function should be specified in the **external_language**
            field, and the **return_params** of the function cannot be used (as **TABLE**
            return type is not supported), and the **sql_data_access** field must
            be **NO_SQL**.
        routine_definition:
          type: string
          description: 'Function body.  parameter_style: CreateFunctionParameterStyle
            Function parameter style. **S** is the value for SQL.'
        parameter_style:
          type: string
          description: 'Function parameter style. **S** is the value for SQL.  is_deterministic:
            bool Whether the function is deterministic.'
        is_deterministic:
          type: string
          description: 'Whether the function is deterministic.  sql_data_access: CreateFunctionSqlDataAccess
            Function SQL data access.'
        sql_data_access:
          type: string
          description: 'Function SQL data access.  is_null_call: bool Function null
            call.'
        is_null_call:
          type: string
          description: 'Function null call.  security_type: CreateFunctionSecurityType
            Function security type.'
        security_type:
          type: string
          description: 'Function security type.  specific_name: str Specific name
            of the function; Reserved for future use.'
        specific_name:
          type: string
          description: 'Specific name of the function; Reserved for future use.  comment:
            Optional[str] = None User-provided free-form text description.'
        comment:
          type: string
          description: 'User-provided free-form text description.  external_language:
            Optional[str] = None External function language.'
        external_language:
          type: string
          description: 'External function language.  external_name: Optional[str]
            = None External function name.'
        external_name:
          type: string
          description: 'External function name.  properties: Optional[str] = None
            JSON-serialized key-value pair map, encoded (escaped) as a string.'
        properties:
          type: string
          description: 'JSON-serialized key-value pair map, encoded (escaped) as a
            string.  return_params: Optional[FunctionParameterInfos] = None Table
            function return parameters.'
        return_params:
          type: string
          description: 'Table function return parameters.  routine_dependencies: Optional[DependencyList]
            = None function dependencies.'
        routine_dependencies:
          type: string
          description: 'function dependencies.  sql_path: Optional[str] = None List
            of schemes whose objects can be referenced without qualification.'
        sql_path:
          type: string
          description: 'List of schemes whose objects can be referenced without qualification.  def
            as_dict(self) -> dict: Serializes the CreateFunction into a dictionary
            suitable for use as a JSON request body.'
    CreateFunctionParameterStyle:
      type: string
      description: 'Create a collection of name/value pairs.


        Example enumeration:


        >>> class Color(Enum):

        ...     RED = 1

        ...     BLUE = 2

        ...     GREEN = 3


        Access them by:


        - attribute access::


        >>> Color.RED

        <Color.RED: 1>


        - value lookup:


        >>> Color(1)

        <Color.RED: 1>


        - name lookup:


        >>> Color[''RED'']

        <Color.RED: 1>


        Enumerations can be iterated over, and know how many members they have:


        >>> len(Color)

        3


        >>> list(Color)

        [<Color.RED: 1>, <Color.BLUE: 2>, <Color.GREEN: 3>]


        Methods can be added to enumerations, and members can have their own

        attributes -- see the documentation for details.'
      enum:
      - S
    CreateFunctionRoutineBody:
      type: string
      description: 'Create a collection of name/value pairs.


        Example enumeration:


        >>> class Color(Enum):

        ...     RED = 1

        ...     BLUE = 2

        ...     GREEN = 3


        Access them by:


        - attribute access::


        >>> Color.RED

        <Color.RED: 1>


        - value lookup:


        >>> Color(1)

        <Color.RED: 1>


        - name lookup:


        >>> Color[''RED'']

        <Color.RED: 1>


        Enumerations can be iterated over, and know how many members they have:


        >>> len(Color)

        3


        >>> list(Color)

        [<Color.RED: 1>, <Color.BLUE: 2>, <Color.GREEN: 3>]


        Methods can be added to enumerations, and members can have their own

        attributes -- see the documentation for details.'
      enum:
      - EXTERNAL
      - SQL
    CreateFunctionSecurityType:
      type: string
      description: 'Create a collection of name/value pairs.


        Example enumeration:


        >>> class Color(Enum):

        ...     RED = 1

        ...     BLUE = 2

        ...     GREEN = 3


        Access them by:


        - attribute access::


        >>> Color.RED

        <Color.RED: 1>


        - value lookup:


        >>> Color(1)

        <Color.RED: 1>


        - name lookup:


        >>> Color[''RED'']

        <Color.RED: 1>


        Enumerations can be iterated over, and know how many members they have:


        >>> len(Color)

        3


        >>> list(Color)

        [<Color.RED: 1>, <Color.BLUE: 2>, <Color.GREEN: 3>]


        Methods can be added to enumerations, and members can have their own

        attributes -- see the documentation for details.'
      enum:
      - DEFINER
    CreateFunctionSqlDataAccess:
      type: string
      description: 'Create a collection of name/value pairs.


        Example enumeration:


        >>> class Color(Enum):

        ...     RED = 1

        ...     BLUE = 2

        ...     GREEN = 3


        Access them by:


        - attribute access::


        >>> Color.RED

        <Color.RED: 1>


        - value lookup:


        >>> Color(1)

        <Color.RED: 1>


        - name lookup:


        >>> Color[''RED'']

        <Color.RED: 1>


        Enumerations can be iterated over, and know how many members they have:


        >>> len(Color)

        3


        >>> list(Color)

        [<Color.RED: 1>, <Color.BLUE: 2>, <Color.GREEN: 3>]


        Methods can be added to enumerations, and members can have their own

        attributes -- see the documentation for details.'
      enum:
      - CONTAINS_SQL
      - NO_SQL
      - READS_SQL_DATA
    CreateMetastoreAssignment:
      type: object
      description: 'CreateMetastoreAssignment(metastore_id: ''str'', default_catalog_name:
        ''str'', workspace_id: ''Optional[int]'' = None)'
      properties:
        metastore_id:
          type: string
          description: 'The unique ID of the metastore.  default_catalog_name: str
            """The name of the default catalog in the metastore. This field is deprecated.
            Please use "Default Namespace API" to configure the default catalog for
            a Databricks workspace.'
        default_catalog_name:
          type: string
          description: The name of the default catalog in the metastore. This field
            is deprecated. Please use "Default Namespace API" to configure the default
            catalog for a Databricks workspace.
        workspace_id:
          type: string
          description: 'A workspace ID.  def as_dict(self) -> dict: Serializes the
            CreateMetastoreAssignment into a dictionary suitable for use as a JSON
            request body.'
    CreateRequestExternalLineage:
      type: object
      description: 'CreateRequestExternalLineage(source: ''ExternalLineageObject'',
        target: ''ExternalLineageObject'', columns: ''Optional[List[ColumnRelationship]]''
        = None, id: ''Optional[str]'' = None, properties: ''Optional[Dict[str, str]]''
        = None)'
      properties:
        source:
          type: string
          description: 'Source object of the external lineage relationship.  target:
            ExternalLineageObject Target object of the external lineage relationship.'
        target:
          type: string
          description: 'Target object of the external lineage relationship.  columns:
            Optional[List[ColumnRelationship]] = None List of column relationships
            between source and target objects.'
        columns:
          type: string
          description: 'List of column relationships between source and target objects.  id:
            Optional[str] = None Unique identifier of the external lineage relationship.'
        id:
          type: string
          description: 'Unique identifier of the external lineage relationship.  properties:
            Optional[Dict[str, str]] = None Key-value properties associated with the
            external lineage relationship.'
        properties:
          type: string
          description: 'Key-value properties associated with the external lineage
            relationship.  def as_dict(self) -> dict: Serializes the CreateRequestExternalLineage
            into a dictionary suitable for use as a JSON request body.'
    CredentialDependency:
      type: object
      description: A credential that is dependent on a SQL object.
      properties:
        credential_name:
          type: string
          description: 'Full name of the dependent credential, in the form of __credential_name__.  def
            as_dict(self) -> dict: Serializes the CredentialDependency into a dictionary
            suitable for use as a JSON request body.'
    CredentialInfo:
      type: object
      description: 'CredentialInfo(aws_iam_role: ''Optional[AwsIamRole]'' = None,
        azure_managed_identity: ''Optional[AzureManagedIdentity]'' = None, azure_service_principal:
        ''Optional[AzureServicePrincipal]'' = None, comment: ''Optional[str]'' = None,
        created_at: ''Optional[int]'' = None, created_by: ''Optional[str]'' = None,
        databricks_gcp_service_account: ''Optional[DatabricksGcpServiceAccount]''
        = None, full_name: ''Optional[str]'' = None, id: ''Optional[str]'' = None,
        isolation_mode: ''Optional[IsolationMode]'' = None, metastore_id: ''Optional[str]''
        = None, name: ''Optional[str]'' = None, owner: ''Optional[str]'' = None, purpose:
        ''Optional[CredentialPurpose]'' = None, read_only: ''Optional[bool]'' = None,
        updated_at: ''Optional[int]'' = None, updated_by: ''Optional[str]'' = None,
        used_for_managed_storage: ''Optional[bool]'' = None)'
      properties:
        aws_iam_role:
          type: string
          description: 'The AWS IAM role configuration.  azure_managed_identity: Optional[AzureManagedIdentity]
            = None The Azure managed identity configuration.'
        azure_managed_identity:
          type: string
          description: 'The Azure managed identity configuration.  azure_service_principal:
            Optional[AzureServicePrincipal] = None The Azure service principal configuration.'
        azure_service_principal:
          type: string
          description: 'The Azure service principal configuration.  comment: Optional[str]
            = None Comment associated with the credential.'
        comment:
          type: string
          description: 'Comment associated with the credential.  created_at: Optional[int]
            = None Time at which this credential was created, in epoch milliseconds.'
        created_at:
          type: string
          description: 'Time at which this credential was created, in epoch milliseconds.  created_by:
            Optional[str] = None Username of credential creator.'
        created_by:
          type: string
          description: 'Username of credential creator.  databricks_gcp_service_account:
            Optional[DatabricksGcpServiceAccount] = None The Databricks managed GCP
            service account configuration.'
        databricks_gcp_service_account:
          type: string
          description: 'The Databricks managed GCP service account configuration.  full_name:
            Optional[str] = None The full name of the credential.'
        full_name:
          type: string
          description: 'The full name of the credential.  id: Optional[str] = None
            The unique identifier of the credential.'
        id:
          type: string
          description: 'The unique identifier of the credential.  isolation_mode:
            Optional[IsolationMode] = None Whether the current securable is accessible
            from all workspaces or a specific set of workspaces.'
        isolation_mode:
          type: string
          description: 'Whether the current securable is accessible from all workspaces
            or a specific set of workspaces.  metastore_id: Optional[str] = None Unique
            identifier of the parent metastore.'
        metastore_id:
          type: string
          description: 'Unique identifier of the parent metastore.  name: Optional[str]
            = None """The credential name. The name must be unique among storage and
            service credentials within the metastore.'
        name:
          type: string
          description: 'The full name of the credential.  id: Optional[str] = None
            The unique identifier of the credential.'
        owner:
          type: string
          description: 'Username of current owner of credential.  purpose: Optional[CredentialPurpose]
            = None Indicates the purpose of the credential.'
        purpose:
          type: string
          description: 'Indicates the purpose of the credential.  read_only: Optional[bool]
            = None """Whether the credential is usable only for read operations. Only
            applicable when purpose is **STORAGE**.'
        read_only:
          type: string
          description: Whether the credential is usable only for read operations.
            Only applicable when purpose is **STORAGE**.
        updated_at:
          type: string
          description: 'Time at which this credential was last modified, in epoch
            milliseconds.  updated_by: Optional[str] = None Username of user who last
            modified the credential.'
        updated_by:
          type: string
          description: 'Username of user who last modified the credential.  used_for_managed_storage:
            Optional[bool] = None """Whether this credential is the current metastore''s
            root storage credential. Only applicable when purpose is **STORAGE**.'
        used_for_managed_storage:
          type: string
          description: Whether this credential is the current metastore's root storage
            credential. Only applicable when purpose is **STORAGE**.
    CredentialPurpose:
      type: string
      description: 'Create a collection of name/value pairs.


        Example enumeration:


        >>> class Color(Enum):

        ...     RED = 1

        ...     BLUE = 2

        ...     GREEN = 3


        Access them by:


        - attribute access::


        >>> Color.RED

        <Color.RED: 1>


        - value lookup:


        >>> Color(1)

        <Color.RED: 1>


        - name lookup:


        >>> Color[''RED'']

        <Color.RED: 1>


        Enumerations can be iterated over, and know how many members they have:


        >>> len(Color)

        3


        >>> list(Color)

        [<Color.RED: 1>, <Color.BLUE: 2>, <Color.GREEN: 3>]


        Methods can be added to enumerations, and members can have their own

        attributes -- see the documentation for details.'
      enum:
      - SERVICE
      - STORAGE
    CredentialType:
      type: string
      description: 'Next Id: 14'
      enum:
      - ANY_STATIC_CREDENTIAL
      - BEARER_TOKEN
      - OAUTH_ACCESS_TOKEN
      - OAUTH_M2M
      - OAUTH_MTLS
      - OAUTH_REFRESH_TOKEN
      - OAUTH_RESOURCE_OWNER_PASSWORD
      - OAUTH_U2M
      - OAUTH_U2M_MAPPING
      - OIDC_TOKEN
      - PEM_PRIVATE_KEY
      - SERVICE_CREDENTIAL
      - UNKNOWN_CREDENTIAL_TYPE
      - USERNAME_PASSWORD
    CredentialValidationResult:
      type: object
      description: 'CredentialValidationResult(message: ''Optional[str]'' = None,
        result: ''Optional[ValidateCredentialResult]'' = None)'
      properties:
        message:
          type: string
          description: 'Error message would exist when the result does not equal to
            **PASS**.  result: Optional[ValidateCredentialResult] = None The results
            of the tested operation.'
        result:
          type: string
          description: 'The results of the tested operation.  def as_dict(self) ->
            dict: Serializes the CredentialValidationResult into a dictionary suitable
            for use as a JSON request body.'
    DataSourceFormat:
      type: string
      description: Data source format
      enum:
      - AVRO
      - BIGQUERY_FORMAT
      - CSV
      - DATABRICKS_FORMAT
      - DATABRICKS_ROW_STORE_FORMAT
      - DELTA
      - DELTASHARING
      - DELTA_UNIFORM_HUDI
      - DELTA_UNIFORM_ICEBERG
      - HIVE
      - ICEBERG
      - JSON
      - MONGODB_FORMAT
      - MYSQL_FORMAT
      - NETSUITE_FORMAT
      - ORACLE_FORMAT
      - ORC
      - PARQUET
      - POSTGRESQL_FORMAT
      - REDSHIFT_FORMAT
      - SALESFORCE_DATA_CLOUD_FORMAT
      - SALESFORCE_FORMAT
      - SNOWFLAKE_FORMAT
      - SQLDW_FORMAT
      - SQLSERVER_FORMAT
      - TERADATA_FORMAT
      - TEXT
      - UNITY_CATALOG
      - VECTOR_INDEX_FORMAT
      - WORKDAY_RAAS_FORMAT
    DatabricksGcpServiceAccount:
      type: object
      description: GCP long-lived credential. Databricks-created Google Cloud Storage
        service account.
      properties:
        credential_id:
          type: string
          description: 'The Databricks internal ID that represents this managed identity.  email:
            Optional[str] = None The email of the service account.'
        email:
          type: string
          description: 'The email of the service account.  private_key_id: Optional[str]
            = None The ID that represents the private key for this Service Account'
        private_key_id:
          type: string
          description: 'The ID that represents the private key for this Service Account  def
            as_dict(self) -> dict: Serializes the DatabricksGcpServiceAccount into
            a dictionary suitable for use as a JSON request body.'
    DatabricksGcpServiceAccountRequest:
      type: object
      description: GCP long-lived credential. Databricks-created Google Cloud Storage
        service account.
      properties: {}
    DatabricksGcpServiceAccountResponse:
      type: object
      description: GCP long-lived credential. Databricks-created Google Cloud Storage
        service account.
      properties:
        credential_id:
          type: string
          description: 'The Databricks internal ID that represents this managed identity.  email:
            Optional[str] = None The email of the service account.'
        email:
          type: string
          description: 'The email of the service account.  def as_dict(self) -> dict:
            Serializes the DatabricksGcpServiceAccountResponse into a dictionary suitable
            for use as a JSON request body.'
    DeleteAliasResponse:
      type: object
      description: DeleteAliasResponse()
      properties: {}
    DeleteCredentialResponse:
      type: object
      description: DeleteCredentialResponse()
      properties: {}
    DeleteMonitorResponse:
      type: object
      description: DeleteMonitorResponse()
      properties: {}
    DeletePolicyResponse:
      type: object
      description: DeletePolicyResponse()
      properties: {}
    DeleteRequestExternalLineage:
      type: object
      description: 'DeleteRequestExternalLineage(source: ''ExternalLineageObject'',
        target: ''ExternalLineageObject'', id: ''Optional[str]'' = None)'
      properties:
        source:
          type: string
          description: 'Source object of the external lineage relationship.  target:
            ExternalLineageObject Target object of the external lineage relationship.'
        target:
          type: string
          description: 'Target object of the external lineage relationship.  id: Optional[str]
            = None Unique identifier of the external lineage relationship.'
        id:
          type: string
          description: 'Unique identifier of the external lineage relationship.  def
            as_dict(self) -> dict: Serializes the DeleteRequestExternalLineage into
            a dictionary suitable for use as a JSON request body.'
    DeleteResponse:
      type: object
      description: DeleteResponse()
      properties: {}
    DeleteTableConstraintResponse:
      type: object
      description: DeleteTableConstraintResponse()
      properties: {}
    DeltaRuntimePropertiesKvPairs:
      type: object
      description: 'Properties pertaining to the current state of the delta table
        as given by the commit server.

        This does not contain **delta.*** (input) properties in __TableInfo.properties__.'
      properties:
        delta_runtime_properties:
          type: string
          description: 'A map of key-value properties attached to the securable.  def
            as_dict(self) -> dict: Serializes the DeltaRuntimePropertiesKvPairs into
            a dictionary suitable for use as a JSON request body.'
    DeltaSharingScopeEnum:
      type: string
      description: 'Create a collection of name/value pairs.


        Example enumeration:


        >>> class Color(Enum):

        ...     RED = 1

        ...     BLUE = 2

        ...     GREEN = 3


        Access them by:


        - attribute access::


        >>> Color.RED

        <Color.RED: 1>


        - value lookup:


        >>> Color(1)

        <Color.RED: 1>


        - name lookup:


        >>> Color[''RED'']

        <Color.RED: 1>


        Enumerations can be iterated over, and know how many members they have:


        >>> len(Color)

        3


        >>> list(Color)

        [<Color.RED: 1>, <Color.BLUE: 2>, <Color.GREEN: 3>]


        Methods can be added to enumerations, and members can have their own

        attributes -- see the documentation for details.'
      enum:
      - INTERNAL
      - INTERNAL_AND_EXTERNAL
    Dependency:
      type: object
      description: 'A dependency of a SQL object. One of the following fields must
        be defined: __table__,

        __function__, __connection__, or __credential__.'
      properties:
        connection:
          type: string
          description: ''
        credential:
          type: string
          description: ''
        function:
          type: string
          description: ''
        table:
          type: string
          description: ''
    DependencyList:
      type: object
      description: A list of dependencies.
      properties:
        dependencies:
          type: string
          description: 'Array of dependencies.  def as_dict(self) -> dict: Serializes
            the DependencyList into a dictionary suitable for use as a JSON request
            body.'
    DestinationType:
      type: string
      description: 'Create a collection of name/value pairs.


        Example enumeration:


        >>> class Color(Enum):

        ...     RED = 1

        ...     BLUE = 2

        ...     GREEN = 3


        Access them by:


        - attribute access::


        >>> Color.RED

        <Color.RED: 1>


        - value lookup:


        >>> Color(1)

        <Color.RED: 1>


        - name lookup:


        >>> Color[''RED'']

        <Color.RED: 1>


        Enumerations can be iterated over, and know how many members they have:


        >>> len(Color)

        3


        >>> list(Color)

        [<Color.RED: 1>, <Color.BLUE: 2>, <Color.GREEN: 3>]


        Methods can be added to enumerations, and members can have their own

        attributes -- see the documentation for details.'
      enum:
      - EMAIL
      - GENERIC_WEBHOOK
      - MICROSOFT_TEAMS
      - SLACK
      - URL
    DisableResponse:
      type: object
      description: DisableResponse()
      properties: {}
    EffectivePermissionsList:
      type: object
      description: 'EffectivePermissionsList(next_page_token: ''Optional[str]'' =
        None, privilege_assignments: ''Optional[List[EffectivePrivilegeAssignment]]''
        = None)'
      properties:
        next_page_token:
          type: string
          description: Opaque token to retrieve the next page of results. Absent if
            there are no more pages. __page_token__ should be set to this value for
            the next request (for the next page of results).
        privilege_assignments:
          type: string
          description: 'The privileges conveyed to each principal (either directly
            or via inheritance)  def as_dict(self) -> dict: Serializes the EffectivePermissionsList
            into a dictionary suitable for use as a JSON request body.'
    EffectivePredictiveOptimizationFlag:
      type: object
      description: 'EffectivePredictiveOptimizationFlag(value: ''EnablePredictiveOptimization'',
        inherited_from_name: ''Optional[str]'' = None, inherited_from_type: ''Optional[EffectivePredictiveOptimizationFlagInheritedFromType]''
        = None)'
      properties:
        value:
          type: string
          description: 'Whether predictive optimization should be enabled for this
            object and objects under it.  inherited_from_name: Optional[str] = None
            """The name of the object from which the flag was inherited. If there
            was no inheritance, this field is left blank.'
        inherited_from_name:
          type: string
          description: The name of the object from which the flag was inherited. If
            there was no inheritance, this field is left blank.
        inherited_from_type:
          type: string
          description: The type of the object from which the flag was inherited. If
            there was no inheritance, this field is left blank.
    EffectivePredictiveOptimizationFlagInheritedFromType:
      type: string
      description: 'Create a collection of name/value pairs.


        Example enumeration:


        >>> class Color(Enum):

        ...     RED = 1

        ...     BLUE = 2

        ...     GREEN = 3


        Access them by:


        - attribute access::


        >>> Color.RED

        <Color.RED: 1>


        - value lookup:


        >>> Color(1)

        <Color.RED: 1>


        - name lookup:


        >>> Color[''RED'']

        <Color.RED: 1>


        Enumerations can be iterated over, and know how many members they have:


        >>> len(Color)

        3


        >>> list(Color)

        [<Color.RED: 1>, <Color.BLUE: 2>, <Color.GREEN: 3>]


        Methods can be added to enumerations, and members can have their own

        attributes -- see the documentation for details.'
      enum:
      - CATALOG
      - SCHEMA
    EffectivePrivilege:
      type: object
      description: 'EffectivePrivilege(inherited_from_name: ''Optional[str]'' = None,
        inherited_from_type: ''Optional[SecurableType]'' = None, privilege: ''Optional[Privilege]''
        = None)'
      properties:
        inherited_from_name:
          type: string
          description: The full name of the object that conveys this privilege via
            inheritance. This field is omitted when privilege is not inherited (it's
            assigned to the securable itself).
        inherited_from_type:
          type: string
          description: The type of the object that conveys this privilege via inheritance.
            This field is omitted when privilege is not inherited (it's assigned to
            the securable itself).
        privilege:
          type: string
          description: 'The privilege assigned to the principal.  def as_dict(self)
            -> dict: Serializes the EffectivePrivilege into a dictionary suitable
            for use as a JSON request body.'
    EffectivePrivilegeAssignment:
      type: object
      description: 'EffectivePrivilegeAssignment(principal: ''Optional[str]'' = None,
        privileges: ''Optional[List[EffectivePrivilege]]'' = None)'
      properties:
        principal:
          type: string
          description: 'The principal (user email address or group name).  privileges:
            Optional[List[EffectivePrivilege]] = None The privileges conveyed to the
            principal (either directly or via inheritance).'
        privileges:
          type: string
          description: 'The privileges conveyed to the principal (either directly
            or via inheritance).  def as_dict(self) -> dict: Serializes the EffectivePrivilegeAssignment
            into a dictionary suitable for use as a JSON request body.'
    EnablePredictiveOptimization:
      type: string
      description: 'Create a collection of name/value pairs.


        Example enumeration:


        >>> class Color(Enum):

        ...     RED = 1

        ...     BLUE = 2

        ...     GREEN = 3


        Access them by:


        - attribute access::


        >>> Color.RED

        <Color.RED: 1>


        - value lookup:


        >>> Color(1)

        <Color.RED: 1>


        - name lookup:


        >>> Color[''RED'']

        <Color.RED: 1>


        Enumerations can be iterated over, and know how many members they have:


        >>> len(Color)

        3


        >>> list(Color)

        [<Color.RED: 1>, <Color.BLUE: 2>, <Color.GREEN: 3>]


        Methods can be added to enumerations, and members can have their own

        attributes -- see the documentation for details.'
      enum:
      - DISABLE
      - ENABLE
      - INHERIT
    EnableResponse:
      type: object
      description: EnableResponse()
      properties: {}
    EncryptionDetails:
      type: object
      description: Encryption options that apply to clients connecting to cloud storage.
      properties:
        sse_encryption_details:
          type: string
          description: 'Server-Side Encryption properties for clients communicating
            with AWS s3.  def as_dict(self) -> dict: Serializes the EncryptionDetails
            into a dictionary suitable for use as a JSON request body.'
    EntityTagAssignment:
      type: object
      description: Represents a tag assignment to an entity
      properties:
        entity_name:
          type: string
          description: 'The fully qualified name of the entity to which the tag is
            assigned  tag_key: str The key of the tag'
        tag_key:
          type: string
          description: 'The key of the tag  entity_type: str """The type of the entity
            to which the tag is assigned. Allowed values are: catalogs, schemas, tables,
            columns, volumes.'
        entity_type:
          type: string
          description: 'The type of the entity to which the tag is assigned. Allowed
            values are: catalogs, schemas, tables, columns, volumes.'
        tag_value:
          type: string
          description: 'The value of the tag  def as_dict(self) -> dict: Serializes
            the EntityTagAssignment into a dictionary suitable for use as a JSON request
            body.'
    ExternalLineageExternalMetadata:
      type: object
      description: 'ExternalLineageExternalMetadata(name: ''Optional[str]'' = None)'
      properties:
        name:
          type: string
          description: ''
    ExternalLineageExternalMetadataInfo:
      type: object
      description: Represents the external metadata object in the lineage event.
      properties:
        entity_type:
          type: string
          description: 'Type of entity represented by the external metadata object.  event_time:
            Optional[str] = None Timestamp of the lineage event.'
        event_time:
          type: string
          description: 'Timestamp of the lineage event.  name: Optional[str] = None
            Name of the external metadata object.'
        name:
          type: string
          description: 'Name of the external metadata object.  system_type: Optional[SystemType]
            = None Type of external system.'
        system_type:
          type: string
          description: 'Type of external system.  def as_dict(self) -> dict: Serializes
            the ExternalLineageExternalMetadataInfo into a dictionary suitable for
            use as a JSON request body.'
    ExternalLineageFileInfo:
      type: object
      description: Represents the path information in the lineage event.
      properties:
        event_time:
          type: string
          description: 'Timestamp of the lineage event.  path: Optional[str] = None
            URL of the path.'
        path:
          type: string
          description: 'URL of the path.  securable_name: Optional[str] = None The
            full name of the securable on the path.'
        securable_name:
          type: string
          description: 'The full name of the securable on the path.  securable_type:
            Optional[str] = None The securable type of the securable on the path.'
        securable_type:
          type: string
          description: 'The securable type of the securable on the path.  storage_location:
            Optional[str] = None The storage location associated with securable on
            the path.'
        storage_location:
          type: string
          description: 'The storage location associated with securable on the path.  def
            as_dict(self) -> dict: Serializes the ExternalLineageFileInfo into a dictionary
            suitable for use as a JSON request body.'
    ExternalLineageInfo:
      type: object
      description: Lineage response containing lineage information of a data asset.
      properties:
        external_lineage_info:
          type: string
          description: 'Information about the edge metadata of the external lineage
            relationship.  external_metadata_info: Optional[ExternalLineageExternalMetadataInfo]
            = None Information about external metadata involved in the lineage relationship.'
        external_metadata_info:
          type: string
          description: 'Information about external metadata involved in the lineage
            relationship.  file_info: Optional[ExternalLineageFileInfo] = None Information
            about the file involved in the lineage relationship.'
        file_info:
          type: string
          description: 'Information about the file involved in the lineage relationship.  model_info:
            Optional[ExternalLineageModelVersionInfo] = None Information about the
            model version involved in the lineage relationship.'
        model_info:
          type: string
          description: 'Information about the model version involved in the lineage
            relationship.  table_info: Optional[ExternalLineageTableInfo] = None Information
            about the table involved in the lineage relationship.'
        table_info:
          type: string
          description: 'Information about the table involved in the lineage relationship.  def
            as_dict(self) -> dict: Serializes the ExternalLineageInfo into a dictionary
            suitable for use as a JSON request body.'
    ExternalLineageModelVersion:
      type: object
      description: 'ExternalLineageModelVersion(name: ''Optional[str]'' = None, version:
        ''Optional[str]'' = None)'
      properties:
        name:
          type: string
          description: ''
        version:
          type: string
          description: ''
    ExternalLineageModelVersionInfo:
      type: object
      description: Represents the model version information in the lineage event.
      properties:
        event_time:
          type: string
          description: 'Timestamp of the lineage event.  model_name: Optional[str]
            = None Name of the model.'
        model_name:
          type: string
          description: 'Name of the model.  version: Optional[int] = None Version
            number of the model.'
        version:
          type: string
          description: 'Version number of the model.  def as_dict(self) -> dict: Serializes
            the ExternalLineageModelVersionInfo into a dictionary suitable for use
            as a JSON request body.'
    ExternalLineageObject:
      type: object
      description: 'ExternalLineageObject(external_metadata: ''Optional[ExternalLineageExternalMetadata]''
        = None, model_version: ''Optional[ExternalLineageModelVersion]'' = None, path:
        ''Optional[ExternalLineagePath]'' = None, table: ''Optional[ExternalLineageTable]''
        = None)'
      properties:
        external_metadata:
          type: string
          description: ''
        model_version:
          type: string
          description: ''
        path:
          type: string
          description: ''
        table:
          type: string
          description: ''
    ExternalLineagePath:
      type: object
      description: 'ExternalLineagePath(url: ''Optional[str]'' = None)'
      properties:
        url:
          type: string
          description: ''
    ExternalLineageRelationship:
      type: object
      description: 'ExternalLineageRelationship(source: ''ExternalLineageObject'',
        target: ''ExternalLineageObject'', columns: ''Optional[List[ColumnRelationship]]''
        = None, id: ''Optional[str]'' = None, properties: ''Optional[Dict[str, str]]''
        = None)'
      properties:
        source:
          type: string
          description: 'Source object of the external lineage relationship.  target:
            ExternalLineageObject Target object of the external lineage relationship.'
        target:
          type: string
          description: 'Target object of the external lineage relationship.  columns:
            Optional[List[ColumnRelationship]] = None List of column relationships
            between source and target objects.'
        columns:
          type: string
          description: 'List of column relationships between source and target objects.  id:
            Optional[str] = None Unique identifier of the external lineage relationship.'
        id:
          type: string
          description: 'Unique identifier of the external lineage relationship.  properties:
            Optional[Dict[str, str]] = None Key-value properties associated with the
            external lineage relationship.'
        properties:
          type: string
          description: 'Key-value properties associated with the external lineage
            relationship.  def as_dict(self) -> dict: Serializes the ExternalLineageRelationship
            into a dictionary suitable for use as a JSON request body.'
    ExternalLineageRelationshipInfo:
      type: object
      description: 'ExternalLineageRelationshipInfo(source: ''ExternalLineageObject'',
        target: ''ExternalLineageObject'', columns: ''Optional[List[ColumnRelationship]]''
        = None, id: ''Optional[str]'' = None, properties: ''Optional[Dict[str, str]]''
        = None)'
      properties:
        source:
          type: string
          description: 'Source object of the external lineage relationship.  target:
            ExternalLineageObject Target object of the external lineage relationship.'
        target:
          type: string
          description: 'Target object of the external lineage relationship.  columns:
            Optional[List[ColumnRelationship]] = None List of column relationships
            between source and target objects.'
        columns:
          type: string
          description: 'List of column relationships between source and target objects.  id:
            Optional[str] = None Unique identifier of the external lineage relationship.'
        id:
          type: string
          description: 'Unique identifier of the external lineage relationship.  properties:
            Optional[Dict[str, str]] = None Key-value properties associated with the
            external lineage relationship.'
        properties:
          type: string
          description: 'Key-value properties associated with the external lineage
            relationship.  def as_dict(self) -> dict: Serializes the ExternalLineageRelationshipInfo
            into a dictionary suitable for use as a JSON request body.'
    ExternalLineageTable:
      type: object
      description: 'ExternalLineageTable(name: ''Optional[str]'' = None)'
      properties:
        name:
          type: string
          description: ''
    ExternalLineageTableInfo:
      type: object
      description: Represents the table information in the lineage event.
      properties:
        catalog_name:
          type: string
          description: 'Name of Catalog.  event_time: Optional[str] = None Timestamp
            of the lineage event.'
        event_time:
          type: string
          description: 'Timestamp of the lineage event.  name: Optional[str] = None
            Name of Table.'
        name:
          type: string
          description: 'Name of Catalog.  event_time: Optional[str] = None Timestamp
            of the lineage event.'
        schema_name:
          type: string
          description: 'Name of Schema.  def as_dict(self) -> dict: Serializes the
            ExternalLineageTableInfo into a dictionary suitable for use as a JSON
            request body.'
    ExternalLocationInfo:
      type: object
      description: 'ExternalLocationInfo(browse_only: ''Optional[bool]'' = None, comment:
        ''Optional[str]'' = None, created_at: ''Optional[int]'' = None, created_by:
        ''Optional[str]'' = None, credential_id: ''Optional[str]'' = None, credential_name:
        ''Optional[str]'' = None, enable_file_events: ''Optional[bool]'' = None, encryption_details:
        ''Optional[EncryptionDetails]'' = None, fallback: ''Optional[bool]'' = None,
        file_event_queue: ''Optional[FileEventQueue]'' = None, isolation_mode: ''Optional[IsolationMode]''
        = None, metastore_id: ''Optional[str]'' = None, name: ''Optional[str]'' =
        None, owner: ''Optional[str]'' = None, read_only: ''Optional[bool]'' = None,
        updated_at: ''Optional[int]'' = None, updated_by: ''Optional[str]'' = None,
        url: ''Optional[str]'' = None)'
      properties:
        browse_only:
          type: string
          description: Indicates whether the principal is limited to retrieving metadata
            for the associated object through the BROWSE privilege when include_browse
            is enabled in the request.
        comment:
          type: string
          description: 'User-provided free-form text description.  created_at: Optional[int]
            = None Time at which this external location was created, in epoch milliseconds.'
        created_at:
          type: string
          description: 'Time at which this external location was created, in epoch
            milliseconds.  created_by: Optional[str] = None Username of external location
            creator.'
        created_by:
          type: string
          description: 'Username of external location creator.  credential_id: Optional[str]
            = None Unique ID of the location''s storage credential.'
        credential_id:
          type: string
          description: 'Unique ID of the location''s storage credential.  credential_name:
            Optional[str] = None Name of the storage credential used with this location.'
        credential_name:
          type: string
          description: 'Name of the storage credential used with this location.  enable_file_events:
            Optional[bool] = None Whether to enable file events on this external location.'
        enable_file_events:
          type: string
          description: 'Whether to enable file events on this external location.  encryption_details:
            Optional[EncryptionDetails] = None  fallback: Optional[bool] = None """Indicates
            whether fallback mode is enabled for this external location. When fallback
            mode is enabled, the access to the location falls back to cluster credentials
            if UC credentials are not sufficient.'
        encryption_details:
          type: string
          description: ''
        fallback:
          type: string
          description: Indicates whether fallback mode is enabled for this external
            location. When fallback mode is enabled, the access to the location falls
            back to cluster credentials if UC credentials are not sufficient.
        file_event_queue:
          type: string
          description: File event queue settings. If `enable_file_events` is `true`,
            must be defined and have exactly one of the documented properties.
        isolation_mode:
          type: string
          description: ''
        metastore_id:
          type: string
          description: 'Unique identifier of metastore hosting the external location.  name:
            Optional[str] = None Name of the external location.'
        name:
          type: string
          description: 'Name of the storage credential used with this location.  enable_file_events:
            Optional[bool] = None Whether to enable file events on this external location.'
        owner:
          type: string
          description: 'The owner of the external location.  read_only: Optional[bool]
            = None Indicates whether the external location is read-only.'
        read_only:
          type: string
          description: 'Indicates whether the external location is read-only.  updated_at:
            Optional[int] = None Time at which external location this was last modified,
            in epoch milliseconds.'
        updated_at:
          type: string
          description: 'Time at which external location this was last modified, in
            epoch milliseconds.  updated_by: Optional[str] = None Username of user
            who last modified the external location.'
        updated_by:
          type: string
          description: 'Username of user who last modified the external location.  url:
            Optional[str] = None Path URL of the external location.'
        url:
          type: string
          description: 'Path URL of the external location.  def as_dict(self) -> dict:
            Serializes the ExternalLocationInfo into a dictionary suitable for use
            as a JSON request body.'
    ExternalMetadata:
      type: object
      description: 'ExternalMetadata(name: ''str'', system_type: ''SystemType'', entity_type:
        ''str'', columns: ''Optional[List[str]]'' = None, create_time: ''Optional[str]''
        = None, created_by: ''Optional[str]'' = None, description: ''Optional[str]''
        = None, id: ''Optional[str]'' = None, metastore_id: ''Optional[str]'' = None,
        owner: ''Optional[str]'' = None, properties: ''Optional[Dict[str, str]]''
        = None, update_time: ''Optional[str]'' = None, updated_by: ''Optional[str]''
        = None, url: ''Optional[str]'' = None)'
      properties:
        name:
          type: string
          description: 'Name of the external metadata object.  system_type: SystemType
            Type of external system.'
        system_type:
          type: string
          description: 'Type of external system.  entity_type: str Type of entity
            within the external system.'
        entity_type:
          type: string
          description: 'Type of entity within the external system.  columns: Optional[List[str]]
            = None List of columns associated with the external metadata object.'
        columns:
          type: string
          description: 'List of columns associated with the external metadata object.  create_time:
            Optional[str] = None Time at which this external metadata object was created.'
        create_time:
          type: string
          description: 'Time at which this external metadata object was created.  created_by:
            Optional[str] = None Username of external metadata object creator.'
        created_by:
          type: string
          description: 'Username of external metadata object creator.  description:
            Optional[str] = None User-provided free-form text description.'
        description:
          type: string
          description: 'User-provided free-form text description.  id: Optional[str]
            = None Unique identifier of the external metadata object.'
        id:
          type: string
          description: 'Unique identifier of the external metadata object.  metastore_id:
            Optional[str] = None Unique identifier of parent metastore.'
        metastore_id:
          type: string
          description: 'Unique identifier of parent metastore.  owner: Optional[str]
            = None Owner of the external metadata object.'
        owner:
          type: string
          description: 'Owner of the external metadata object.  properties: Optional[Dict[str,
            str]] = None A map of key-value properties attached to the external metadata
            object.'
        properties:
          type: string
          description: 'A map of key-value properties attached to the external metadata
            object.  update_time: Optional[str] = None Time at which this external
            metadata object was last modified.'
        update_time:
          type: string
          description: 'Time at which this external metadata object was last modified.  updated_by:
            Optional[str] = None Username of user who last modified external metadata
            object.'
        updated_by:
          type: string
          description: 'Username of user who last modified external metadata object.  url:
            Optional[str] = None URL associated with the external metadata object.'
        url:
          type: string
          description: 'URL associated with the external metadata object.  def as_dict(self)
            -> dict: Serializes the ExternalMetadata into a dictionary suitable for
            use as a JSON request body.'
    FailedStatus:
      type: object
      description: 'Detailed status of an online table. Shown if the online table
        is in the OFFLINE_FAILED or the

        ONLINE_PIPELINE_FAILED state.'
      properties:
        last_processed_commit_version:
          type: string
          description: The last source table Delta version that was synced to the
            online table. Note that this Delta version may only be partially synced
            to the online table. Only populated if the table is still online and available
            for serving.
        timestamp:
          type: string
          description: The timestamp of the last time any data was synchronized from
            the source table to the online table. Only populated if the table is still
            online and available for serving.
    FileEventQueue:
      type: object
      description: 'FileEventQueue(managed_aqs: ''Optional[AzureQueueStorage]'' =
        None, managed_pubsub: ''Optional[GcpPubsub]'' = None, managed_sqs: ''Optional[AwsSqsQueue]''
        = None, provided_aqs: ''Optional[AzureQueueStorage]'' = None, provided_pubsub:
        ''Optional[GcpPubsub]'' = None, provided_sqs: ''Optional[AwsSqsQueue]'' =
        None)'
      properties:
        managed_aqs:
          type: string
          description: ''
        managed_pubsub:
          type: string
          description: ''
        managed_sqs:
          type: string
          description: ''
        provided_aqs:
          type: string
          description: ''
        provided_pubsub:
          type: string
          description: ''
        provided_sqs:
          type: string
          description: ''
    ForeignKeyConstraint:
      type: object
      description: 'ForeignKeyConstraint(name: ''str'', child_columns: ''List[str]'',
        parent_table: ''str'', parent_columns: ''List[str]'', rely: ''Optional[bool]''
        = None)'
      properties:
        name:
          type: string
          description: 'The name of the constraint.  child_columns: List[str] Column
            names for this constraint.'
        child_columns:
          type: string
          description: 'Column names for this constraint.  parent_table: str The full
            name of the parent constraint.'
        parent_table:
          type: string
          description: 'The full name of the parent constraint.  parent_columns: List[str]
            Column names for this constraint.'
        parent_columns:
          type: string
          description: 'Column names for this constraint.  rely: Optional[bool] =
            None True if the constraint is RELY, false or unset if NORELY.'
        rely:
          type: string
          description: 'True if the constraint is RELY, false or unset if NORELY.  def
            as_dict(self) -> dict: Serializes the ForeignKeyConstraint into a dictionary
            suitable for use as a JSON request body.'
    FunctionArgument:
      type: object
      description: 'FunctionArgument(alias: ''Optional[str]'' = None, constant: ''Optional[str]''
        = None)'
      properties:
        alias:
          type: string
          description: 'The alias of a matched column.  constant: Optional[str] =
            None A constant literal.'
        constant:
          type: string
          description: 'A constant literal.  def as_dict(self) -> dict: Serializes
            the FunctionArgument into a dictionary suitable for use as a JSON request
            body.'
    FunctionDependency:
      type: object
      description: A function that is dependent on a SQL object.
      properties:
        function_full_name:
          type: string
          description: Full name of the dependent function, in the form of __catalog_name__.__schema_name__.__function_name__.
    FunctionInfo:
      type: object
      description: 'FunctionInfo(browse_only: ''Optional[bool]'' = None, catalog_name:
        ''Optional[str]'' = None, comment: ''Optional[str]'' = None, created_at: ''Optional[int]''
        = None, created_by: ''Optional[str]'' = None, data_type: ''Optional[ColumnTypeName]''
        = None, external_language: ''Optional[str]'' = None, external_name: ''Optional[str]''
        = None, full_data_type: ''Optional[str]'' = None, full_name: ''Optional[str]''
        = None, function_id: ''Optional[str]'' = None, input_params: ''Optional[FunctionParameterInfos]''
        = None, is_deterministic: ''Optional[bool]'' = None, is_null_call: ''Optional[bool]''
        = None, metastore_id: ''Optional[str]'' = None, name: ''Optional[str]'' =
        None, owner: ''Optional[str]'' = None, parameter_style: ''Optional[FunctionInfoParameterStyle]''
        = None, properties: ''Optional[str]'' = None, return_params: ''Optional[FunctionParameterInfos]''
        = None, routine_body: ''Optional[FunctionInfoRoutineBody]'' = None, routine_definition:
        ''Optional[str]'' = None, routine_dependencies: ''Optional[DependencyList]''
        = None, schema_name: ''Optional[str]'' = None, security_type: ''Optional[FunctionInfoSecurityType]''
        = None, specific_name: ''Optional[str]'' = None, sql_data_access: ''Optional[FunctionInfoSqlDataAccess]''
        = None, sql_path: ''Optional[str]'' = None, updated_at: ''Optional[int]''
        = None, updated_by: ''Optional[str]'' = None)'
      properties:
        browse_only:
          type: string
          description: Indicates whether the principal is limited to retrieving metadata
            for the associated object through the BROWSE privilege when include_browse
            is enabled in the request.
        catalog_name:
          type: string
          description: 'Name of parent Catalog.  comment: Optional[str] = None User-provided
            free-form text description.'
        comment:
          type: string
          description: 'User-provided free-form text description.  created_at: Optional[int]
            = None Time at which this function was created, in epoch milliseconds.'
        created_at:
          type: string
          description: 'Time at which this function was created, in epoch milliseconds.  created_by:
            Optional[str] = None Username of function creator.'
        created_by:
          type: string
          description: 'Username of function creator.  data_type: Optional[ColumnTypeName]
            = None Scalar function return data type.'
        data_type:
          type: string
          description: 'Scalar function return data type.  external_language: Optional[str]
            = None External function language.'
        external_language:
          type: string
          description: 'External function language.  external_name: Optional[str]
            = None External function name.'
        external_name:
          type: string
          description: 'External function name.  full_data_type: Optional[str] = None
            Pretty printed function data type.'
        full_data_type:
          type: string
          description: 'Pretty printed function data type.  full_name: Optional[str]
            = None Full name of Function, in form of **catalog_name**.**schema_name**.**function_name**'
        full_name:
          type: string
          description: 'Full name of Function, in form of **catalog_name**.**schema_name**.**function_name**  function_id:
            Optional[str] = None Id of Function, relative to parent schema.'
        function_id:
          type: string
          description: 'Id of Function, relative to parent schema.  input_params:
            Optional[FunctionParameterInfos] = None Function input parameters.'
        input_params:
          type: string
          description: 'Function input parameters.  is_deterministic: Optional[bool]
            = None Whether the function is deterministic.'
        is_deterministic:
          type: string
          description: 'Whether the function is deterministic.  is_null_call: Optional[bool]
            = None Function null call.'
        is_null_call:
          type: string
          description: 'Function null call.  metastore_id: Optional[str] = None Unique
            identifier of parent metastore.'
        metastore_id:
          type: string
          description: 'Unique identifier of parent metastore.  name: Optional[str]
            = None Name of function, relative to parent schema.'
        name:
          type: string
          description: 'Name of parent Catalog.  comment: Optional[str] = None User-provided
            free-form text description.'
        owner:
          type: string
          description: 'Username of current owner of the function.  parameter_style:
            Optional[FunctionInfoParameterStyle] = None Function parameter style.
            **S** is the value for SQL.'
        parameter_style:
          type: string
          description: 'Function parameter style. **S** is the value for SQL.  properties:
            Optional[str] = None JSON-serialized key-value pair map, encoded (escaped)
            as a string.'
        properties:
          type: string
          description: 'JSON-serialized key-value pair map, encoded (escaped) as a
            string.  return_params: Optional[FunctionParameterInfos] = None Table
            function return parameters.'
        return_params:
          type: string
          description: 'Table function return parameters.  routine_body: Optional[FunctionInfoRoutineBody]
            = None """Function language. When **EXTERNAL** is used, the language of
            the routine function should be specified in the **external_language**
            field, and the **return_params** of the function cannot be used (as **TABLE**
            return type is not supported), and the **sql_data_access** field must
            be **NO_SQL**.'
        routine_body:
          type: string
          description: Function language. When **EXTERNAL** is used, the language
            of the routine function should be specified in the **external_language**
            field, and the **return_params** of the function cannot be used (as **TABLE**
            return type is not supported), and the **sql_data_access** field must
            be **NO_SQL**.
        routine_definition:
          type: string
          description: 'Function body.  routine_dependencies: Optional[DependencyList]
            = None function dependencies.'
        routine_dependencies:
          type: string
          description: 'function dependencies.  schema_name: Optional[str] = None
            Name of parent Schema relative to its parent Catalog.'
        schema_name:
          type: string
          description: 'Name of parent Schema relative to its parent Catalog.  security_type:
            Optional[FunctionInfoSecurityType] = None Function security type.'
        security_type:
          type: string
          description: 'Function security type.  specific_name: Optional[str] = None
            Specific name of the function; Reserved for future use.'
        specific_name:
          type: string
          description: 'Specific name of the function; Reserved for future use.  sql_data_access:
            Optional[FunctionInfoSqlDataAccess] = None Function SQL data access.'
        sql_data_access:
          type: string
          description: 'Function SQL data access.  sql_path: Optional[str] = None
            List of schemes whose objects can be referenced without qualification.'
        sql_path:
          type: string
          description: 'List of schemes whose objects can be referenced without qualification.  updated_at:
            Optional[int] = None Time at which this function was last modified, in
            epoch milliseconds.'
        updated_at:
          type: string
          description: 'Time at which this function was last modified, in epoch milliseconds.  updated_by:
            Optional[str] = None Username of user who last modified the function.'
        updated_by:
          type: string
          description: 'Username of user who last modified the function.  def as_dict(self)
            -> dict: Serializes the FunctionInfo into a dictionary suitable for use
            as a JSON request body.'
    FunctionInfoParameterStyle:
      type: string
      description: 'Create a collection of name/value pairs.


        Example enumeration:


        >>> class Color(Enum):

        ...     RED = 1

        ...     BLUE = 2

        ...     GREEN = 3


        Access them by:


        - attribute access::


        >>> Color.RED

        <Color.RED: 1>


        - value lookup:


        >>> Color(1)

        <Color.RED: 1>


        - name lookup:


        >>> Color[''RED'']

        <Color.RED: 1>


        Enumerations can be iterated over, and know how many members they have:


        >>> len(Color)

        3


        >>> list(Color)

        [<Color.RED: 1>, <Color.BLUE: 2>, <Color.GREEN: 3>]


        Methods can be added to enumerations, and members can have their own

        attributes -- see the documentation for details.'
      enum:
      - S
    FunctionInfoRoutineBody:
      type: string
      description: 'Create a collection of name/value pairs.


        Example enumeration:


        >>> class Color(Enum):

        ...     RED = 1

        ...     BLUE = 2

        ...     GREEN = 3


        Access them by:


        - attribute access::


        >>> Color.RED

        <Color.RED: 1>


        - value lookup:


        >>> Color(1)

        <Color.RED: 1>


        - name lookup:


        >>> Color[''RED'']

        <Color.RED: 1>


        Enumerations can be iterated over, and know how many members they have:


        >>> len(Color)

        3


        >>> list(Color)

        [<Color.RED: 1>, <Color.BLUE: 2>, <Color.GREEN: 3>]


        Methods can be added to enumerations, and members can have their own

        attributes -- see the documentation for details.'
      enum:
      - EXTERNAL
      - SQL
    FunctionInfoSecurityType:
      type: string
      description: 'Create a collection of name/value pairs.


        Example enumeration:


        >>> class Color(Enum):

        ...     RED = 1

        ...     BLUE = 2

        ...     GREEN = 3


        Access them by:


        - attribute access::


        >>> Color.RED

        <Color.RED: 1>


        - value lookup:


        >>> Color(1)

        <Color.RED: 1>


        - name lookup:


        >>> Color[''RED'']

        <Color.RED: 1>


        Enumerations can be iterated over, and know how many members they have:


        >>> len(Color)

        3


        >>> list(Color)

        [<Color.RED: 1>, <Color.BLUE: 2>, <Color.GREEN: 3>]


        Methods can be added to enumerations, and members can have their own

        attributes -- see the documentation for details.'
      enum:
      - DEFINER
    FunctionInfoSqlDataAccess:
      type: string
      description: 'Create a collection of name/value pairs.


        Example enumeration:


        >>> class Color(Enum):

        ...     RED = 1

        ...     BLUE = 2

        ...     GREEN = 3


        Access them by:


        - attribute access::


        >>> Color.RED

        <Color.RED: 1>


        - value lookup:


        >>> Color(1)

        <Color.RED: 1>


        - name lookup:


        >>> Color[''RED'']

        <Color.RED: 1>


        Enumerations can be iterated over, and know how many members they have:


        >>> len(Color)

        3


        >>> list(Color)

        [<Color.RED: 1>, <Color.BLUE: 2>, <Color.GREEN: 3>]


        Methods can be added to enumerations, and members can have their own

        attributes -- see the documentation for details.'
      enum:
      - CONTAINS_SQL
      - NO_SQL
      - READS_SQL_DATA
    FunctionParameterInfo:
      type: object
      description: 'FunctionParameterInfo(name: ''str'', type_text: ''str'', type_name:
        ''ColumnTypeName'', position: ''int'', comment: ''Optional[str]'' = None,
        parameter_default: ''Optional[str]'' = None, parameter_mode: ''Optional[FunctionParameterMode]''
        = None, parameter_type: ''Optional[FunctionParameterType]'' = None, type_interval_type:
        ''Optional[str]'' = None, type_json: ''Optional[str]'' = None, type_precision:
        ''Optional[int]'' = None, type_scale: ''Optional[int]'' = None)'
      properties:
        name:
          type: string
          description: 'Name of Parameter.  type_text: str Full data type spec, SQL/catalogString
            text.'
        type_text:
          type: string
          description: 'Full data type spec, SQL/catalogString text.  type_name: ColumnTypeName
            Name of type (INT, STRUCT, MAP, etc.)'
        type_name:
          type: string
          description: 'Name of type (INT, STRUCT, MAP, etc.)  position: int Ordinal
            position of column (starting at position 0).'
        position:
          type: string
          description: 'Ordinal position of column (starting at position 0).  comment:
            Optional[str] = None User-provided free-form text description.'
        comment:
          type: string
          description: 'User-provided free-form text description.  parameter_default:
            Optional[str] = None Default value of the parameter.'
        parameter_default:
          type: string
          description: 'Default value of the parameter.  parameter_mode: Optional[FunctionParameterMode]
            = None Function parameter mode.'
        parameter_mode:
          type: string
          description: 'Function parameter mode.  parameter_type: Optional[FunctionParameterType]
            = None Function parameter type.'
        parameter_type:
          type: string
          description: 'Function parameter type.  type_interval_type: Optional[str]
            = None Format of IntervalType.'
        type_interval_type:
          type: string
          description: 'Format of IntervalType.  type_json: Optional[str] = None Full
            data type spec, JSON-serialized.'
        type_json:
          type: string
          description: 'Full data type spec, JSON-serialized.  type_precision: Optional[int]
            = None Digits of precision; required on Create for DecimalTypes.'
        type_precision:
          type: string
          description: 'Digits of precision; required on Create for DecimalTypes.  type_scale:
            Optional[int] = None Digits to right of decimal; Required on Create for
            DecimalTypes.'
        type_scale:
          type: string
          description: 'Digits to right of decimal; Required on Create for DecimalTypes.  def
            as_dict(self) -> dict: Serializes the FunctionParameterInfo into a dictionary
            suitable for use as a JSON request body.'
    FunctionParameterInfos:
      type: object
      description: 'FunctionParameterInfos(parameters: ''Optional[List[FunctionParameterInfo]]''
        = None)'
      properties:
        parameters:
          type: string
          description: ''
    FunctionParameterMode:
      type: string
      description: 'Create a collection of name/value pairs.


        Example enumeration:


        >>> class Color(Enum):

        ...     RED = 1

        ...     BLUE = 2

        ...     GREEN = 3


        Access them by:


        - attribute access::


        >>> Color.RED

        <Color.RED: 1>


        - value lookup:


        >>> Color(1)

        <Color.RED: 1>


        - name lookup:


        >>> Color[''RED'']

        <Color.RED: 1>


        Enumerations can be iterated over, and know how many members they have:


        >>> len(Color)

        3


        >>> list(Color)

        [<Color.RED: 1>, <Color.BLUE: 2>, <Color.GREEN: 3>]


        Methods can be added to enumerations, and members can have their own

        attributes -- see the documentation for details.'
      enum:
      - IN
    FunctionParameterType:
      type: string
      description: 'Create a collection of name/value pairs.


        Example enumeration:


        >>> class Color(Enum):

        ...     RED = 1

        ...     BLUE = 2

        ...     GREEN = 3


        Access them by:


        - attribute access::


        >>> Color.RED

        <Color.RED: 1>


        - value lookup:


        >>> Color(1)

        <Color.RED: 1>


        - name lookup:


        >>> Color[''RED'']

        <Color.RED: 1>


        Enumerations can be iterated over, and know how many members they have:


        >>> len(Color)

        3


        >>> list(Color)

        [<Color.RED: 1>, <Color.BLUE: 2>, <Color.GREEN: 3>]


        Methods can be added to enumerations, and members can have their own

        attributes -- see the documentation for details.'
      enum:
      - COLUMN
      - PARAM
    GcpOauthToken:
      type: object
      description: 'GCP temporary credentials for API authentication. Read more at

        https://developers.google.com/identity/protocols/oauth2/service-account'
      properties:
        oauth_token:
          type: string
          description: ''
    GcpPubsub:
      type: object
      description: 'GcpPubsub(managed_resource_id: ''Optional[str]'' = None, subscription_name:
        ''Optional[str]'' = None)'
      properties:
        managed_resource_id:
          type: string
          description: 'Unique identifier included in the name of file events managed
            cloud resources.  subscription_name: Optional[str] = None """The Pub/Sub
            subscription name in the format projects/{project}/subscriptions/{subscription
            name} Required for provided_pubsub.'
        subscription_name:
          type: string
          description: The Pub/Sub subscription name in the format projects/{project}/subscriptions/{subscription
            name} Required for provided_pubsub.
    GenerateTemporaryPathCredentialResponse:
      type: object
      description: 'GenerateTemporaryPathCredentialResponse(aws_temp_credentials:
        ''Optional[AwsCredentials]'' = None, azure_aad: ''Optional[AzureActiveDirectoryToken]''
        = None, azure_user_delegation_sas: ''Optional[AzureUserDelegationSas]'' =
        None, expiration_time: ''Optional[int]'' = None, gcp_oauth_token: ''Optional[GcpOauthToken]''
        = None, r2_temp_credentials: ''Optional[R2Credentials]'' = None, url: ''Optional[str]''
        = None)'
      properties:
        aws_temp_credentials:
          type: string
          description: ''
        azure_aad:
          type: string
          description: ''
        azure_user_delegation_sas:
          type: string
          description: ''
        expiration_time:
          type: string
          description: Server time when the credential will expire, in epoch milliseconds.
            The API client is advised to cache the credential given this expiration
            time.
        gcp_oauth_token:
          type: string
          description: ''
        r2_temp_credentials:
          type: string
          description: ''
        url:
          type: string
          description: 'The URL of the storage path accessible by the temporary credential.  def
            as_dict(self) -> dict: Serializes the GenerateTemporaryPathCredentialResponse
            into a dictionary suitable for use as a JSON request body.'
    GenerateTemporaryServiceCredentialAzureOptions:
      type: object
      description: The Azure cloud options to customize the requested temporary credential
      properties:
        resources:
          type: string
          description: The resources to which the temporary Azure credential should
            apply. These resources are the scopes that are passed to the token provider
            (see https://learn.microsoft.com/python/api/azure-core/azure.core.credentials.tokencredential?view=azure-python)
    GenerateTemporaryServiceCredentialGcpOptions:
      type: object
      description: The GCP cloud options to customize the requested temporary credential
      properties:
        scopes:
          type: string
          description: The scopes to which the temporary GCP credential should apply.
            These resources are the scopes that are passed to the token provider (see
            https://google-auth.readthedocs.io/en/latest/reference/google.auth.html#google.auth.credentials.Credentials)
    GenerateTemporaryTableCredentialResponse:
      type: object
      description: 'GenerateTemporaryTableCredentialResponse(aws_temp_credentials:
        ''Optional[AwsCredentials]'' = None, azure_aad: ''Optional[AzureActiveDirectoryToken]''
        = None, azure_user_delegation_sas: ''Optional[AzureUserDelegationSas]'' =
        None, expiration_time: ''Optional[int]'' = None, gcp_oauth_token: ''Optional[GcpOauthToken]''
        = None, r2_temp_credentials: ''Optional[R2Credentials]'' = None, url: ''Optional[str]''
        = None)'
      properties:
        aws_temp_credentials:
          type: string
          description: ''
        azure_aad:
          type: string
          description: ''
        azure_user_delegation_sas:
          type: string
          description: ''
        expiration_time:
          type: string
          description: Server time when the credential will expire, in epoch milliseconds.
            The API client is advised to cache the credential given this expiration
            time.
        gcp_oauth_token:
          type: string
          description: ''
        r2_temp_credentials:
          type: string
          description: ''
        url:
          type: string
          description: 'The URL of the storage path accessible by the temporary credential.  def
            as_dict(self) -> dict: Serializes the GenerateTemporaryTableCredentialResponse
            into a dictionary suitable for use as a JSON request body.'
    GetCatalogWorkspaceBindingsResponse:
      type: object
      description: 'GetCatalogWorkspaceBindingsResponse(workspaces: ''Optional[List[int]]''
        = None)'
      properties:
        workspaces:
          type: string
          description: 'A list of workspace IDs  def as_dict(self) -> dict: Serializes
            the GetCatalogWorkspaceBindingsResponse into a dictionary suitable for
            use as a JSON request body.'
    GetMetastoreSummaryResponse:
      type: object
      description: 'GetMetastoreSummaryResponse(cloud: ''Optional[str]'' = None, created_at:
        ''Optional[int]'' = None, created_by: ''Optional[str]'' = None, default_data_access_config_id:
        ''Optional[str]'' = None, delta_sharing_organization_name: ''Optional[str]''
        = None, delta_sharing_recipient_token_lifetime_in_seconds: ''Optional[int]''
        = None, delta_sharing_scope: ''Optional[DeltaSharingScopeEnum]'' = None, external_access_enabled:
        ''Optional[bool]'' = None, global_metastore_id: ''Optional[str]'' = None,
        metastore_id: ''Optional[str]'' = None, name: ''Optional[str]'' = None, owner:
        ''Optional[str]'' = None, privilege_model_version: ''Optional[str]'' = None,
        region: ''Optional[str]'' = None, storage_root: ''Optional[str]'' = None,
        storage_root_credential_id: ''Optional[str]'' = None, storage_root_credential_name:
        ''Optional[str]'' = None, updated_at: ''Optional[int]'' = None, updated_by:
        ''Optional[str]'' = None)'
      properties:
        cloud:
          type: string
          description: 'Cloud vendor of the metastore home shard (e.g., `aws`, `azure`,
            `gcp`).  created_at: Optional[int] = None Time at which this metastore
            was created, in epoch milliseconds.'
        created_at:
          type: string
          description: 'Time at which this metastore was created, in epoch milliseconds.  created_by:
            Optional[str] = None Username of metastore creator.'
        created_by:
          type: string
          description: 'Username of metastore creator.  default_data_access_config_id:
            Optional[str] = None Unique identifier of the metastore''s (Default) Data
            Access Configuration.'
        default_data_access_config_id:
          type: string
          description: 'Unique identifier of the metastore''s (Default) Data Access
            Configuration.  delta_sharing_organization_name: Optional[str] = None
            """The organization name of a Delta Sharing entity, to be used in Databricks-to-Databricks
            Delta Sharing as the official name.'
        delta_sharing_organization_name:
          type: string
          description: The organization name of a Delta Sharing entity, to be used
            in Databricks-to-Databricks Delta Sharing as the official name.
        delta_sharing_recipient_token_lifetime_in_seconds:
          type: string
          description: 'The lifetime of delta sharing recipient token in seconds.  delta_sharing_scope:
            Optional[DeltaSharingScopeEnum] = None The scope of Delta Sharing enabled
            for the metastore.'
        delta_sharing_scope:
          type: string
          description: 'The scope of Delta Sharing enabled for the metastore.  external_access_enabled:
            Optional[bool] = None Whether to allow non-DBR clients to directly access
            entities under the metastore.'
        external_access_enabled:
          type: string
          description: 'Whether to allow non-DBR clients to directly access entities
            under the metastore.  global_metastore_id: Optional[str] = None Globally
            unique metastore ID across clouds and regions, of the form `cloud:region:metastore_id`.'
        global_metastore_id:
          type: string
          description: 'Globally unique metastore ID across clouds and regions, of
            the form `cloud:region:metastore_id`.  metastore_id: Optional[str] = None
            Unique identifier of metastore.'
        metastore_id:
          type: string
          description: 'Globally unique metastore ID across clouds and regions, of
            the form `cloud:region:metastore_id`.  metastore_id: Optional[str] = None
            Unique identifier of metastore.'
        name:
          type: string
          description: The organization name of a Delta Sharing entity, to be used
            in Databricks-to-Databricks Delta Sharing as the official name.
        owner:
          type: string
          description: 'The owner of the metastore.  privilege_model_version: Optional[str]
            = None Privilege model version of the metastore, of the form `major.minor`
            (e.g., `1.0`).'
        privilege_model_version:
          type: string
          description: 'Privilege model version of the metastore, of the form `major.minor`
            (e.g., `1.0`).  region: Optional[str] = None Cloud region which the metastore
            serves (e.g., `us-west-2`, `westus`).'
        region:
          type: string
          description: 'Cloud region which the metastore serves (e.g., `us-west-2`,
            `westus`).  storage_root: Optional[str] = None The storage root URL for
            metastore'
        storage_root:
          type: string
          description: 'The storage root URL for metastore  storage_root_credential_id:
            Optional[str] = None UUID of storage credential to access the metastore
            storage_root.'
        storage_root_credential_id:
          type: string
          description: 'UUID of storage credential to access the metastore storage_root.  storage_root_credential_name:
            Optional[str] = None Name of the storage credential to access the metastore
            storage_root.'
        storage_root_credential_name:
          type: string
          description: 'Name of the storage credential to access the metastore storage_root.  updated_at:
            Optional[int] = None Time at which the metastore was last modified, in
            epoch milliseconds.'
        updated_at:
          type: string
          description: 'Time at which the metastore was last modified, in epoch milliseconds.  updated_by:
            Optional[str] = None Username of user who last modified the metastore.'
        updated_by:
          type: string
          description: 'Username of user who last modified the metastore.  def as_dict(self)
            -> dict: Serializes the GetMetastoreSummaryResponse into a dictionary
            suitable for use as a JSON request body.'
    GetPermissionsResponse:
      type: object
      description: 'GetPermissionsResponse(next_page_token: ''Optional[str]'' = None,
        privilege_assignments: ''Optional[List[PrivilegeAssignment]]'' = None)'
      properties:
        next_page_token:
          type: string
          description: Opaque token to retrieve the next page of results. Absent if
            there are no more pages. __page_token__ should be set to this value for
            the next request (for the next page of results).
        privilege_assignments:
          type: string
          description: 'The privileges assigned to each principal  def as_dict(self)
            -> dict: Serializes the GetPermissionsResponse into a dictionary suitable
            for use as a JSON request body.'
    GetQuotaResponse:
      type: object
      description: 'GetQuotaResponse(quota_info: ''Optional[QuotaInfo]'' = None)'
      properties:
        quota_info:
          type: string
          description: 'The returned QuotaInfo.  def as_dict(self) -> dict: Serializes
            the GetQuotaResponse into a dictionary suitable for use as a JSON request
            body.'
    GetWorkspaceBindingsResponse:
      type: object
      description: 'GetWorkspaceBindingsResponse(bindings: ''Optional[List[WorkspaceBinding]]''
        = None, next_page_token: ''Optional[str]'' = None)'
      properties:
        bindings:
          type: string
          description: 'List of workspace bindings  next_page_token: Optional[str]
            = None """Opaque token to retrieve the next page of results. Absent if
            there are no more pages. __page_token__ should be set to this value for
            the next request (for the next page of results).'
        next_page_token:
          type: string
          description: Opaque token to retrieve the next page of results. Absent if
            there are no more pages. __page_token__ should be set to this value for
            the next request (for the next page of results).
    IsolationMode:
      type: string
      description: 'Create a collection of name/value pairs.


        Example enumeration:


        >>> class Color(Enum):

        ...     RED = 1

        ...     BLUE = 2

        ...     GREEN = 3


        Access them by:


        - attribute access::


        >>> Color.RED

        <Color.RED: 1>


        - value lookup:


        >>> Color(1)

        <Color.RED: 1>


        - name lookup:


        >>> Color[''RED'']

        <Color.RED: 1>


        Enumerations can be iterated over, and know how many members they have:


        >>> len(Color)

        3


        >>> list(Color)

        [<Color.RED: 1>, <Color.BLUE: 2>, <Color.GREEN: 3>]


        Methods can be added to enumerations, and members can have their own

        attributes -- see the documentation for details.'
      enum:
      - ISOLATION_MODE_ISOLATED
      - ISOLATION_MODE_OPEN
    LineageDirection:
      type: string
      description: 'Create a collection of name/value pairs.


        Example enumeration:


        >>> class Color(Enum):

        ...     RED = 1

        ...     BLUE = 2

        ...     GREEN = 3


        Access them by:


        - attribute access::


        >>> Color.RED

        <Color.RED: 1>


        - value lookup:


        >>> Color(1)

        <Color.RED: 1>


        - name lookup:


        >>> Color[''RED'']

        <Color.RED: 1>


        Enumerations can be iterated over, and know how many members they have:


        >>> len(Color)

        3


        >>> list(Color)

        [<Color.RED: 1>, <Color.BLUE: 2>, <Color.GREEN: 3>]


        Methods can be added to enumerations, and members can have their own

        attributes -- see the documentation for details.'
      enum:
      - DOWNSTREAM
      - UPSTREAM
    ListAccountMetastoreAssignmentsResponse:
      type: object
      description: The metastore assignments were successfully returned.
      properties:
        workspace_ids:
          type: string
          description: ''
    ListAccountStorageCredentialsResponse:
      type: object
      description: The metastore storage credentials were successfully returned.
      properties:
        storage_credentials:
          type: string
          description: 'An array of metastore storage credentials.  def as_dict(self)
            -> dict: Serializes the ListAccountStorageCredentialsResponse into a dictionary
            suitable for use as a JSON request body.'
    ListCatalogsResponse:
      type: object
      description: 'ListCatalogsResponse(catalogs: ''Optional[List[CatalogInfo]]''
        = None, next_page_token: ''Optional[str]'' = None)'
      properties:
        catalogs:
          type: string
          description: 'An array of catalog information objects.  next_page_token:
            Optional[str] = None """Opaque token to retrieve the next page of results.
            Absent if there are no more pages. __page_token__ should be set to this
            value for the next request (for the next page of results).'
        next_page_token:
          type: string
          description: Opaque token to retrieve the next page of results. Absent if
            there are no more pages. __page_token__ should be set to this value for
            the next request (for the next page of results).
    ListConnectionsResponse:
      type: object
      description: 'ListConnectionsResponse(connections: ''Optional[List[ConnectionInfo]]''
        = None, next_page_token: ''Optional[str]'' = None)'
      properties:
        connections:
          type: string
          description: 'An array of connection information objects.  next_page_token:
            Optional[str] = None """Opaque token to retrieve the next page of results.
            Absent if there are no more pages. __page_token__ should be set to this
            value for the next request (for the next page of results).'
        next_page_token:
          type: string
          description: Opaque token to retrieve the next page of results. Absent if
            there are no more pages. __page_token__ should be set to this value for
            the next request (for the next page of results).
    ListCredentialsResponse:
      type: object
      description: 'ListCredentialsResponse(credentials: ''Optional[List[CredentialInfo]]''
        = None, next_page_token: ''Optional[str]'' = None)'
      properties:
        credentials:
          type: string
          description: ''
        next_page_token:
          type: string
          description: Opaque token to retrieve the next page of results. Absent if
            there are no more pages. __page_token__ should be set to this value for
            the next request (for the next page of results).
    ListEntityTagAssignmentsResponse:
      type: object
      description: 'ListEntityTagAssignmentsResponse(next_page_token: ''Optional[str]''
        = None, tag_assignments: ''Optional[List[EntityTagAssignment]]'' = None)'
      properties:
        next_page_token:
          type: string
          description: 'Optional. Pagination token for retrieving the next page of
            results  tag_assignments: Optional[List[EntityTagAssignment]] = None The
            list of tag assignments'
        tag_assignments:
          type: string
          description: 'The list of tag assignments  def as_dict(self) -> dict: Serializes
            the ListEntityTagAssignmentsResponse into a dictionary suitable for use
            as a JSON request body.'
    ListExternalLineageRelationshipsResponse:
      type: object
      description: 'ListExternalLineageRelationshipsResponse(external_lineage_relationships:
        ''Optional[List[ExternalLineageInfo]]'' = None, next_page_token: ''Optional[str]''
        = None)'
      properties:
        external_lineage_relationships:
          type: string
          description: ''
        next_page_token:
          type: string
          description: ''
    ListExternalLocationsResponse:
      type: object
      description: 'ListExternalLocationsResponse(external_locations: ''Optional[List[ExternalLocationInfo]]''
        = None, next_page_token: ''Optional[str]'' = None)'
      properties:
        external_locations:
          type: string
          description: 'An array of external locations.  next_page_token: Optional[str]
            = None """Opaque token to retrieve the next page of results. Absent if
            there are no more pages. __page_token__ should be set to this value for
            the next request (for the next page of results).'
        next_page_token:
          type: string
          description: Opaque token to retrieve the next page of results. Absent if
            there are no more pages. __page_token__ should be set to this value for
            the next request (for the next page of results).
    ListExternalMetadataResponse:
      type: object
      description: 'ListExternalMetadataResponse(external_metadata: ''Optional[List[ExternalMetadata]]''
        = None, next_page_token: ''Optional[str]'' = None)'
      properties:
        external_metadata:
          type: string
          description: ''
        next_page_token:
          type: string
          description: ''
    ListFunctionsResponse:
      type: object
      description: 'ListFunctionsResponse(functions: ''Optional[List[FunctionInfo]]''
        = None, next_page_token: ''Optional[str]'' = None)'
      properties:
        functions:
          type: string
          description: 'An array of function information objects.  next_page_token:
            Optional[str] = None """Opaque token to retrieve the next page of results.
            Absent if there are no more pages. __page_token__ should be set to this
            value for the next request (for the next page of results).'
        next_page_token:
          type: string
          description: Opaque token to retrieve the next page of results. Absent if
            there are no more pages. __page_token__ should be set to this value for
            the next request (for the next page of results).
    ListMetastoresResponse:
      type: object
      description: 'ListMetastoresResponse(metastores: ''Optional[List[MetastoreInfo]]''
        = None, next_page_token: ''Optional[str]'' = None)'
      properties:
        metastores:
          type: string
          description: 'An array of metastore information objects.  next_page_token:
            Optional[str] = None """Opaque token to retrieve the next page of results.
            Absent if there are no more pages. __page_token__ should be set to this
            value for the next request (for the next page of results).'
        next_page_token:
          type: string
          description: Opaque token to retrieve the next page of results. Absent if
            there are no more pages. __page_token__ should be set to this value for
            the next request (for the next page of results).
    ListModelVersionsResponse:
      type: object
      description: 'ListModelVersionsResponse(model_versions: ''Optional[List[ModelVersionInfo]]''
        = None, next_page_token: ''Optional[str]'' = None)'
      properties:
        model_versions:
          type: string
          description: ''
        next_page_token:
          type: string
          description: Opaque token to retrieve the next page of results. Absent if
            there are no more pages. __page_token__ should be set to this value for
            the next request (for the next page of results).
    ListPoliciesResponse:
      type: object
      description: 'ListPoliciesResponse(next_page_token: ''Optional[str]'' = None,
        policies: ''Optional[List[PolicyInfo]]'' = None)'
      properties:
        next_page_token:
          type: string
          description: Optional opaque token for continuing pagination. `page_token`
            should be set to this value for the next request to retrieve the next
            page of results.
        policies:
          type: string
          description: 'The list of retrieved policies.  def as_dict(self) -> dict:
            Serializes the ListPoliciesResponse into a dictionary suitable for use
            as a JSON request body.'
    ListQuotasResponse:
      type: object
      description: 'ListQuotasResponse(next_page_token: ''Optional[str]'' = None,
        quotas: ''Optional[List[QuotaInfo]]'' = None)'
      properties:
        next_page_token:
          type: string
          description: Opaque token to retrieve the next page of results. Absent if
            there are no more pages. __page_token__ should be set to this value for
            the next request.
        quotas:
          type: string
          description: 'An array of returned QuotaInfos.  def as_dict(self) -> dict:
            Serializes the ListQuotasResponse into a dictionary suitable for use as
            a JSON request body.'
    ListRegisteredModelsResponse:
      type: object
      description: 'ListRegisteredModelsResponse(next_page_token: ''Optional[str]''
        = None, registered_models: ''Optional[List[RegisteredModelInfo]]'' = None)'
      properties:
        next_page_token:
          type: string
          description: Opaque token for pagination. Omitted if there are no more results.
            page_token should be set to this value for fetching the next page.
        registered_models:
          type: string
          description: ''
    ListSchemasResponse:
      type: object
      description: 'ListSchemasResponse(next_page_token: ''Optional[str]'' = None,
        schemas: ''Optional[List[SchemaInfo]]'' = None)'
      properties:
        next_page_token:
          type: string
          description: Opaque token to retrieve the next page of results. Absent if
            there are no more pages. __page_token__ should be set to this value for
            the next request (for the next page of results).
        schemas:
          type: string
          description: 'An array of schema information objects.  def as_dict(self)
            -> dict: Serializes the ListSchemasResponse into a dictionary suitable
            for use as a JSON request body.'
    ListStorageCredentialsResponse:
      type: object
      description: 'ListStorageCredentialsResponse(next_page_token: ''Optional[str]''
        = None, storage_credentials: ''Optional[List[StorageCredentialInfo]]'' = None)'
      properties:
        next_page_token:
          type: string
          description: Opaque token to retrieve the next page of results. Absent if
            there are no more pages. __page_token__ should be set to this value for
            the next request (for the next page of results).
        storage_credentials:
          type: string
          description: ''
    ListSystemSchemasResponse:
      type: object
      description: 'ListSystemSchemasResponse(next_page_token: ''Optional[str]'' =
        None, schemas: ''Optional[List[SystemSchemaInfo]]'' = None)'
      properties:
        next_page_token:
          type: string
          description: Opaque token to retrieve the next page of results. Absent if
            there are no more pages. __page_token__ should be set to this value for
            the next request (for the next page of results).
        schemas:
          type: string
          description: 'An array of system schema information objects.  def as_dict(self)
            -> dict: Serializes the ListSystemSchemasResponse into a dictionary suitable
            for use as a JSON request body.'
    ListTableSummariesResponse:
      type: object
      description: 'ListTableSummariesResponse(next_page_token: ''Optional[str]''
        = None, tables: ''Optional[List[TableSummary]]'' = None)'
      properties:
        next_page_token:
          type: string
          description: Opaque token to retrieve the next page of results. Absent if
            there are no more pages. __page_token__ should be set to this value for
            the next request (for the next page of results).
        tables:
          type: string
          description: 'List of table summaries.  def as_dict(self) -> dict: Serializes
            the ListTableSummariesResponse into a dictionary suitable for use as a
            JSON request body.'
    ListTablesResponse:
      type: object
      description: 'ListTablesResponse(next_page_token: ''Optional[str]'' = None,
        tables: ''Optional[List[TableInfo]]'' = None)'
      properties:
        next_page_token:
          type: string
          description: Opaque token to retrieve the next page of results. Absent if
            there are no more pages. __page_token__ should be set to this value for
            the next request (for the next page of results).
        tables:
          type: string
          description: 'An array of table information objects.  def as_dict(self)
            -> dict: Serializes the ListTablesResponse into a dictionary suitable
            for use as a JSON request body.'
    ListVolumesResponseContent:
      type: object
      description: 'ListVolumesResponseContent(next_page_token: ''Optional[str]''
        = None, volumes: ''Optional[List[VolumeInfo]]'' = None)'
      properties:
        next_page_token:
          type: string
          description: Opaque token to retrieve the next page of results. Absent if
            there are no more pages. __page_token__ should be set to this value for
            the next request to retrieve the next page of results.
        volumes:
          type: string
          description: ''
    MatchColumn:
      type: object
      description: 'MatchColumn(alias: ''Optional[str]'' = None, condition: ''Optional[str]''
        = None)'
      properties:
        alias:
          type: string
          description: 'Optional alias of the matched column.  condition: Optional[str]
            = None The condition expression used to match a table column.'
        condition:
          type: string
          description: 'The condition expression used to match a table column.  def
            as_dict(self) -> dict: Serializes the MatchColumn into a dictionary suitable
            for use as a JSON request body.'
    MatchType:
      type: string
      description: The artifact pattern matching type
      enum:
      - PREFIX_MATCH
    MetastoreAssignment:
      type: object
      description: 'MetastoreAssignment(workspace_id: ''int'', metastore_id: ''str'',
        default_catalog_name: ''Optional[str]'' = None)'
      properties:
        workspace_id:
          type: string
          description: 'The unique ID of the Databricks workspace.  metastore_id:
            str The unique ID of the metastore.'
        metastore_id:
          type: string
          description: 'The unique ID of the metastore.  default_catalog_name: Optional[str]
            = None """The name of the default catalog in the metastore. This field
            is deprecated. Please use "Default Namespace API" to configure the default
            catalog for a Databricks workspace.'
        default_catalog_name:
          type: string
          description: The name of the default catalog in the metastore. This field
            is deprecated. Please use "Default Namespace API" to configure the default
            catalog for a Databricks workspace.
    MetastoreInfo:
      type: object
      description: 'MetastoreInfo(cloud: ''Optional[str]'' = None, created_at: ''Optional[int]''
        = None, created_by: ''Optional[str]'' = None, default_data_access_config_id:
        ''Optional[str]'' = None, delta_sharing_organization_name: ''Optional[str]''
        = None, delta_sharing_recipient_token_lifetime_in_seconds: ''Optional[int]''
        = None, delta_sharing_scope: ''Optional[DeltaSharingScopeEnum]'' = None, external_access_enabled:
        ''Optional[bool]'' = None, global_metastore_id: ''Optional[str]'' = None,
        metastore_id: ''Optional[str]'' = None, name: ''Optional[str]'' = None, owner:
        ''Optional[str]'' = None, privilege_model_version: ''Optional[str]'' = None,
        region: ''Optional[str]'' = None, storage_root: ''Optional[str]'' = None,
        storage_root_credential_id: ''Optional[str]'' = None, storage_root_credential_name:
        ''Optional[str]'' = None, updated_at: ''Optional[int]'' = None, updated_by:
        ''Optional[str]'' = None)'
      properties:
        cloud:
          type: string
          description: 'Cloud vendor of the metastore home shard (e.g., `aws`, `azure`,
            `gcp`).  created_at: Optional[int] = None Time at which this metastore
            was created, in epoch milliseconds.'
        created_at:
          type: string
          description: 'Time at which this metastore was created, in epoch milliseconds.  created_by:
            Optional[str] = None Username of metastore creator.'
        created_by:
          type: string
          description: 'Username of metastore creator.  default_data_access_config_id:
            Optional[str] = None Unique identifier of the metastore''s (Default) Data
            Access Configuration.'
        default_data_access_config_id:
          type: string
          description: 'Unique identifier of the metastore''s (Default) Data Access
            Configuration.  delta_sharing_organization_name: Optional[str] = None
            """The organization name of a Delta Sharing entity, to be used in Databricks-to-Databricks
            Delta Sharing as the official name.'
        delta_sharing_organization_name:
          type: string
          description: The organization name of a Delta Sharing entity, to be used
            in Databricks-to-Databricks Delta Sharing as the official name.
        delta_sharing_recipient_token_lifetime_in_seconds:
          type: string
          description: 'The lifetime of delta sharing recipient token in seconds.  delta_sharing_scope:
            Optional[DeltaSharingScopeEnum] = None The scope of Delta Sharing enabled
            for the metastore.'
        delta_sharing_scope:
          type: string
          description: 'The scope of Delta Sharing enabled for the metastore.  external_access_enabled:
            Optional[bool] = None Whether to allow non-DBR clients to directly access
            entities under the metastore.'
        external_access_enabled:
          type: string
          description: 'Whether to allow non-DBR clients to directly access entities
            under the metastore.  global_metastore_id: Optional[str] = None Globally
            unique metastore ID across clouds and regions, of the form `cloud:region:metastore_id`.'
        global_metastore_id:
          type: string
          description: 'Globally unique metastore ID across clouds and regions, of
            the form `cloud:region:metastore_id`.  metastore_id: Optional[str] = None
            Unique identifier of metastore.'
        metastore_id:
          type: string
          description: 'Globally unique metastore ID across clouds and regions, of
            the form `cloud:region:metastore_id`.  metastore_id: Optional[str] = None
            Unique identifier of metastore.'
        name:
          type: string
          description: The organization name of a Delta Sharing entity, to be used
            in Databricks-to-Databricks Delta Sharing as the official name.
        owner:
          type: string
          description: 'The owner of the metastore.  privilege_model_version: Optional[str]
            = None Privilege model version of the metastore, of the form `major.minor`
            (e.g., `1.0`).'
        privilege_model_version:
          type: string
          description: 'Privilege model version of the metastore, of the form `major.minor`
            (e.g., `1.0`).  region: Optional[str] = None Cloud region which the metastore
            serves (e.g., `us-west-2`, `westus`).'
        region:
          type: string
          description: 'Cloud region which the metastore serves (e.g., `us-west-2`,
            `westus`).  storage_root: Optional[str] = None The storage root URL for
            metastore'
        storage_root:
          type: string
          description: 'The storage root URL for metastore  storage_root_credential_id:
            Optional[str] = None UUID of storage credential to access the metastore
            storage_root.'
        storage_root_credential_id:
          type: string
          description: 'UUID of storage credential to access the metastore storage_root.  storage_root_credential_name:
            Optional[str] = None Name of the storage credential to access the metastore
            storage_root.'
        storage_root_credential_name:
          type: string
          description: 'Name of the storage credential to access the metastore storage_root.  updated_at:
            Optional[int] = None Time at which the metastore was last modified, in
            epoch milliseconds.'
        updated_at:
          type: string
          description: 'Time at which the metastore was last modified, in epoch milliseconds.  updated_by:
            Optional[str] = None Username of user who last modified the metastore.'
        updated_by:
          type: string
          description: 'Username of user who last modified the metastore.  def as_dict(self)
            -> dict: Serializes the MetastoreInfo into a dictionary suitable for use
            as a JSON request body.'
    ModelVersionInfo:
      type: object
      description: 'ModelVersionInfo(aliases: ''Optional[List[RegisteredModelAlias]]''
        = None, catalog_name: ''Optional[str]'' = None, comment: ''Optional[str]''
        = None, created_at: ''Optional[int]'' = None, created_by: ''Optional[str]''
        = None, id: ''Optional[str]'' = None, metastore_id: ''Optional[str]'' = None,
        model_name: ''Optional[str]'' = None, model_version_dependencies: ''Optional[DependencyList]''
        = None, run_id: ''Optional[str]'' = None, run_workspace_id: ''Optional[int]''
        = None, schema_name: ''Optional[str]'' = None, source: ''Optional[str]'' =
        None, status: ''Optional[ModelVersionInfoStatus]'' = None, storage_location:
        ''Optional[str]'' = None, updated_at: ''Optional[int]'' = None, updated_by:
        ''Optional[str]'' = None, version: ''Optional[int]'' = None)'
      properties:
        aliases:
          type: string
          description: 'List of aliases associated with the model version  catalog_name:
            Optional[str] = None The name of the catalog containing the model version'
        catalog_name:
          type: string
          description: 'The name of the catalog containing the model version  comment:
            Optional[str] = None The comment attached to the model version'
        comment:
          type: string
          description: 'The comment attached to the model version  created_at: Optional[int]
            = None  created_by: Optional[str] = None The identifier of the user who
            created the model version'
        created_at:
          type: string
          description: ''
        created_by:
          type: string
          description: 'The identifier of the user who created the model version  id:
            Optional[str] = None The unique identifier of the model version'
        id:
          type: string
          description: 'The unique identifier of the model version  metastore_id:
            Optional[str] = None The unique identifier of the metastore containing
            the model version'
        metastore_id:
          type: string
          description: 'The unique identifier of the metastore containing the model
            version  model_name: Optional[str] = None The name of the parent registered
            model of the model version, relative to parent schema'
        model_name:
          type: string
          description: 'The name of the parent registered model of the model version,
            relative to parent schema  model_version_dependencies: Optional[DependencyList]
            = None Model version dependencies, for feature-store packaged models'
        model_version_dependencies:
          type: string
          description: 'Model version dependencies, for feature-store packaged models  run_id:
            Optional[str] = None """MLflow run ID used when creating the model version,
            if ``source`` was generated by an experiment run stored in an MLflow tracking
            server'
        run_id:
          type: string
          description: MLflow run ID used when creating the model version, if ``source``
            was generated by an experiment run stored in an MLflow tracking server
        run_workspace_id:
          type: string
          description: ID of the Databricks workspace containing the MLflow run that
            generated this model version, if applicable
        schema_name:
          type: string
          description: 'The name of the schema containing the model version, relative
            to parent catalog  source: Optional[str] = None URI indicating the location
            of the source artifacts (files) for the model version'
        source:
          type: string
          description: 'URI indicating the location of the source artifacts (files)
            for the model version  status: Optional[ModelVersionInfoStatus] = None
            """Current status of the model version. Newly created model versions start
            in PENDING_REGISTRATION status, then move to READY status once the model
            version files are uploaded and the model version is finalized. Only model
            versions in READY status can be loaded for inference or served.'
        status:
          type: string
          description: Current status of the model version. Newly created model versions
            start in PENDING_REGISTRATION status, then move to READY status once the
            model version files are uploaded and the model version is finalized. Only
            model versions in READY status can be loaded for inference or served.
        storage_location:
          type: string
          description: 'The storage location on the cloud under which model version
            data files are stored  updated_at: Optional[int] = None  updated_by: Optional[str]
            = None The identifier of the user who updated the model version last time'
        updated_at:
          type: string
          description: ''
        updated_by:
          type: string
          description: 'The identifier of the user who updated the model version last
            time  version: Optional[int] = None Integer model version number, used
            to reference the model version in API requests.'
        version:
          type: string
          description: 'Integer model version number, used to reference the model
            version in API requests.  def as_dict(self) -> dict: Serializes the ModelVersionInfo
            into a dictionary suitable for use as a JSON request body.'
    ModelVersionInfoStatus:
      type: string
      description: 'Create a collection of name/value pairs.


        Example enumeration:


        >>> class Color(Enum):

        ...     RED = 1

        ...     BLUE = 2

        ...     GREEN = 3


        Access them by:


        - attribute access::


        >>> Color.RED

        <Color.RED: 1>


        - value lookup:


        >>> Color(1)

        <Color.RED: 1>


        - name lookup:


        >>> Color[''RED'']

        <Color.RED: 1>


        Enumerations can be iterated over, and know how many members they have:


        >>> len(Color)

        3


        >>> list(Color)

        [<Color.RED: 1>, <Color.BLUE: 2>, <Color.GREEN: 3>]


        Methods can be added to enumerations, and members can have their own

        attributes -- see the documentation for details.'
      enum:
      - FAILED_REGISTRATION
      - MODEL_VERSION_STATUS_UNKNOWN
      - PENDING_REGISTRATION
      - READY
    MonitorCronSchedule:
      type: object
      description: 'MonitorCronSchedule(quartz_cron_expression: ''str'', timezone_id:
        ''str'', pause_status: ''Optional[MonitorCronSchedulePauseStatus]'' = None)'
      properties:
        quartz_cron_expression:
          type: string
          description: 'The expression that determines when to run the monitor. See
            [examples].  [examples]: https://www.quartz-scheduler.org/documentation/quartz-2.3.0/tutorials/crontrigger.html'
        timezone_id:
          type: string
          description: 'The timezone id (e.g., ``PST``) in which to evaluate the quartz
            expression.  pause_status: Optional[MonitorCronSchedulePauseStatus] =
            None Read only field that indicates whether a schedule is paused or not.'
        pause_status:
          type: string
          description: 'Read only field that indicates whether a schedule is paused
            or not.  def as_dict(self) -> dict: Serializes the MonitorCronSchedule
            into a dictionary suitable for use as a JSON request body.'
    MonitorCronSchedulePauseStatus:
      type: string
      description: 'Source link:

        https://src.dev.databricks.com/databricks/universe/-/blob/elastic-spark-common/api/messages/schedule.proto

        Monitoring workflow schedule pause status.'
      enum:
      - PAUSED
      - UNPAUSED
      - UNSPECIFIED
    MonitorDataClassificationConfig:
      type: object
      description: Data classification related configuration.
      properties:
        enabled:
          type: string
          description: 'Whether to enable data classification.  def as_dict(self)
            -> dict: Serializes the MonitorDataClassificationConfig into a dictionary
            suitable for use as a JSON request body.'
    MonitorDestination:
      type: object
      description: 'MonitorDestination(email_addresses: ''Optional[List[str]]'' =
        None)'
      properties:
        email_addresses:
          type: string
          description: The list of email addresses to send the notification to. A
            maximum of 5 email addresses is supported.
    MonitorInferenceLog:
      type: object
      description: 'MonitorInferenceLog(problem_type: ''MonitorInferenceLogProblemType'',
        timestamp_col: ''str'', granularities: ''List[str]'', prediction_col: ''str'',
        model_id_col: ''str'', label_col: ''Optional[str]'' = None, prediction_proba_col:
        ''Optional[str]'' = None)'
      properties:
        problem_type:
          type: string
          description: 'Problem type the model aims to solve.  timestamp_col: str
            Column for the timestamp.'
        timestamp_col:
          type: string
          description: 'Column for the timestamp.  granularities: List[str] List of
            granularities to use when aggregating data into time windows based on
            their timestamp.'
        granularities:
          type: string
          description: 'List of granularities to use when aggregating data into time
            windows based on their timestamp.  prediction_col: str Column for the
            prediction.'
        prediction_col:
          type: string
          description: 'Column for the prediction.  model_id_col: str Column for the
            model identifier.'
        model_id_col:
          type: string
          description: 'Column for the model identifier.  label_col: Optional[str]
            = None Column for the label.'
        label_col:
          type: string
          description: 'Column for the label.  prediction_proba_col: Optional[str]
            = None Column for prediction probabilities'
        prediction_proba_col:
          type: string
          description: 'Column for prediction probabilities  def as_dict(self) ->
            dict: Serializes the MonitorInferenceLog into a dictionary suitable for
            use as a JSON request body.'
    MonitorInferenceLogProblemType:
      type: string
      description: 'Create a collection of name/value pairs.


        Example enumeration:


        >>> class Color(Enum):

        ...     RED = 1

        ...     BLUE = 2

        ...     GREEN = 3


        Access them by:


        - attribute access::


        >>> Color.RED

        <Color.RED: 1>


        - value lookup:


        >>> Color(1)

        <Color.RED: 1>


        - name lookup:


        >>> Color[''RED'']

        <Color.RED: 1>


        Enumerations can be iterated over, and know how many members they have:


        >>> len(Color)

        3


        >>> list(Color)

        [<Color.RED: 1>, <Color.BLUE: 2>, <Color.GREEN: 3>]


        Methods can be added to enumerations, and members can have their own

        attributes -- see the documentation for details.'
      enum:
      - PROBLEM_TYPE_CLASSIFICATION
      - PROBLEM_TYPE_REGRESSION
    MonitorInfo:
      type: object
      description: 'MonitorInfo(output_schema_name: ''str'', table_name: ''str'',
        status: ''MonitorInfoStatus'', profile_metrics_table_name: ''str'', drift_metrics_table_name:
        ''str'', monitor_version: ''int'', assets_dir: ''Optional[str]'' = None, baseline_table_name:
        ''Optional[str]'' = None, custom_metrics: ''Optional[List[MonitorMetric]]''
        = None, dashboard_id: ''Optional[str]'' = None, data_classification_config:
        ''Optional[MonitorDataClassificationConfig]'' = None, inference_log: ''Optional[MonitorInferenceLog]''
        = None, latest_monitor_failure_msg: ''Optional[str]'' = None, notifications:
        ''Optional[MonitorNotifications]'' = None, schedule: ''Optional[MonitorCronSchedule]''
        = None, slicing_exprs: ''Optional[List[str]]'' = None, snapshot: ''Optional[MonitorSnapshot]''
        = None, time_series: ''Optional[MonitorTimeSeries]'' = None)'
      properties:
        output_schema_name:
          type: string
          description: '[Create:REQ Update:REQ] Schema where output tables are created.
            Needs to be in 2-level format {catalog}.{schema}'
        table_name:
          type: string
          description: '[Create:ERR Update:IGN] UC table to monitor. Format: `catalog.schema.table_name`  status:
            MonitorInfoStatus [Create:ERR Update:IGN] The monitor status.'
        status:
          type: string
          description: '[Create:ERR Update:IGN] The monitor status.  profile_metrics_table_name:
            str """[Create:ERR Update:IGN] Table that stores profile metrics data.
            Format: `catalog.schema.table_name`.'
        profile_metrics_table_name:
          type: string
          description: '[Create:ERR Update:IGN] Table that stores profile metrics
            data. Format: `catalog.schema.table_name`.'
        drift_metrics_table_name:
          type: string
          description: '[Create:ERR Update:IGN] Table that stores drift metrics data.
            Format: `catalog.schema.table_name`.'
        monitor_version:
          type: string
          description: '[Create:ERR Update:IGN] Represents the current monitor configuration
            version in use. The version will be represented in a numeric fashion (1,2,3...).
            The field has flexibility to take on negative values, which can indicate
            corrupted monitor_version numbers.'
        assets_dir:
          type: string
          description: '[Create:REQ Update:IGN] Field for specifying the absolute
            path to a custom directory to store data-monitoring assets. Normally prepopulated
            to a default user location via UI and Python APIs.'
        baseline_table_name:
          type: string
          description: '[Create:OPT Update:OPT] Baseline table name. Baseline data
            is used to compute drift from the data in the monitored `table_name`.
            The baseline table and the monitored table shall have the same schema.'
        custom_metrics:
          type: string
          description: '[Create:OPT Update:OPT] Custom metrics.  dashboard_id: Optional[str]
            = None """[Create:ERR Update:OPT] Id of dashboard that visualizes the
            computed metrics. This can be empty if the monitor is in PENDING state.'
        dashboard_id:
          type: string
          description: '[Create:ERR Update:OPT] Id of dashboard that visualizes the
            computed metrics. This can be empty if the monitor is in PENDING state.'
        data_classification_config:
          type: string
          description: '[Create:OPT Update:OPT] Data classification related config.  inference_log:
            Optional[MonitorInferenceLog] = None  latest_monitor_failure_msg: Optional[str]
            = None [Create:ERR Update:IGN] The latest error message for a monitor
            failure.'
        inference_log:
          type: string
          description: ''
        latest_monitor_failure_msg:
          type: string
          description: '[Create:ERR Update:IGN] The latest error message for a monitor
            failure.  notifications: Optional[MonitorNotifications] = None [Create:OPT
            Update:OPT] Field for specifying notification settings.'
        notifications:
          type: string
          description: '[Create:OPT Update:OPT] Field for specifying notification
            settings.  schedule: Optional[MonitorCronSchedule] = None [Create:OPT
            Update:OPT] The monitor schedule.'
        schedule:
          type: string
          description: '[Create:OPT Update:OPT] The monitor schedule.  slicing_exprs:
            Optional[List[str]] = None """[Create:OPT Update:OPT] List of column expressions
            to slice data with for targeted analysis. The data is grouped by each
            expression independently, resulting in a separate slice for each predicate
            and its complements. For example `slicing_exprs=[“col_1”, “col_2 > 10”]`
            will generate the following slices: two slices for `col_2 > 10` (True
            and False), and one slice per unique value in `col1`. For high-cardinality
            columns, only the top 100 unique values by frequency will generate slices.'
        slicing_exprs:
          type: string
          description: '[Create:OPT Update:OPT] List of column expressions to slice
            data with for targeted analysis. The data is grouped by each expression
            independently, resulting in a separate slice for each predicate and its
            complements. For example `slicing_exprs=[“col_1”, “col_2 > 10”]` will
            generate the following slices: two slices for `col_2 > 10` (True and False),
            and one slice per unique value in `col1`. For high-cardinality columns,
            only the top 100 unique values by frequency will generate slices.'
        snapshot:
          type: string
          description: 'Configuration for monitoring snapshot tables.  time_series:
            Optional[MonitorTimeSeries] = None Configuration for monitoring time series
            tables.'
        time_series:
          type: string
          description: 'Configuration for monitoring time series tables.  def as_dict(self)
            -> dict: Serializes the MonitorInfo into a dictionary suitable for use
            as a JSON request body.'
    MonitorInfoStatus:
      type: string
      description: 'Create a collection of name/value pairs.


        Example enumeration:


        >>> class Color(Enum):

        ...     RED = 1

        ...     BLUE = 2

        ...     GREEN = 3


        Access them by:


        - attribute access::


        >>> Color.RED

        <Color.RED: 1>


        - value lookup:


        >>> Color(1)

        <Color.RED: 1>


        - name lookup:


        >>> Color[''RED'']

        <Color.RED: 1>


        Enumerations can be iterated over, and know how many members they have:


        >>> len(Color)

        3


        >>> list(Color)

        [<Color.RED: 1>, <Color.BLUE: 2>, <Color.GREEN: 3>]


        Methods can be added to enumerations, and members can have their own

        attributes -- see the documentation for details.'
      enum:
      - MONITOR_STATUS_ACTIVE
      - MONITOR_STATUS_DELETE_PENDING
      - MONITOR_STATUS_ERROR
      - MONITOR_STATUS_FAILED
      - MONITOR_STATUS_PENDING
    MonitorMetric:
      type: object
      description: Custom metric definition.
      properties:
        name:
          type: string
          description: 'Name of the metric in the output tables.  definition: str
            """Jinja template for a SQL expression that specifies how to compute the
            metric. See [create metric definition].  [create metric definition]: https://docs.databricks.com/en/lakehouse-monitoring/custom-metrics.html#create-definition'
        definition:
          type: string
          description: 'Jinja template for a SQL expression that specifies how to
            compute the metric. See [create metric definition].  [create metric definition]:
            https://docs.databricks.com/en/lakehouse-monitoring/custom-metrics.html#create-definition'
        input_columns:
          type: string
          description: A list of column names in the input table the metric should
            be computed for. Can use ``":table"`` to indicate that the metric needs
            information from multiple columns.
        output_data_type:
          type: string
          description: 'The output type of the custom metric.  type: MonitorMetricType
            """Can only be one of ``"CUSTOM_METRIC_TYPE_AGGREGATE"``, ``"CUSTOM_METRIC_TYPE_DERIVED"``,
            or ``"CUSTOM_METRIC_TYPE_DRIFT"``. The ``"CUSTOM_METRIC_TYPE_AGGREGATE"``
            and ``"CUSTOM_METRIC_TYPE_DERIVED"`` metrics are computed on a single
            table, whereas the ``"CUSTOM_METRIC_TYPE_DRIFT"`` compare metrics across
            baseline and input table, or across the two consecutive time windows.
            - CUSTOM_METRIC_TYPE_AGGREGATE: only depend on the existing columns in
            your table - CUSTOM_METRIC_TYPE_DERIVED: depend on previously computed
            aggregate metrics - CUSTOM_METRIC_TYPE_DRIFT: depend on previously computed
            aggregate or derived metrics'
        type:
          type: string
          description: 'The output type of the custom metric.  type: MonitorMetricType
            """Can only be one of ``"CUSTOM_METRIC_TYPE_AGGREGATE"``, ``"CUSTOM_METRIC_TYPE_DERIVED"``,
            or ``"CUSTOM_METRIC_TYPE_DRIFT"``. The ``"CUSTOM_METRIC_TYPE_AGGREGATE"``
            and ``"CUSTOM_METRIC_TYPE_DERIVED"`` metrics are computed on a single
            table, whereas the ``"CUSTOM_METRIC_TYPE_DRIFT"`` compare metrics across
            baseline and input table, or across the two consecutive time windows.
            - CUSTOM_METRIC_TYPE_AGGREGATE: only depend on the existing columns in
            your table - CUSTOM_METRIC_TYPE_DERIVED: depend on previously computed
            aggregate metrics - CUSTOM_METRIC_TYPE_DRIFT: depend on previously computed
            aggregate or derived metrics'
    MonitorMetricType:
      type: string
      description: 'Can only be one of ``"CUSTOM_METRIC_TYPE_AGGREGATE"``, ``"CUSTOM_METRIC_TYPE_DERIVED"``,
        or

        ``"CUSTOM_METRIC_TYPE_DRIFT"``. The ``"CUSTOM_METRIC_TYPE_AGGREGATE"`` and

        ``"CUSTOM_METRIC_TYPE_DERIVED"`` metrics are computed on a single table, whereas
        the

        ``"CUSTOM_METRIC_TYPE_DRIFT"`` compare metrics across baseline and input table,
        or across the

        two consecutive time windows. - CUSTOM_METRIC_TYPE_AGGREGATE: only depend
        on the existing

        columns in your table - CUSTOM_METRIC_TYPE_DERIVED: depend on previously computed
        aggregate

        metrics - CUSTOM_METRIC_TYPE_DRIFT: depend on previously computed aggregate
        or derived metrics'
      enum:
      - CUSTOM_METRIC_TYPE_AGGREGATE
      - CUSTOM_METRIC_TYPE_DERIVED
      - CUSTOM_METRIC_TYPE_DRIFT
    MonitorNotifications:
      type: object
      description: 'MonitorNotifications(on_failure: ''Optional[MonitorDestination]''
        = None, on_new_classification_tag_detected: ''Optional[MonitorDestination]''
        = None)'
      properties:
        on_failure:
          type: string
          description: 'Destinations to send notifications on failure/timeout.  on_new_classification_tag_detected:
            Optional[MonitorDestination] = None Destinations to send notifications
            on new classification tag detected.'
        on_new_classification_tag_detected:
          type: string
          description: 'Destinations to send notifications on new classification tag
            detected.  def as_dict(self) -> dict: Serializes the MonitorNotifications
            into a dictionary suitable for use as a JSON request body.'
    MonitorRefreshInfo:
      type: object
      description: 'MonitorRefreshInfo(refresh_id: ''int'', state: ''MonitorRefreshInfoState'',
        start_time_ms: ''int'', end_time_ms: ''Optional[int]'' = None, message: ''Optional[str]''
        = None, trigger: ''Optional[MonitorRefreshInfoTrigger]'' = None)'
      properties:
        refresh_id:
          type: string
          description: 'Unique id of the refresh operation.  state: MonitorRefreshInfoState
            The current state of the refresh.'
        state:
          type: string
          description: 'The current state of the refresh.  start_time_ms: int Time
            at which refresh operation was initiated (milliseconds since 1/1/1970
            UTC).'
        start_time_ms:
          type: string
          description: 'Time at which refresh operation was initiated (milliseconds
            since 1/1/1970 UTC).  end_time_ms: Optional[int] = None Time at which
            refresh operation completed (milliseconds since 1/1/1970 UTC).'
        end_time_ms:
          type: string
          description: 'Time at which refresh operation completed (milliseconds since
            1/1/1970 UTC).  message: Optional[str] = None An optional message to give
            insight into the current state of the job (e.g. FAILURE messages).'
        message:
          type: string
          description: 'An optional message to give insight into the current state
            of the job (e.g. FAILURE messages).  trigger: Optional[MonitorRefreshInfoTrigger]
            = None The method by which the refresh was triggered.'
        trigger:
          type: string
          description: 'The method by which the refresh was triggered.  def as_dict(self)
            -> dict: Serializes the MonitorRefreshInfo into a dictionary suitable
            for use as a JSON request body.'
    MonitorRefreshInfoState:
      type: string
      description: The current state of the refresh.
      enum:
      - CANCELED
      - FAILED
      - PENDING
      - RUNNING
      - SUCCESS
      - UNKNOWN
    MonitorRefreshInfoTrigger:
      type: string
      description: 'Create a collection of name/value pairs.


        Example enumeration:


        >>> class Color(Enum):

        ...     RED = 1

        ...     BLUE = 2

        ...     GREEN = 3


        Access them by:


        - attribute access::


        >>> Color.RED

        <Color.RED: 1>


        - value lookup:


        >>> Color(1)

        <Color.RED: 1>


        - name lookup:


        >>> Color[''RED'']

        <Color.RED: 1>


        Enumerations can be iterated over, and know how many members they have:


        >>> len(Color)

        3


        >>> list(Color)

        [<Color.RED: 1>, <Color.BLUE: 2>, <Color.GREEN: 3>]


        Methods can be added to enumerations, and members can have their own

        attributes -- see the documentation for details.'
      enum:
      - MANUAL
      - SCHEDULE
      - UNKNOWN_TRIGGER
    MonitorRefreshListResponse:
      type: object
      description: 'MonitorRefreshListResponse(refreshes: ''Optional[List[MonitorRefreshInfo]]''
        = None)'
      properties:
        refreshes:
          type: string
          description: 'List of refreshes.  def as_dict(self) -> dict: Serializes
            the MonitorRefreshListResponse into a dictionary suitable for use as a
            JSON request body.'
    MonitorSnapshot:
      type: object
      description: Snapshot analysis configuration
      properties: {}
    MonitorTimeSeries:
      type: object
      description: Time series analysis configuration.
      properties:
        timestamp_col:
          type: string
          description: 'Column for the timestamp.  granularities: List[str] """Granularities
            for aggregating data into time windows based on their timestamp. Currently
            the following static granularities are supported: {``\"5 minutes\"``,
            ``\"30 minutes\"``, ``\"1 hour\"``, ``\"1 day\"``, ``\"\u003cn\u003e week(s)\"``,
            ``\"1 month\"``, ``\"1 year\"``}.'
        granularities:
          type: string
          description: 'Granularities for aggregating data into time windows based
            on their timestamp. Currently the following static granularities are supported:
            {``\"5 minutes\"``, ``\"30 minutes\"``, ``\"1 hour\"``, ``\"1 day\"``,
            ``\"\u003cn\u003e week(s)\"``, ``\"1 month\"``, ``\"1 year\"``}.'
    NamedTableConstraint:
      type: object
      description: 'NamedTableConstraint(name: ''str'')'
      properties:
        name:
          type: string
          description: 'The name of the constraint.  def as_dict(self) -> dict: Serializes
            the NamedTableConstraint into a dictionary suitable for use as a JSON
            request body.'
    NotificationDestination:
      type: object
      description: 'NotificationDestination(destination_id: ''Optional[str]'' = None,
        destination_type: ''Optional[DestinationType]'' = None, special_destination:
        ''Optional[SpecialDestination]'' = None)'
      properties:
        destination_id:
          type: string
          description: The identifier for the destination. This is the email address
            for EMAIL destinations, the URL for URL destinations, or the unique Databricks
            notification destination ID for all other external destinations.
        destination_type:
          type: string
          description: 'The type of the destination.  special_destination: Optional[SpecialDestination]
            = None """This field is used to denote whether the destination is the
            email of the owner of the securable object. The special destination cannot
            be assigned to a securable and only represents the default destination
            of the securable. The securable types that support default special destinations
            are: "catalog", "external_location", "connection", "credential", and "metastore".
            The **destination_type** of a **special_destination** is always EMAIL.'
        special_destination:
          type: string
          description: 'This field is used to denote whether the destination is the
            email of the owner of the securable object. The special destination cannot
            be assigned to a securable and only represents the default destination
            of the securable. The securable types that support default special destinations
            are: "catalog", "external_location", "connection", "credential", and "metastore".
            The **destination_type** of a **special_destination** is always EMAIL.'
    OnlineTable:
      type: object
      description: Online Table information.
      properties:
        name:
          type: string
          description: 'Full three-part (catalog, schema, table) name of the table.  spec:
            Optional[OnlineTableSpec] = None Specification of the online table.'
        spec:
          type: string
          description: 'Specification of the online table.  status: Optional[OnlineTableStatus]
            = None Online Table data synchronization status'
        status:
          type: string
          description: 'Online Table data synchronization status  table_serving_url:
            Optional[str] = None Data serving REST API URL for this table'
        table_serving_url:
          type: string
          description: 'Data serving REST API URL for this table  unity_catalog_provisioning_state:
            Optional[ProvisioningInfoState] = None """The provisioning state of the
            online table entity in Unity Catalog. This is distinct from the state
            of the data synchronization pipeline (i.e. the table may be in "ACTIVE"
            but the pipeline may be in "PROVISIONING" as it runs asynchronously).'
        unity_catalog_provisioning_state:
          type: string
          description: The provisioning state of the online table entity in Unity
            Catalog. This is distinct from the state of the data synchronization pipeline
            (i.e. the table may be in "ACTIVE" but the pipeline may be in "PROVISIONING"
            as it runs asynchronously).
    OnlineTableSpec:
      type: object
      description: Specification of an online table.
      properties:
        perform_full_copy:
          type: string
          description: Whether to create a full-copy pipeline -- a pipeline that stops
            after creates a full copy of the source table upon initialization and
            does not process any change data feeds (CDFs) afterwards. The pipeline
            can still be manually triggered afterwards, but it always perform a full
            copy of the source table and there are no incremental updates. This mode
            is useful for syncing views or tables without CDFs to online tables. Note
            that the full-copy pipeline only supports "triggered" scheduling policy.
        pipeline_id:
          type: string
          description: 'ID of the associated pipeline. Generated by the server - cannot
            be set by the caller.  primary_key_columns: Optional[List[str]] = None
            Primary Key columns to be used for data insert/update in the destination.'
        primary_key_columns:
          type: string
          description: 'Primary Key columns to be used for data insert/update in the
            destination.  run_continuously: Optional[OnlineTableSpecContinuousSchedulingPolicy]
            = None Pipeline runs continuously after generating the initial data.'
        run_continuously:
          type: string
          description: 'Pipeline runs continuously after generating the initial data.  run_triggered:
            Optional[OnlineTableSpecTriggeredSchedulingPolicy] = None """Pipeline
            stops after generating the initial data and can be triggered later (manually,
            through a cron job or through data triggers)'
        run_triggered:
          type: string
          description: Pipeline stops after generating the initial data and can be
            triggered later (manually, through a cron job or through data triggers)
        source_table_full_name:
          type: string
          description: 'Three-part (catalog, schema, table) name of the source Delta
            table.  timeseries_key: Optional[str] = None Time series key to deduplicate
            (tie-break) rows with the same primary key.'
        timeseries_key:
          type: string
          description: 'Time series key to deduplicate (tie-break) rows with the same
            primary key.  def as_dict(self) -> dict: Serializes the OnlineTableSpec
            into a dictionary suitable for use as a JSON request body.'
    OnlineTableSpecContinuousSchedulingPolicy:
      type: object
      description: OnlineTableSpecContinuousSchedulingPolicy()
      properties: {}
    OnlineTableSpecTriggeredSchedulingPolicy:
      type: object
      description: OnlineTableSpecTriggeredSchedulingPolicy()
      properties: {}
    OnlineTableState:
      type: string
      description: The state of an online table.
      enum:
      - OFFLINE
      - OFFLINE_FAILED
      - ONLINE
      - ONLINE_CONTINUOUS_UPDATE
      - ONLINE_NO_PENDING_UPDATE
      - ONLINE_PIPELINE_FAILED
      - ONLINE_TRIGGERED_UPDATE
      - ONLINE_UPDATING_PIPELINE_RESOURCES
      - PROVISIONING
      - PROVISIONING_INITIAL_SNAPSHOT
      - PROVISIONING_PIPELINE_RESOURCES
    OnlineTableStatus:
      type: object
      description: Status of an online table.
      properties:
        continuous_update_status:
          type: string
          description: ''
        detailed_state:
          type: string
          description: 'The state of the online table.  failed_status: Optional[FailedStatus]
            = None  message: Optional[str] = None A text description of the current
            state of the online table.'
        failed_status:
          type: string
          description: ''
        message:
          type: string
          description: 'A text description of the current state of the online table.  provisioning_status:
            Optional[ProvisioningStatus] = None  triggered_update_status: Optional[TriggeredUpdateStatus]
            = None  def as_dict(self) -> dict: Serializes the OnlineTableStatus into
            a dictionary suitable for use as a JSON request body.'
        provisioning_status:
          type: string
          description: ''
        triggered_update_status:
          type: string
          description: ''
    OptionSpec:
      type: object
      description: 'Spec of an allowed option on a securable kind and its attributes.
        This is mostly used by UI to

        provide user friendly hints and descriptions in order to facilitate the securable
        creation

        process.'
      properties:
        allowed_values:
          type: string
          description: For drop down / radio button selections, UI will want to know
            the possible input values, it can also be used by other option types to
            limit input selections.
        default_value:
          type: string
          description: 'The default value of the option, for example, value ''443''
            for ''port'' option.  description: Optional[str] = None A concise user
            facing description of what the input value of this option should look
            like.'
        description:
          type: string
          description: 'A concise user facing description of what the input value
            of this option should look like.  hint: Optional[str] = None """The hint
            is used on the UI to suggest what the input value can possibly be like,
            for example: example.com for ''host'' option. Unlike default value, it
            will not be applied automatically without user input.'
        hint:
          type: string
          description: 'The hint is used on the UI to suggest what the input value
            can possibly be like, for example: example.com for ''host'' option. Unlike
            default value, it will not be applied automatically without user input.'
        is_copiable:
          type: string
          description: 'Indicates whether an option should be displayed with copy
            button on the UI.  is_creatable: Optional[bool] = None Indicates whether
            an option can be provided by users in the create/update path of an entity.'
        is_creatable:
          type: string
          description: 'Indicates whether an option can be provided by users in the
            create/update path of an entity.  is_hidden: Optional[bool] = None Is
            the option value not user settable and is thus not shown on the UI.'
        is_hidden:
          type: string
          description: 'Is the option value not user settable and is thus not shown
            on the UI.  is_loggable: Optional[bool] = None Specifies whether this
            option is safe to log, i.e. no sensitive information.'
        is_loggable:
          type: string
          description: 'Specifies whether this option is safe to log, i.e. no sensitive
            information.  is_required: Optional[bool] = None Is the option required.'
        is_required:
          type: string
          description: 'Is the option required.  is_secret: Optional[bool] = None
            Is the option value considered secret and thus redacted on the UI.'
        is_secret:
          type: string
          description: 'Is the option value considered secret and thus redacted on
            the UI.  is_updatable: Optional[bool] = None Is the option updatable by
            users.'
        is_updatable:
          type: string
          description: 'Is the option updatable by users.  name: Optional[str] = None
            The unique name of the option.'
        name:
          type: string
          description: 'The unique name of the option.  oauth_stage: Optional[OptionSpecOauthStage]
            = None Specifies when the option value is displayed on the UI within the
            OAuth flow.'
        oauth_stage:
          type: string
          description: 'Specifies when the option value is displayed on the UI within
            the OAuth flow.  type: Optional[OptionSpecOptionType] = None The type
            of the option.'
        type:
          type: string
          description: 'The type of the option.  def as_dict(self) -> dict: Serializes
            the OptionSpec into a dictionary suitable for use as a JSON request body.'
    OptionSpecOauthStage:
      type: string
      description: 'During the OAuth flow, specifies which stage the option should
        be displayed in the UI.

        OAUTH_STAGE_UNSPECIFIED is the default value for options unrelated to the
        OAuth flow.

        BEFORE_AUTHORIZATION_CODE corresponds to options necessary to initiate the
        OAuth process.

        BEFORE_ACCESS_TOKEN corresponds to options that are necessary to create a
        foreign connection,

        but that should be displayed after the authorization code has already been
        received.'
      enum:
      - BEFORE_ACCESS_TOKEN
      - BEFORE_AUTHORIZATION_CODE
    OptionSpecOptionType:
      type: string
      description: 'Type of the option, we purposely follow JavaScript types so that
        the UI can map the options to

        JS types. https://www.w3schools.com/js/js_datatypes.asp Enum is a special
        case that it''s just

        string with selections.'
      enum:
      - OPTION_BIGINT
      - OPTION_BOOLEAN
      - OPTION_ENUM
      - OPTION_MULTILINE_STRING
      - OPTION_NUMBER
      - OPTION_SERVICE_CREDENTIAL
      - OPTION_STRING
    PathOperation:
      type: string
      description: 'Create a collection of name/value pairs.


        Example enumeration:


        >>> class Color(Enum):

        ...     RED = 1

        ...     BLUE = 2

        ...     GREEN = 3


        Access them by:


        - attribute access::


        >>> Color.RED

        <Color.RED: 1>


        - value lookup:


        >>> Color(1)

        <Color.RED: 1>


        - name lookup:


        >>> Color[''RED'']

        <Color.RED: 1>


        Enumerations can be iterated over, and know how many members they have:


        >>> len(Color)

        3


        >>> list(Color)

        [<Color.RED: 1>, <Color.BLUE: 2>, <Color.GREEN: 3>]


        Methods can be added to enumerations, and members can have their own

        attributes -- see the documentation for details.'
      enum:
      - PATH_CREATE_TABLE
      - PATH_READ
      - PATH_READ_WRITE
    PermissionsChange:
      type: object
      description: 'PermissionsChange(add: ''Optional[List[Privilege]]'' = None, principal:
        ''Optional[str]'' = None, remove: ''Optional[List[Privilege]]'' = None)'
      properties:
        add:
          type: string
          description: 'The set of privileges to add.  principal: Optional[str] =
            None """The principal whose privileges we are changing. Only one of principal
            or principal_id should be specified, never both at the same time.'
        principal:
          type: string
          description: The principal whose privileges we are changing. Only one of
            principal or principal_id should be specified, never both at the same
            time.
        remove:
          type: string
          description: 'The set of privileges to remove.  def as_dict(self) -> dict:
            Serializes the PermissionsChange into a dictionary suitable for use as
            a JSON request body.'
    PipelineProgress:
      type: object
      description: Progress information of the Online Table data synchronization pipeline.
      properties:
        estimated_completion_time_seconds:
          type: string
          description: 'The estimated time remaining to complete this update in seconds.  latest_version_currently_processing:
            Optional[int] = None """The source table Delta version that was last processed
            by the pipeline. The pipeline may not have completely processed this version
            yet.'
        latest_version_currently_processing:
          type: string
          description: The source table Delta version that was last processed by the
            pipeline. The pipeline may not have completely processed this version
            yet.
        sync_progress_completion:
          type: string
          description: 'The completion ratio of this update. This is a number between
            0 and 1.  synced_row_count: Optional[int] = None The number of rows that
            have been synced in this update.'
        synced_row_count:
          type: string
          description: 'The number of rows that have been synced in this update.  total_row_count:
            Optional[int] = None The total number of rows that need to be synced in
            this update. This number may be an estimate.'
        total_row_count:
          type: string
          description: 'The total number of rows that need to be synced in this update.
            This number may be an estimate.  def as_dict(self) -> dict: Serializes
            the PipelineProgress into a dictionary suitable for use as a JSON request
            body.'
    PolicyInfo:
      type: object
      description: 'PolicyInfo(to_principals: ''List[str]'', for_securable_type: ''SecurableType'',
        policy_type: ''PolicyType'', column_mask: ''Optional[ColumnMaskOptions]''
        = None, comment: ''Optional[str]'' = None, created_at: ''Optional[int]'' =
        None, created_by: ''Optional[str]'' = None, except_principals: ''Optional[List[str]]''
        = None, id: ''Optional[str]'' = None, match_columns: ''Optional[List[MatchColumn]]''
        = None, name: ''Optional[str]'' = None, on_securable_fullname: ''Optional[str]''
        = None, on_securable_type: ''Optional[SecurableType]'' = None, row_filter:
        ''Optional[RowFilterOptions]'' = None, updated_at: ''Optional[int]'' = None,
        updated_by: ''Optional[str]'' = None, when_condition: ''Optional[str]'' =
        None)'
      properties:
        to_principals:
          type: string
          description: List of user or group names that the policy applies to. Required
            on create and optional on update.
        for_securable_type:
          type: string
          description: Type of securables that the policy should take effect on. Only
            `TABLE` is supported at this moment. Required on create and optional on
            update.
        policy_type:
          type: string
          description: 'Type of the policy. Required on create and ignored on update.  column_mask:
            Optional[ColumnMaskOptions] = None """Options for column mask policies.
            Valid only if `policy_type` is `POLICY_TYPE_COLUMN_MASK`. Required on
            create and optional on update. When specified on update, the new options
            will replace the existing options as a whole.'
        column_mask:
          type: string
          description: Options for column mask policies. Valid only if `policy_type`
            is `POLICY_TYPE_COLUMN_MASK`. Required on create and optional on update.
            When specified on update, the new options will replace the existing options
            as a whole.
        comment:
          type: string
          description: 'Optional description of the policy.  created_at: Optional[int]
            = None Time at which the policy was created, in epoch milliseconds. Output
            only.'
        created_at:
          type: string
          description: 'Time at which the policy was created, in epoch milliseconds.
            Output only.  created_by: Optional[str] = None Username of the user who
            created the policy. Output only.'
        created_by:
          type: string
          description: 'Username of the user who created the policy. Output only.  except_principals:
            Optional[List[str]] = None Optional list of user or group names that should
            be excluded from the policy.'
        except_principals:
          type: string
          description: 'Optional list of user or group names that should be excluded
            from the policy.  id: Optional[str] = None Unique identifier of the policy.
            This field is output only and is generated by the system.'
        id:
          type: string
          description: 'Unique identifier of the policy. This field is output only
            and is generated by the system.  match_columns: Optional[List[MatchColumn]]
            = None """Optional list of condition expressions used to match table columns.
            Only valid when `for_securable_type` is `TABLE`. When specified, the policy
            only applies to tables whose columns satisfy all match conditions.'
        match_columns:
          type: string
          description: Optional list of condition expressions used to match table
            columns. Only valid when `for_securable_type` is `TABLE`. When specified,
            the policy only applies to tables whose columns satisfy all match conditions.
        name:
          type: string
          description: Name of the policy. Required on create and optional on update.
            To rename the policy, set `name` to a different value on update.
        on_securable_fullname:
          type: string
          description: Full name of the securable on which the policy is defined.
            Required on create and ignored on update.
        on_securable_type:
          type: string
          description: Type of the securable on which the policy is defined. Only
            `CATALOG`, `SCHEMA` and `TABLE` are supported at this moment. Required
            on create and ignored on update.
        row_filter:
          type: string
          description: Options for row filter policies. Valid only if `policy_type`
            is `POLICY_TYPE_ROW_FILTER`. Required on create and optional on update.
            When specified on update, the new options will replace the existing options
            as a whole.
        updated_at:
          type: string
          description: 'Time at which the policy was last modified, in epoch milliseconds.
            Output only.  updated_by: Optional[str] = None Username of the user who
            last modified the policy. Output only.'
        updated_by:
          type: string
          description: 'Username of the user who last modified the policy. Output
            only.  when_condition: Optional[str] = None Optional condition when the
            policy should take effect.'
        when_condition:
          type: string
          description: 'Optional condition when the policy should take effect.  def
            as_dict(self) -> dict: Serializes the PolicyInfo into a dictionary suitable
            for use as a JSON request body.'
    PolicyType:
      type: string
      description: 'Create a collection of name/value pairs.


        Example enumeration:


        >>> class Color(Enum):

        ...     RED = 1

        ...     BLUE = 2

        ...     GREEN = 3


        Access them by:


        - attribute access::


        >>> Color.RED

        <Color.RED: 1>


        - value lookup:


        >>> Color(1)

        <Color.RED: 1>


        - name lookup:


        >>> Color[''RED'']

        <Color.RED: 1>


        Enumerations can be iterated over, and know how many members they have:


        >>> len(Color)

        3


        >>> list(Color)

        [<Color.RED: 1>, <Color.BLUE: 2>, <Color.GREEN: 3>]


        Methods can be added to enumerations, and members can have their own

        attributes -- see the documentation for details.'
      enum:
      - POLICY_TYPE_COLUMN_MASK
      - POLICY_TYPE_ROW_FILTER
    PrimaryKeyConstraint:
      type: object
      description: 'PrimaryKeyConstraint(name: ''str'', child_columns: ''List[str]'',
        rely: ''Optional[bool]'' = None, timeseries_columns: ''Optional[List[str]]''
        = None)'
      properties:
        name:
          type: string
          description: 'The name of the constraint.  child_columns: List[str] Column
            names for this constraint.'
        child_columns:
          type: string
          description: 'Column names for this constraint.  rely: Optional[bool] =
            None True if the constraint is RELY, false or unset if NORELY.'
        rely:
          type: string
          description: 'True if the constraint is RELY, false or unset if NORELY.  timeseries_columns:
            Optional[List[str]] = None Column names that represent a timeseries.'
        timeseries_columns:
          type: string
          description: 'Column names that represent a timeseries.  def as_dict(self)
            -> dict: Serializes the PrimaryKeyConstraint into a dictionary suitable
            for use as a JSON request body.'
    Principal:
      type: object
      description: 'Principal(id: ''Optional[str]'' = None, principal_type: ''Optional[PrincipalType]''
        = None)'
      properties:
        id:
          type: string
          description: 'Databricks user, group or service principal ID.  principal_type:
            Optional[PrincipalType] = None  def as_dict(self) -> dict: Serializes
            the Principal into a dictionary suitable for use as a JSON request body.'
        principal_type:
          type: string
          description: ''
    PrincipalType:
      type: string
      description: 'Create a collection of name/value pairs.


        Example enumeration:


        >>> class Color(Enum):

        ...     RED = 1

        ...     BLUE = 2

        ...     GREEN = 3


        Access them by:


        - attribute access::


        >>> Color.RED

        <Color.RED: 1>


        - value lookup:


        >>> Color(1)

        <Color.RED: 1>


        - name lookup:


        >>> Color[''RED'']

        <Color.RED: 1>


        Enumerations can be iterated over, and know how many members they have:


        >>> len(Color)

        3


        >>> list(Color)

        [<Color.RED: 1>, <Color.BLUE: 2>, <Color.GREEN: 3>]


        Methods can be added to enumerations, and members can have their own

        attributes -- see the documentation for details.'
      enum:
      - GROUP_PRINCIPAL
      - SERVICE_PRINCIPAL
      - USER_PRINCIPAL
    Privilege:
      type: string
      description: 'Create a collection of name/value pairs.


        Example enumeration:


        >>> class Color(Enum):

        ...     RED = 1

        ...     BLUE = 2

        ...     GREEN = 3


        Access them by:


        - attribute access::


        >>> Color.RED

        <Color.RED: 1>


        - value lookup:


        >>> Color(1)

        <Color.RED: 1>


        - name lookup:


        >>> Color[''RED'']

        <Color.RED: 1>


        Enumerations can be iterated over, and know how many members they have:


        >>> len(Color)

        3


        >>> list(Color)

        [<Color.RED: 1>, <Color.BLUE: 2>, <Color.GREEN: 3>]


        Methods can be added to enumerations, and members can have their own

        attributes -- see the documentation for details.'
      enum:
      - ACCESS
      - ALL_PRIVILEGES
      - APPLY_TAG
      - BROWSE
      - CREATE
      - CREATE_CATALOG
      - CREATE_CLEAN_ROOM
      - CREATE_CONNECTION
      - CREATE_EXTERNAL_LOCATION
      - CREATE_EXTERNAL_TABLE
      - CREATE_EXTERNAL_VOLUME
      - CREATE_FOREIGN_CATALOG
      - CREATE_FOREIGN_SECURABLE
      - CREATE_FUNCTION
      - CREATE_MANAGED_STORAGE
      - CREATE_MATERIALIZED_VIEW
      - CREATE_MODEL
      - CREATE_PROVIDER
      - CREATE_RECIPIENT
      - CREATE_SCHEMA
      - CREATE_SERVICE_CREDENTIAL
      - CREATE_SHARE
      - CREATE_STORAGE_CREDENTIAL
      - CREATE_TABLE
      - CREATE_VIEW
      - CREATE_VOLUME
      - EXECUTE
      - EXECUTE_CLEAN_ROOM_TASK
      - EXTERNAL_USE_SCHEMA
      - MANAGE
      - MANAGE_ALLOWLIST
      - MODIFY
      - MODIFY_CLEAN_ROOM
      - READ_FILES
      - READ_PRIVATE_FILES
      - READ_VOLUME
      - REFRESH
      - SELECT
      - SET_SHARE_PERMISSION
      - USAGE
      - USE_CATALOG
      - USE_CONNECTION
      - USE_MARKETPLACE_ASSETS
      - USE_PROVIDER
      - USE_RECIPIENT
      - USE_SCHEMA
      - USE_SHARE
      - WRITE_FILES
      - WRITE_PRIVATE_FILES
      - WRITE_VOLUME
    PrivilegeAssignment:
      type: object
      description: 'PrivilegeAssignment(principal: ''Optional[str]'' = None, privileges:
        ''Optional[List[Privilege]]'' = None)'
      properties:
        principal:
          type: string
          description: The principal (user email address or group name). For deleted
            principals, `principal` is empty while `principal_id` is populated.
        privileges:
          type: string
          description: 'The privileges assigned to the principal.  def as_dict(self)
            -> dict: Serializes the PrivilegeAssignment into a dictionary suitable
            for use as a JSON request body.'
    ProvisioningInfo:
      type: object
      description: Status of an asynchronously provisioned resource.
      properties:
        state:
          type: string
          description: 'The provisioning state of the resource.  def as_dict(self)
            -> dict: Serializes the ProvisioningInfo into a dictionary suitable for
            use as a JSON request body.'
    ProvisioningInfoState:
      type: string
      description: 'Create a collection of name/value pairs.


        Example enumeration:


        >>> class Color(Enum):

        ...     RED = 1

        ...     BLUE = 2

        ...     GREEN = 3


        Access them by:


        - attribute access::


        >>> Color.RED

        <Color.RED: 1>


        - value lookup:


        >>> Color(1)

        <Color.RED: 1>


        - name lookup:


        >>> Color[''RED'']

        <Color.RED: 1>


        Enumerations can be iterated over, and know how many members they have:


        >>> len(Color)

        3


        >>> list(Color)

        [<Color.RED: 1>, <Color.BLUE: 2>, <Color.GREEN: 3>]


        Methods can be added to enumerations, and members can have their own

        attributes -- see the documentation for details.'
      enum:
      - ACTIVE
      - DEGRADED
      - DELETING
      - FAILED
      - PROVISIONING
      - UPDATING
    ProvisioningStatus:
      type: object
      description: 'Detailed status of an online table. Shown if the online table
        is in the

        PROVISIONING_PIPELINE_RESOURCES or the PROVISIONING_INITIAL_SNAPSHOT state.'
      properties:
        initial_pipeline_sync_progress:
          type: string
          description: Details about initial data synchronization. Only populated
            when in the PROVISIONING_INITIAL_SNAPSHOT state.
    QuotaInfo:
      type: object
      description: 'QuotaInfo(last_refreshed_at: ''Optional[int]'' = None, parent_full_name:
        ''Optional[str]'' = None, parent_securable_type: ''Optional[SecurableType]''
        = None, quota_count: ''Optional[int]'' = None, quota_limit: ''Optional[int]''
        = None, quota_name: ''Optional[str]'' = None)'
      properties:
        last_refreshed_at:
          type: string
          description: 'The timestamp that indicates when the quota count was last
            updated.  parent_full_name: Optional[str] = None Name of the parent resource.
            Returns metastore ID if the parent is a metastore.'
        parent_full_name:
          type: string
          description: 'Name of the parent resource. Returns metastore ID if the parent
            is a metastore.  parent_securable_type: Optional[SecurableType] = None
            The quota parent securable type.'
        parent_securable_type:
          type: string
          description: 'The quota parent securable type.  quota_count: Optional[int]
            = None The current usage of the resource quota.'
        quota_count:
          type: string
          description: 'The current usage of the resource quota.  quota_limit: Optional[int]
            = None The current limit of the resource quota.'
        quota_limit:
          type: string
          description: 'The current limit of the resource quota.  quota_name: Optional[str]
            = None The name of the quota.'
        quota_name:
          type: string
          description: 'The name of the quota.  def as_dict(self) -> dict: Serializes
            the QuotaInfo into a dictionary suitable for use as a JSON request body.'
    R2Credentials:
      type: object
      description: 'R2 temporary credentials for API authentication. Read more at

        https://developers.cloudflare.com/r2/api/s3/tokens/.'
      properties:
        access_key_id:
          type: string
          description: 'The access key ID that identifies the temporary credentials.  secret_access_key:
            Optional[str] = None The secret access key associated with the access
            key.'
        secret_access_key:
          type: string
          description: 'The secret access key associated with the access key.  session_token:
            Optional[str] = None The generated JWT that users must pass to use the
            temporary credentials.'
        session_token:
          type: string
          description: 'The generated JWT that users must pass to use the temporary
            credentials.  def as_dict(self) -> dict: Serializes the R2Credentials
            into a dictionary suitable for use as a JSON request body.'
    RegenerateDashboardResponse:
      type: object
      description: 'RegenerateDashboardResponse(dashboard_id: ''Optional[str]'' =
        None, parent_folder: ''Optional[str]'' = None)'
      properties:
        dashboard_id:
          type: string
          description: ''
        parent_folder:
          type: string
          description: 'Parent folder is equivalent to {assets_dir}/{tableName}  def
            as_dict(self) -> dict: Serializes the RegenerateDashboardResponse into
            a dictionary suitable for use as a JSON request body.'
    RegisteredModelAlias:
      type: object
      description: 'RegisteredModelAlias(alias_name: ''Optional[str]'' = None, catalog_name:
        ''Optional[str]'' = None, id: ''Optional[str]'' = None, model_name: ''Optional[str]''
        = None, schema_name: ''Optional[str]'' = None, version_num: ''Optional[int]''
        = None)'
      properties:
        alias_name:
          type: string
          description: 'Name of the alias, e.g. ''champion'' or ''latest_stable  catalog_name:
            Optional[str] = None The name of the catalog containing the model version'
        catalog_name:
          type: string
          description: 'The name of the catalog containing the model version  id:
            Optional[str] = None The unique identifier of the alias'
        id:
          type: string
          description: 'The unique identifier of the alias  model_name: Optional[str]
            = None The name of the parent registered model of the model version, relative
            to parent schema'
        model_name:
          type: string
          description: 'The name of the parent registered model of the model version,
            relative to parent schema  schema_name: Optional[str] = None The name
            of the schema containing the model version, relative to parent catalog'
        schema_name:
          type: string
          description: 'The name of the schema containing the model version, relative
            to parent catalog  version_num: Optional[int] = None Integer version number
            of the model version to which this alias points.'
        version_num:
          type: string
          description: 'Integer version number of the model version to which this
            alias points.  def as_dict(self) -> dict: Serializes the RegisteredModelAlias
            into a dictionary suitable for use as a JSON request body.'
    RegisteredModelInfo:
      type: object
      description: 'RegisteredModelInfo(aliases: ''Optional[List[RegisteredModelAlias]]''
        = None, browse_only: ''Optional[bool]'' = None, catalog_name: ''Optional[str]''
        = None, comment: ''Optional[str]'' = None, created_at: ''Optional[int]'' =
        None, created_by: ''Optional[str]'' = None, full_name: ''Optional[str]'' =
        None, metastore_id: ''Optional[str]'' = None, name: ''Optional[str]'' = None,
        owner: ''Optional[str]'' = None, schema_name: ''Optional[str]'' = None, storage_location:
        ''Optional[str]'' = None, updated_at: ''Optional[int]'' = None, updated_by:
        ''Optional[str]'' = None)'
      properties:
        aliases:
          type: string
          description: 'List of aliases associated with the registered model  browse_only:
            Optional[bool] = None """Indicates whether the principal is limited to
            retrieving metadata for the associated object through the BROWSE privilege
            when include_browse is enabled in the request.'
        browse_only:
          type: string
          description: Indicates whether the principal is limited to retrieving metadata
            for the associated object through the BROWSE privilege when include_browse
            is enabled in the request.
        catalog_name:
          type: string
          description: 'The name of the catalog where the schema and the registered
            model reside  comment: Optional[str] = None The comment attached to the
            registered model'
        comment:
          type: string
          description: 'The comment attached to the registered model  created_at:
            Optional[int] = None Creation timestamp of the registered model in milliseconds
            since the Unix epoch'
        created_at:
          type: string
          description: 'Creation timestamp of the registered model in milliseconds
            since the Unix epoch  created_by: Optional[str] = None The identifier
            of the user who created the registered model'
        created_by:
          type: string
          description: 'The identifier of the user who created the registered model  full_name:
            Optional[str] = None The three-level (fully qualified) name of the registered
            model'
        full_name:
          type: string
          description: 'The three-level (fully qualified) name of the registered model  metastore_id:
            Optional[str] = None The unique identifier of the metastore'
        metastore_id:
          type: string
          description: 'The unique identifier of the metastore  name: Optional[str]
            = None The name of the registered model'
        name:
          type: string
          description: 'The name of the catalog where the schema and the registered
            model reside  comment: Optional[str] = None The comment attached to the
            registered model'
        owner:
          type: string
          description: 'The identifier of the user who owns the registered model  schema_name:
            Optional[str] = None The name of the schema where the registered model
            resides'
        schema_name:
          type: string
          description: 'The name of the schema where the registered model resides  storage_location:
            Optional[str] = None The storage location on the cloud under which model
            version data files are stored'
        storage_location:
          type: string
          description: 'The storage location on the cloud under which model version
            data files are stored  updated_at: Optional[int] = None Last-update timestamp
            of the registered model in milliseconds since the Unix epoch'
        updated_at:
          type: string
          description: 'Last-update timestamp of the registered model in milliseconds
            since the Unix epoch  updated_by: Optional[str] = None The identifier
            of the user who updated the registered model last time'
        updated_by:
          type: string
          description: 'The identifier of the user who updated the registered model
            last time  def as_dict(self) -> dict: Serializes the RegisteredModelInfo
            into a dictionary suitable for use as a JSON request body.'
    RowFilterOptions:
      type: object
      description: 'RowFilterOptions(function_name: ''str'', using: ''Optional[List[FunctionArgument]]''
        = None)'
      properties:
        function_name:
          type: string
          description: The fully qualified name of the row filter function. The function
            is called on each row of the target table. It should return a boolean
            value indicating whether the row should be visible to the user. Required
            on create and update.
        using:
          type: string
          description: Optional list of column aliases or constant literals to be
            passed as arguments to the row filter function. The type of each column
            should match the positional argument of the row filter function.
    SchemaInfo:
      type: object
      description: 'Next ID: 42'
      properties:
        browse_only:
          type: string
          description: Indicates whether the principal is limited to retrieving metadata
            for the associated object through the BROWSE privilege when include_browse
            is enabled in the request.
        catalog_name:
          type: string
          description: 'Name of parent catalog.  catalog_type: Optional[CatalogType]
            = None The type of the parent catalog.'
        catalog_type:
          type: string
          description: 'The type of the parent catalog.  comment: Optional[str] =
            None User-provided free-form text description.'
        comment:
          type: string
          description: 'User-provided free-form text description.  created_at: Optional[int]
            = None Time at which this schema was created, in epoch milliseconds.'
        created_at:
          type: string
          description: 'Time at which this schema was created, in epoch milliseconds.  created_by:
            Optional[str] = None Username of schema creator.'
        created_by:
          type: string
          description: 'Username of schema creator.  effective_predictive_optimization_flag:
            Optional[EffectivePredictiveOptimizationFlag] = None  enable_predictive_optimization:
            Optional[EnablePredictiveOptimization] = None Whether predictive optimization
            should be enabled for this object and objects under it.'
        effective_predictive_optimization_flag:
          type: string
          description: ''
        enable_predictive_optimization:
          type: string
          description: 'Whether predictive optimization should be enabled for this
            object and objects under it.  full_name: Optional[str] = None Full name
            of schema, in form of __catalog_name__.__schema_name__.'
        full_name:
          type: string
          description: 'Full name of schema, in form of __catalog_name__.__schema_name__.  metastore_id:
            Optional[str] = None Unique identifier of parent metastore.'
        metastore_id:
          type: string
          description: 'Unique identifier of parent metastore.  name: Optional[str]
            = None Name of schema, relative to parent catalog.'
        name:
          type: string
          description: 'Name of parent catalog.  catalog_type: Optional[CatalogType]
            = None The type of the parent catalog.'
        owner:
          type: string
          description: 'Username of current owner of schema.  properties: Optional[Dict[str,
            str]] = None A map of key-value properties attached to the securable.'
        properties:
          type: string
          description: 'A map of key-value properties attached to the securable.  schema_id:
            Optional[str] = None The unique identifier of the schema.'
        schema_id:
          type: string
          description: 'The unique identifier of the schema.  storage_location: Optional[str]
            = None Storage location for managed tables within schema.'
        storage_location:
          type: string
          description: 'Storage location for managed tables within schema.  storage_root:
            Optional[str] = None Storage root URL for managed tables within schema.'
        storage_root:
          type: string
          description: 'Storage root URL for managed tables within schema.  updated_at:
            Optional[int] = None Time at which this schema was created, in epoch milliseconds.'
        updated_at:
          type: string
          description: 'Time at which this schema was created, in epoch milliseconds.  updated_by:
            Optional[str] = None Username of user who last modified schema.'
        updated_by:
          type: string
          description: 'Username of user who last modified schema.  def as_dict(self)
            -> dict: Serializes the SchemaInfo into a dictionary suitable for use
            as a JSON request body.'
    Securable:
      type: object
      description: 'Generic definition of a securable, which is uniquely defined in
        a metastore by its type and full

        name.'
      properties:
        full_name:
          type: string
          description: 'Required. The full name of the catalog/schema/table. Optional
            if resource_name is present.  provider_share: Optional[str] = None """Optional.
            The name of the Share object that contains the securable when the securable
            is getting shared in D2D Delta Sharing.'
        provider_share:
          type: string
          description: Optional. The name of the Share object that contains the securable
            when the securable is getting shared in D2D Delta Sharing.
        type:
          type: string
          description: 'Required. The type of securable (catalog/schema/table). Optional
            if resource_name is present.  def as_dict(self) -> dict: Serializes the
            Securable into a dictionary suitable for use as a JSON request body.'
    SecurableKind:
      type: string
      description: 'Latest kind: CONNECTION_SALESFORCE_OAUTH_MTLS = 268; Next id:269'
      enum:
      - TABLE_DB_STORAGE
      - TABLE_DELTA
      - TABLE_DELTASHARING
      - TABLE_DELTASHARING_MUTABLE
      - TABLE_DELTA_EXTERNAL
      - TABLE_DELTA_ICEBERG_DELTASHARING
      - TABLE_DELTA_ICEBERG_MANAGED
      - TABLE_DELTA_UNIFORM_HUDI_EXTERNAL
      - TABLE_DELTA_UNIFORM_ICEBERG_EXTERNAL
      - TABLE_DELTA_UNIFORM_ICEBERG_FOREIGN_DELTASHARING
      - TABLE_DELTA_UNIFORM_ICEBERG_FOREIGN_HIVE_METASTORE_EXTERNAL
      - TABLE_DELTA_UNIFORM_ICEBERG_FOREIGN_HIVE_METASTORE_MANAGED
      - TABLE_DELTA_UNIFORM_ICEBERG_FOREIGN_SNOWFLAKE
      - TABLE_EXTERNAL
      - TABLE_FEATURE_STORE
      - TABLE_FEATURE_STORE_EXTERNAL
      - TABLE_FOREIGN_BIGQUERY
      - TABLE_FOREIGN_DATABRICKS
      - TABLE_FOREIGN_DELTASHARING
      - TABLE_FOREIGN_HIVE_METASTORE
      - TABLE_FOREIGN_HIVE_METASTORE_DBFS_EXTERNAL
      - TABLE_FOREIGN_HIVE_METASTORE_DBFS_MANAGED
      - TABLE_FOREIGN_HIVE_METASTORE_DBFS_SHALLOW_CLONE_EXTERNAL
      - TABLE_FOREIGN_HIVE_METASTORE_DBFS_SHALLOW_CLONE_MANAGED
      - TABLE_FOREIGN_HIVE_METASTORE_DBFS_VIEW
      - TABLE_FOREIGN_HIVE_METASTORE_EXTERNAL
      - TABLE_FOREIGN_HIVE_METASTORE_MANAGED
      - TABLE_FOREIGN_HIVE_METASTORE_SHALLOW_CLONE_EXTERNAL
      - TABLE_FOREIGN_HIVE_METASTORE_SHALLOW_CLONE_MANAGED
      - TABLE_FOREIGN_HIVE_METASTORE_VIEW
      - TABLE_FOREIGN_MONGODB
      - TABLE_FOREIGN_MYSQL
      - TABLE_FOREIGN_NETSUITE
      - TABLE_FOREIGN_ORACLE
      - TABLE_FOREIGN_PALANTIR
      - TABLE_FOREIGN_POSTGRESQL
      - TABLE_FOREIGN_REDSHIFT
      - TABLE_FOREIGN_SALESFORCE
      - TABLE_FOREIGN_SALESFORCE_DATA_CLOUD
      - TABLE_FOREIGN_SALESFORCE_DATA_CLOUD_FILE_SHARING
      - TABLE_FOREIGN_SALESFORCE_DATA_CLOUD_FILE_SHARING_VIEW
      - TABLE_FOREIGN_SNOWFLAKE
      - TABLE_FOREIGN_SQLDW
      - TABLE_FOREIGN_SQLSERVER
      - TABLE_FOREIGN_TERADATA
      - TABLE_FOREIGN_WORKDAY_RAAS
      - TABLE_ICEBERG_UNIFORM_MANAGED
      - TABLE_INTERNAL
      - TABLE_MANAGED_POSTGRESQL
      - TABLE_MATERIALIZED_VIEW
      - TABLE_MATERIALIZED_VIEW_DELTASHARING
      - TABLE_METRIC_VIEW
      - TABLE_METRIC_VIEW_DELTASHARING
      - TABLE_ONLINE_VECTOR_INDEX_DIRECT
      - TABLE_ONLINE_VECTOR_INDEX_REPLICA
      - TABLE_ONLINE_VIEW
      - TABLE_STANDARD
      - TABLE_STREAMING_LIVE_TABLE
      - TABLE_STREAMING_LIVE_TABLE_DELTASHARING
      - TABLE_SYSTEM
      - TABLE_SYSTEM_DELTASHARING
      - TABLE_VIEW
      - TABLE_VIEW_DELTASHARING
    SecurableKindManifest:
      type: object
      description: Manifest of a specific securable kind.
      properties:
        assignable_privileges:
          type: string
          description: 'Privileges that can be assigned to the securable.  capabilities:
            Optional[List[str]] = None A list of capabilities in the securable kind.'
        capabilities:
          type: string
          description: 'A list of capabilities in the securable kind.  options: Optional[List[OptionSpec]]
            = None Detailed specs of allowed options.'
        options:
          type: string
          description: 'Detailed specs of allowed options.  securable_kind: Optional[SecurableKind]
            = None Securable kind to get manifest of.'
        securable_kind:
          type: string
          description: 'Securable kind to get manifest of.  securable_type: Optional[SecurableType]
            = None Securable Type of the kind.'
        securable_type:
          type: string
          description: 'Securable Type of the kind.  def as_dict(self) -> dict: Serializes
            the SecurableKindManifest into a dictionary suitable for use as a JSON
            request body.'
    SecurablePermissions:
      type: object
      description: 'SecurablePermissions(permissions: ''Optional[List[str]]'' = None,
        securable: ''Optional[Securable]'' = None)'
      properties:
        permissions:
          type: string
          description: 'List of requested Unity Catalog permissions.  securable: Optional[Securable]
            = None The securable for which the access request destinations are being
            requested.'
        securable:
          type: string
          description: 'The securable for which the access request destinations are
            being requested.  def as_dict(self) -> dict: Serializes the SecurablePermissions
            into a dictionary suitable for use as a JSON request body.'
    SecurableType:
      type: string
      description: The type of Unity Catalog securable.
      enum:
      - CATALOG
      - CLEAN_ROOM
      - CONNECTION
      - CREDENTIAL
      - EXTERNAL_LOCATION
      - EXTERNAL_METADATA
      - FUNCTION
      - METASTORE
      - PIPELINE
      - PROVIDER
      - RECIPIENT
      - SCHEMA
      - SHARE
      - STAGING_TABLE
      - STORAGE_CREDENTIAL
      - TABLE
      - VOLUME
    SpecialDestination:
      type: string
      description: 'Create a collection of name/value pairs.


        Example enumeration:


        >>> class Color(Enum):

        ...     RED = 1

        ...     BLUE = 2

        ...     GREEN = 3


        Access them by:


        - attribute access::


        >>> Color.RED

        <Color.RED: 1>


        - value lookup:


        >>> Color(1)

        <Color.RED: 1>


        - name lookup:


        >>> Color[''RED'']

        <Color.RED: 1>


        Enumerations can be iterated over, and know how many members they have:


        >>> len(Color)

        3


        >>> list(Color)

        [<Color.RED: 1>, <Color.BLUE: 2>, <Color.GREEN: 3>]


        Methods can be added to enumerations, and members can have their own

        attributes -- see the documentation for details.'
      enum:
      - SPECIAL_DESTINATION_CATALOG_OWNER
      - SPECIAL_DESTINATION_CONNECTION_OWNER
      - SPECIAL_DESTINATION_CREDENTIAL_OWNER
      - SPECIAL_DESTINATION_EXTERNAL_LOCATION_OWNER
      - SPECIAL_DESTINATION_METASTORE_OWNER
    SseEncryptionDetails:
      type: object
      description: Server-Side Encryption properties for clients communicating with
        AWS s3.
      properties:
        algorithm:
          type: string
          description: 'Sets the value of the ''x-amz-server-side-encryption'' header
            in S3 request.  aws_kms_key_arn: Optional[str] = None """Optional. The
            ARN of the SSE-KMS key used with the S3 location, when algorithm = "SSE-KMS".
            Sets the value of the ''x-amz-server-side-encryption-aws-kms-key-id''
            header.'
        aws_kms_key_arn:
          type: string
          description: Optional. The ARN of the SSE-KMS key used with the S3 location,
            when algorithm = "SSE-KMS". Sets the value of the 'x-amz-server-side-encryption-aws-kms-key-id'
            header.
    SseEncryptionDetailsAlgorithm:
      type: string
      description: 'Create a collection of name/value pairs.


        Example enumeration:


        >>> class Color(Enum):

        ...     RED = 1

        ...     BLUE = 2

        ...     GREEN = 3


        Access them by:


        - attribute access::


        >>> Color.RED

        <Color.RED: 1>


        - value lookup:


        >>> Color(1)

        <Color.RED: 1>


        - name lookup:


        >>> Color[''RED'']

        <Color.RED: 1>


        Enumerations can be iterated over, and know how many members they have:


        >>> len(Color)

        3


        >>> list(Color)

        [<Color.RED: 1>, <Color.BLUE: 2>, <Color.GREEN: 3>]


        Methods can be added to enumerations, and members can have their own

        attributes -- see the documentation for details.'
      enum:
      - AWS_SSE_KMS
      - AWS_SSE_S3
    StorageCredentialInfo:
      type: object
      description: 'StorageCredentialInfo(aws_iam_role: ''Optional[AwsIamRoleResponse]''
        = None, azure_managed_identity: ''Optional[AzureManagedIdentityResponse]''
        = None, azure_service_principal: ''Optional[AzureServicePrincipal]'' = None,
        cloudflare_api_token: ''Optional[CloudflareApiToken]'' = None, comment: ''Optional[str]''
        = None, created_at: ''Optional[int]'' = None, created_by: ''Optional[str]''
        = None, databricks_gcp_service_account: ''Optional[DatabricksGcpServiceAccountResponse]''
        = None, full_name: ''Optional[str]'' = None, id: ''Optional[str]'' = None,
        isolation_mode: ''Optional[IsolationMode]'' = None, metastore_id: ''Optional[str]''
        = None, name: ''Optional[str]'' = None, owner: ''Optional[str]'' = None, read_only:
        ''Optional[bool]'' = None, updated_at: ''Optional[int]'' = None, updated_by:
        ''Optional[str]'' = None, used_for_managed_storage: ''Optional[bool]'' = None)'
      properties:
        aws_iam_role:
          type: string
          description: 'The AWS IAM role configuration.  azure_managed_identity: Optional[AzureManagedIdentityResponse]
            = None The Azure managed identity configuration.'
        azure_managed_identity:
          type: string
          description: 'The Azure managed identity configuration.  azure_service_principal:
            Optional[AzureServicePrincipal] = None The Azure service principal configuration.'
        azure_service_principal:
          type: string
          description: 'The Azure service principal configuration.  cloudflare_api_token:
            Optional[CloudflareApiToken] = None The Cloudflare API token configuration.'
        cloudflare_api_token:
          type: string
          description: 'The Cloudflare API token configuration.  comment: Optional[str]
            = None Comment associated with the credential.'
        comment:
          type: string
          description: 'Comment associated with the credential.  created_at: Optional[int]
            = None Time at which this credential was created, in epoch milliseconds.'
        created_at:
          type: string
          description: 'Time at which this credential was created, in epoch milliseconds.  created_by:
            Optional[str] = None Username of credential creator.'
        created_by:
          type: string
          description: 'Username of credential creator.  databricks_gcp_service_account:
            Optional[DatabricksGcpServiceAccountResponse] = None The Databricks managed
            GCP service account configuration.'
        databricks_gcp_service_account:
          type: string
          description: 'The Databricks managed GCP service account configuration.  full_name:
            Optional[str] = None The full name of the credential.'
        full_name:
          type: string
          description: 'The full name of the credential.  id: Optional[str] = None
            The unique identifier of the credential.'
        id:
          type: string
          description: 'The unique identifier of the credential.  isolation_mode:
            Optional[IsolationMode] = None Whether the current securable is accessible
            from all workspaces or a specific set of workspaces.'
        isolation_mode:
          type: string
          description: 'Whether the current securable is accessible from all workspaces
            or a specific set of workspaces.  metastore_id: Optional[str] = None Unique
            identifier of the parent metastore.'
        metastore_id:
          type: string
          description: 'Unique identifier of the parent metastore.  name: Optional[str]
            = None """The credential name. The name must be unique among storage and
            service credentials within the metastore.'
        name:
          type: string
          description: 'The full name of the credential.  id: Optional[str] = None
            The unique identifier of the credential.'
        owner:
          type: string
          description: 'Username of current owner of credential.  read_only: Optional[bool]
            = None """Whether the credential is usable only for read operations. Only
            applicable when purpose is **STORAGE**.'
        read_only:
          type: string
          description: Whether the credential is usable only for read operations.
            Only applicable when purpose is **STORAGE**.
        updated_at:
          type: string
          description: 'Time at which this credential was last modified, in epoch
            milliseconds.  updated_by: Optional[str] = None Username of user who last
            modified the credential.'
        updated_by:
          type: string
          description: 'Username of user who last modified the credential.  used_for_managed_storage:
            Optional[bool] = None """Whether this credential is the current metastore''s
            root storage credential. Only applicable when purpose is **STORAGE**.'
        used_for_managed_storage:
          type: string
          description: Whether this credential is the current metastore's root storage
            credential. Only applicable when purpose is **STORAGE**.
    SystemSchemaInfo:
      type: object
      description: 'SystemSchemaInfo(schema: ''str'', state: ''str'')'
      properties:
        schema:
          type: string
          description: 'Name of the system schema.  state: str """The current state
            of enablement for the system schema. An empty string means the system
            schema is available and ready for opt-in. Possible values: AVAILABLE |
            ENABLE_INITIALIZED | ENABLE_COMPLETED | DISABLE_INITIALIZED | UNAVAILABLE
            | MANAGED'
        state:
          type: string
          description: 'The current state of enablement for the system schema. An
            empty string means the system schema is available and ready for opt-in.
            Possible values: AVAILABLE | ENABLE_INITIALIZED | ENABLE_COMPLETED | DISABLE_INITIALIZED
            | UNAVAILABLE | MANAGED'
    SystemType:
      type: string
      description: 'Create a collection of name/value pairs.


        Example enumeration:


        >>> class Color(Enum):

        ...     RED = 1

        ...     BLUE = 2

        ...     GREEN = 3


        Access them by:


        - attribute access::


        >>> Color.RED

        <Color.RED: 1>


        - value lookup:


        >>> Color(1)

        <Color.RED: 1>


        - name lookup:


        >>> Color[''RED'']

        <Color.RED: 1>


        Enumerations can be iterated over, and know how many members they have:


        >>> len(Color)

        3


        >>> list(Color)

        [<Color.RED: 1>, <Color.BLUE: 2>, <Color.GREEN: 3>]


        Methods can be added to enumerations, and members can have their own

        attributes -- see the documentation for details.'
      enum:
      - AMAZON_REDSHIFT
      - AZURE_SYNAPSE
      - CONFLUENT
      - DATABRICKS
      - GOOGLE_BIGQUERY
      - KAFKA
      - LOOKER
      - MICROSOFT_FABRIC
      - MICROSOFT_SQL_SERVER
      - MONGODB
      - MYSQL
      - ORACLE
      - OTHER
      - POSTGRESQL
      - POWER_BI
      - SALESFORCE
      - SAP
      - SERVICENOW
      - SNOWFLAKE
      - STREAM_NATIVE
      - TABLEAU
      - TERADATA
      - WORKDAY
    TableConstraint:
      type: object
      description: 'A table constraint, as defined by *one* of the following fields
        being set:

        __primary_key_constraint__, __foreign_key_constraint__, __named_table_constraint__.'
      properties:
        foreign_key_constraint:
          type: string
          description: ''
        named_table_constraint:
          type: string
          description: ''
        primary_key_constraint:
          type: string
          description: ''
    TableDependency:
      type: object
      description: A table that is dependent on a SQL object.
      properties:
        table_full_name:
          type: string
          description: Full name of the dependent table, in the form of __catalog_name__.__schema_name__.__table_name__.
    TableExistsResponse:
      type: object
      description: 'TableExistsResponse(table_exists: ''Optional[bool]'' = None)'
      properties:
        table_exists:
          type: string
          description: 'Whether the table exists or not.  def as_dict(self) -> dict:
            Serializes the TableExistsResponse into a dictionary suitable for use
            as a JSON request body.'
    TableInfo:
      type: object
      description: 'TableInfo(access_point: ''Optional[str]'' = None, browse_only:
        ''Optional[bool]'' = None, catalog_name: ''Optional[str]'' = None, columns:
        ''Optional[List[ColumnInfo]]'' = None, comment: ''Optional[str]'' = None,
        created_at: ''Optional[int]'' = None, created_by: ''Optional[str]'' = None,
        data_access_configuration_id: ''Optional[str]'' = None, data_source_format:
        ''Optional[DataSourceFormat]'' = None, deleted_at: ''Optional[int]'' = None,
        delta_runtime_properties_kvpairs: ''Optional[DeltaRuntimePropertiesKvPairs]''
        = None, effective_predictive_optimization_flag: ''Optional[EffectivePredictiveOptimizationFlag]''
        = None, enable_predictive_optimization: ''Optional[EnablePredictiveOptimization]''
        = None, encryption_details: ''Optional[EncryptionDetails]'' = None, full_name:
        ''Optional[str]'' = None, metastore_id: ''Optional[str]'' = None, name: ''Optional[str]''
        = None, owner: ''Optional[str]'' = None, pipeline_id: ''Optional[str]'' =
        None, properties: ''Optional[Dict[str, str]]'' = None, row_filter: ''Optional[TableRowFilter]''
        = None, schema_name: ''Optional[str]'' = None, securable_kind_manifest: ''Optional[SecurableKindManifest]''
        = None, sql_path: ''Optional[str]'' = None, storage_credential_name: ''Optional[str]''
        = None, storage_location: ''Optional[str]'' = None, table_constraints: ''Optional[List[TableConstraint]]''
        = None, table_id: ''Optional[str]'' = None, table_type: ''Optional[TableType]''
        = None, updated_at: ''Optional[int]'' = None, updated_by: ''Optional[str]''
        = None, view_definition: ''Optional[str]'' = None, view_dependencies: ''Optional[DependencyList]''
        = None)'
      properties:
        access_point:
          type: string
          description: 'The AWS access point to use when accesing s3 for this external
            location.  browse_only: Optional[bool] = None """Indicates whether the
            principal is limited to retrieving metadata for the associated object
            through the BROWSE privilege when include_browse is enabled in the request.'
        browse_only:
          type: string
          description: Indicates whether the principal is limited to retrieving metadata
            for the associated object through the BROWSE privilege when include_browse
            is enabled in the request.
        catalog_name:
          type: string
          description: 'Name of parent catalog.  columns: Optional[List[ColumnInfo]]
            = None The array of __ColumnInfo__ definitions of the table''s columns.'
        columns:
          type: string
          description: 'The array of __ColumnInfo__ definitions of the table''s columns.  comment:
            Optional[str] = None User-provided free-form text description.'
        comment:
          type: string
          description: 'User-provided free-form text description.  created_at: Optional[int]
            = None Time at which this table was created, in epoch milliseconds.'
        created_at:
          type: string
          description: 'Time at which this table was created, in epoch milliseconds.  created_by:
            Optional[str] = None Username of table creator.'
        created_by:
          type: string
          description: 'Username of table creator.  data_access_configuration_id:
            Optional[str] = None Unique ID of the Data Access Configuration to use
            with the table data.'
        data_access_configuration_id:
          type: string
          description: 'Unique ID of the Data Access Configuration to use with the
            table data.  data_source_format: Optional[DataSourceFormat] = None  deleted_at:
            Optional[int] = None """Time at which this table was deleted, in epoch
            milliseconds. Field is omitted if table is not deleted.'
        data_source_format:
          type: string
          description: ''
        deleted_at:
          type: string
          description: Time at which this table was deleted, in epoch milliseconds.
            Field is omitted if table is not deleted.
        delta_runtime_properties_kvpairs:
          type: string
          description: 'Information pertaining to current state of the delta table.  effective_predictive_optimization_flag:
            Optional[EffectivePredictiveOptimizationFlag] = None  enable_predictive_optimization:
            Optional[EnablePredictiveOptimization] = None  encryption_details: Optional[EncryptionDetails]
            = None  full_name: Optional[str] = None Full name of table, in form of
            __catalog_name__.__schema_name__.__table_name__'
        effective_predictive_optimization_flag:
          type: string
          description: ''
        enable_predictive_optimization:
          type: string
          description: ''
        encryption_details:
          type: string
          description: ''
        full_name:
          type: string
          description: 'Full name of table, in form of __catalog_name__.__schema_name__.__table_name__  metastore_id:
            Optional[str] = None Unique identifier of parent metastore.'
        metastore_id:
          type: string
          description: 'Unique identifier of parent metastore.  name: Optional[str]
            = None Name of table, relative to parent schema.'
        name:
          type: string
          description: 'Name of parent catalog.  columns: Optional[List[ColumnInfo]]
            = None The array of __ColumnInfo__ definitions of the table''s columns.'
        owner:
          type: string
          description: 'Username of current owner of table.  pipeline_id: Optional[str]
            = None """The pipeline ID of the table. Applicable for tables created
            by pipelines (Materialized View, Streaming Table, etc.).'
        pipeline_id:
          type: string
          description: The pipeline ID of the table. Applicable for tables created
            by pipelines (Materialized View, Streaming Table, etc.).
        properties:
          type: string
          description: 'A map of key-value properties attached to the securable.  row_filter:
            Optional[TableRowFilter] = None  schema_name: Optional[str] = None Name
            of parent schema relative to its parent catalog.'
        row_filter:
          type: string
          description: ''
        schema_name:
          type: string
          description: 'Name of parent schema relative to its parent catalog.  securable_kind_manifest:
            Optional[SecurableKindManifest] = None SecurableKindManifest of table,
            including capabilities the table has.'
        securable_kind_manifest:
          type: string
          description: 'SecurableKindManifest of table, including capabilities the
            table has.  sql_path: Optional[str] = None List of schemes whose objects
            can be referenced without qualification.'
        sql_path:
          type: string
          description: 'List of schemes whose objects can be referenced without qualification.  storage_credential_name:
            Optional[str] = None Name of the storage credential, when a storage credential
            is configured for use with this table.'
        storage_credential_name:
          type: string
          description: 'Name of the storage credential, when a storage credential
            is configured for use with this table.  storage_location: Optional[str]
            = None Storage root URL for table (for **MANAGED**, **EXTERNAL** tables).'
        storage_location:
          type: string
          description: 'Storage root URL for table (for **MANAGED**, **EXTERNAL**
            tables).  table_constraints: Optional[List[TableConstraint]] = None List
            of table constraints. Note: this field is not set in the output of the
            __listTables__ API.'
        table_constraints:
          type: string
          description: 'List of table constraints. Note: this field is not set in
            the output of the __listTables__ API.  table_id: Optional[str] = None
            The unique identifier of the table.'
        table_id:
          type: string
          description: 'The unique identifier of the table.  table_type: Optional[TableType]
            = None  updated_at: Optional[int] = None Time at which this table was
            last modified, in epoch milliseconds.'
        table_type:
          type: string
          description: ''
        updated_at:
          type: string
          description: 'Time at which this table was last modified, in epoch milliseconds.  updated_by:
            Optional[str] = None Username of user who last modified the table.'
        updated_by:
          type: string
          description: 'Username of user who last modified the table.  view_definition:
            Optional[str] = None """View definition SQL (when __table_type__ is **VIEW**,
            **MATERIALIZED_VIEW**, or **STREAMING_TABLE**)'
        view_definition:
          type: string
          description: View definition SQL (when __table_type__ is **VIEW**, **MATERIALIZED_VIEW**,
            or **STREAMING_TABLE**)
        view_dependencies:
          type: string
          description: View dependencies (when table_type == **VIEW** or **MATERIALIZED_VIEW**,
            **STREAMING_TABLE**) - when DependencyList is None, the dependency is
            not provided; - when DependencyList is an empty list, the dependency is
            provided but is empty; - when DependencyList is not an empty list, dependencies
            are provided and recorded.
    TableOperation:
      type: string
      description: 'Create a collection of name/value pairs.


        Example enumeration:


        >>> class Color(Enum):

        ...     RED = 1

        ...     BLUE = 2

        ...     GREEN = 3


        Access them by:


        - attribute access::


        >>> Color.RED

        <Color.RED: 1>


        - value lookup:


        >>> Color(1)

        <Color.RED: 1>


        - name lookup:


        >>> Color[''RED'']

        <Color.RED: 1>


        Enumerations can be iterated over, and know how many members they have:


        >>> len(Color)

        3


        >>> list(Color)

        [<Color.RED: 1>, <Color.BLUE: 2>, <Color.GREEN: 3>]


        Methods can be added to enumerations, and members can have their own

        attributes -- see the documentation for details.'
      enum:
      - READ
      - READ_WRITE
    TableRowFilter:
      type: object
      description: 'TableRowFilter(function_name: ''str'', input_column_names: ''List[str]'')'
      properties:
        function_name:
          type: string
          description: 'The full name of the row filter SQL UDF.  input_column_names:
            List[str] """The list of table columns to be passed as input to the row
            filter function. The column types should match the types of the filter
            function arguments.'
        input_column_names:
          type: string
          description: The list of table columns to be passed as input to the row
            filter function. The column types should match the types of the filter
            function arguments.
    TableSummary:
      type: object
      description: 'TableSummary(full_name: ''Optional[str]'' = None, securable_kind_manifest:
        ''Optional[SecurableKindManifest]'' = None, table_type: ''Optional[TableType]''
        = None)'
      properties:
        full_name:
          type: string
          description: 'The full name of the table.  securable_kind_manifest: Optional[SecurableKindManifest]
            = None SecurableKindManifest of table, including capabilities the table
            has.'
        securable_kind_manifest:
          type: string
          description: 'SecurableKindManifest of table, including capabilities the
            table has.  table_type: Optional[TableType] = None  def as_dict(self)
            -> dict: Serializes the TableSummary into a dictionary suitable for use
            as a JSON request body.'
        table_type:
          type: string
          description: ''
    TableType:
      type: string
      description: 'Create a collection of name/value pairs.


        Example enumeration:


        >>> class Color(Enum):

        ...     RED = 1

        ...     BLUE = 2

        ...     GREEN = 3


        Access them by:


        - attribute access::


        >>> Color.RED

        <Color.RED: 1>


        - value lookup:


        >>> Color(1)

        <Color.RED: 1>


        - name lookup:


        >>> Color[''RED'']

        <Color.RED: 1>


        Enumerations can be iterated over, and know how many members they have:


        >>> len(Color)

        3


        >>> list(Color)

        [<Color.RED: 1>, <Color.BLUE: 2>, <Color.GREEN: 3>]


        Methods can be added to enumerations, and members can have their own

        attributes -- see the documentation for details.'
      enum:
      - EXTERNAL
      - EXTERNAL_SHALLOW_CLONE
      - FOREIGN
      - MANAGED
      - MANAGED_SHALLOW_CLONE
      - MATERIALIZED_VIEW
      - METRIC_VIEW
      - STREAMING_TABLE
      - VIEW
    TagKeyValue:
      type: object
      description: 'TagKeyValue(key: ''Optional[str]'' = None, value: ''Optional[str]''
        = None)'
      properties:
        key:
          type: string
          description: 'name of the tag  value: Optional[str] = None value of the
            tag associated with the key, could be optional'
        value:
          type: string
          description: 'value of the tag associated with the key, could be optional  def
            as_dict(self) -> dict: Serializes the TagKeyValue into a dictionary suitable
            for use as a JSON request body.'
    TemporaryCredentials:
      type: object
      description: 'TemporaryCredentials(aws_temp_credentials: ''Optional[AwsCredentials]''
        = None, azure_aad: ''Optional[AzureActiveDirectoryToken]'' = None, expiration_time:
        ''Optional[int]'' = None, gcp_oauth_token: ''Optional[GcpOauthToken]'' = None)'
      properties:
        aws_temp_credentials:
          type: string
          description: ''
        azure_aad:
          type: string
          description: ''
        expiration_time:
          type: string
          description: Server time when the credential will expire, in epoch milliseconds.
            The API client is advised to cache the credential given this expiration
            time.
        gcp_oauth_token:
          type: string
          description: ''
    TriggeredUpdateStatus:
      type: object
      description: 'Detailed status of an online table. Shown if the online table
        is in the ONLINE_TRIGGERED_UPDATE

        or the ONLINE_NO_PENDING_UPDATE state.'
      properties:
        last_processed_commit_version:
          type: string
          description: The last source table Delta version that was synced to the
            online table. Note that this Delta version may not be completely synced
            to the online table yet.
        timestamp:
          type: string
          description: The timestamp of the last time any data was synchronized from
            the source table to the online table.
        triggered_update_progress:
          type: string
          description: 'Progress of the active data synchronization pipeline.  def
            as_dict(self) -> dict: Serializes the TriggeredUpdateStatus into a dictionary
            suitable for use as a JSON request body.'
    UnassignResponse:
      type: object
      description: UnassignResponse()
      properties: {}
    UpdateAccountsMetastore:
      type: object
      description: 'UpdateAccountsMetastore(delta_sharing_organization_name: ''Optional[str]''
        = None, delta_sharing_recipient_token_lifetime_in_seconds: ''Optional[int]''
        = None, delta_sharing_scope: ''Optional[DeltaSharingScopeEnum]'' = None, owner:
        ''Optional[str]'' = None, privilege_model_version: ''Optional[str]'' = None,
        storage_root_credential_id: ''Optional[str]'' = None)'
      properties:
        delta_sharing_organization_name:
          type: string
          description: The organization name of a Delta Sharing entity, to be used
            in Databricks-to-Databricks Delta Sharing as the official name.
        delta_sharing_recipient_token_lifetime_in_seconds:
          type: string
          description: 'The lifetime of delta sharing recipient token in seconds.  delta_sharing_scope:
            Optional[DeltaSharingScopeEnum] = None The scope of Delta Sharing enabled
            for the metastore.'
        delta_sharing_scope:
          type: string
          description: 'The scope of Delta Sharing enabled for the metastore.  owner:
            Optional[str] = None The owner of the metastore.'
        owner:
          type: string
          description: 'The owner of the metastore.  privilege_model_version: Optional[str]
            = None Privilege model version of the metastore, of the form `major.minor`
            (e.g., `1.0`).'
        privilege_model_version:
          type: string
          description: 'Privilege model version of the metastore, of the form `major.minor`
            (e.g., `1.0`).  storage_root_credential_id: Optional[str] = None UUID
            of storage credential to access the metastore storage_root.'
        storage_root_credential_id:
          type: string
          description: 'UUID of storage credential to access the metastore storage_root.  def
            as_dict(self) -> dict: Serializes the UpdateAccountsMetastore into a dictionary
            suitable for use as a JSON request body.'
    UpdateAccountsStorageCredential:
      type: object
      description: 'UpdateAccountsStorageCredential(aws_iam_role: ''Optional[AwsIamRoleRequest]''
        = None, azure_managed_identity: ''Optional[AzureManagedIdentityResponse]''
        = None, azure_service_principal: ''Optional[AzureServicePrincipal]'' = None,
        cloudflare_api_token: ''Optional[CloudflareApiToken]'' = None, comment: ''Optional[str]''
        = None, databricks_gcp_service_account: ''Optional[DatabricksGcpServiceAccountRequest]''
        = None, isolation_mode: ''Optional[IsolationMode]'' = None, owner: ''Optional[str]''
        = None, read_only: ''Optional[bool]'' = None)'
      properties:
        aws_iam_role:
          type: string
          description: 'The AWS IAM role configuration.  azure_managed_identity: Optional[AzureManagedIdentityResponse]
            = None The Azure managed identity configuration.'
        azure_managed_identity:
          type: string
          description: 'The Azure managed identity configuration.  azure_service_principal:
            Optional[AzureServicePrincipal] = None The Azure service principal configuration.'
        azure_service_principal:
          type: string
          description: 'The Azure service principal configuration.  cloudflare_api_token:
            Optional[CloudflareApiToken] = None The Cloudflare API token configuration.'
        cloudflare_api_token:
          type: string
          description: 'The Cloudflare API token configuration.  comment: Optional[str]
            = None Comment associated with the credential.'
        comment:
          type: string
          description: 'Comment associated with the credential.  databricks_gcp_service_account:
            Optional[DatabricksGcpServiceAccountRequest] = None The Databricks managed
            GCP service account configuration.'
        databricks_gcp_service_account:
          type: string
          description: 'The Databricks managed GCP service account configuration.  isolation_mode:
            Optional[IsolationMode] = None Whether the current securable is accessible
            from all workspaces or a specific set of workspaces.'
        isolation_mode:
          type: string
          description: 'Whether the current securable is accessible from all workspaces
            or a specific set of workspaces.  owner: Optional[str] = None Username
            of current owner of credential.'
        owner:
          type: string
          description: 'Username of current owner of credential.  read_only: Optional[bool]
            = None """Whether the credential is usable only for read operations. Only
            applicable when purpose is **STORAGE**.'
        read_only:
          type: string
          description: Whether the credential is usable only for read operations.
            Only applicable when purpose is **STORAGE**.
    UpdateAssignmentResponse:
      type: object
      description: UpdateAssignmentResponse()
      properties: {}
    UpdateCatalogWorkspaceBindingsResponse:
      type: object
      description: 'UpdateCatalogWorkspaceBindingsResponse(workspaces: ''Optional[List[int]]''
        = None)'
      properties:
        workspaces:
          type: string
          description: 'A list of workspace IDs  def as_dict(self) -> dict: Serializes
            the UpdateCatalogWorkspaceBindingsResponse into a dictionary suitable
            for use as a JSON request body.'
    UpdateMetastoreAssignment:
      type: object
      description: 'UpdateMetastoreAssignment(default_catalog_name: ''Optional[str]''
        = None, metastore_id: ''Optional[str]'' = None, workspace_id: ''Optional[int]''
        = None)'
      properties:
        default_catalog_name:
          type: string
          description: The name of the default catalog in the metastore. This field
            is deprecated. Please use "Default Namespace API" to configure the default
            catalog for a Databricks workspace.
        metastore_id:
          type: string
          description: 'The unique ID of the metastore.  workspace_id: Optional[int]
            = None A workspace ID.'
        workspace_id:
          type: string
          description: 'A workspace ID.  def as_dict(self) -> dict: Serializes the
            UpdateMetastoreAssignment into a dictionary suitable for use as a JSON
            request body.'
    UpdatePermissionsResponse:
      type: object
      description: 'UpdatePermissionsResponse(privilege_assignments: ''Optional[List[PrivilegeAssignment]]''
        = None)'
      properties:
        privilege_assignments:
          type: string
          description: 'The privileges assigned to each principal  def as_dict(self)
            -> dict: Serializes the UpdatePermissionsResponse into a dictionary suitable
            for use as a JSON request body.'
    UpdateRequestExternalLineage:
      type: object
      description: 'UpdateRequestExternalLineage(source: ''ExternalLineageObject'',
        target: ''ExternalLineageObject'', columns: ''Optional[List[ColumnRelationship]]''
        = None, id: ''Optional[str]'' = None, properties: ''Optional[Dict[str, str]]''
        = None)'
      properties:
        source:
          type: string
          description: 'Source object of the external lineage relationship.  target:
            ExternalLineageObject Target object of the external lineage relationship.'
        target:
          type: string
          description: 'Target object of the external lineage relationship.  columns:
            Optional[List[ColumnRelationship]] = None List of column relationships
            between source and target objects.'
        columns:
          type: string
          description: 'List of column relationships between source and target objects.  id:
            Optional[str] = None Unique identifier of the external lineage relationship.'
        id:
          type: string
          description: 'Unique identifier of the external lineage relationship.  properties:
            Optional[Dict[str, str]] = None Key-value properties associated with the
            external lineage relationship.'
        properties:
          type: string
          description: 'Key-value properties associated with the external lineage
            relationship.  def as_dict(self) -> dict: Serializes the UpdateRequestExternalLineage
            into a dictionary suitable for use as a JSON request body.'
    UpdateResponse:
      type: object
      description: UpdateResponse()
      properties: {}
    UpdateWorkspaceBindingsResponse:
      type: object
      description: A list of workspace IDs that are bound to the securable
      properties:
        bindings:
          type: string
          description: 'List of workspace bindings.  def as_dict(self) -> dict: Serializes
            the UpdateWorkspaceBindingsResponse into a dictionary suitable for use
            as a JSON request body.'
    ValidateCredentialResponse:
      type: object
      description: 'ValidateCredentialResponse(is_dir: ''Optional[bool]'' = None,
        results: ''Optional[List[CredentialValidationResult]]'' = None)'
      properties:
        is_dir:
          type: string
          description: Whether the tested location is a directory in cloud storage.
            Only applicable for when purpose is **STORAGE**.
        results:
          type: string
          description: 'The results of the validation check.  def as_dict(self) ->
            dict: Serializes the ValidateCredentialResponse into a dictionary suitable
            for use as a JSON request body.'
    ValidateCredentialResult:
      type: string
      description: A enum represents the result of the file operation
      enum:
      - FAIL
      - PASS
      - SKIP
    ValidateStorageCredentialResponse:
      type: object
      description: 'ValidateStorageCredentialResponse(is_dir: ''Optional[bool]'' =
        None, results: ''Optional[List[ValidationResult]]'' = None)'
      properties:
        is_dir:
          type: string
          description: 'Whether the tested location is a directory in cloud storage.  results:
            Optional[List[ValidationResult]] = None The results of the validation
            check.'
        results:
          type: string
          description: 'The results of the validation check.  def as_dict(self) ->
            dict: Serializes the ValidateStorageCredentialResponse into a dictionary
            suitable for use as a JSON request body.'
    ValidationResult:
      type: object
      description: 'ValidationResult(message: ''Optional[str]'' = None, operation:
        ''Optional[ValidationResultOperation]'' = None, result: ''Optional[ValidationResultResult]''
        = None)'
      properties:
        message:
          type: string
          description: 'Error message would exist when the result does not equal to
            **PASS**.  operation: Optional[ValidationResultOperation] = None The operation
            tested.'
        operation:
          type: string
          description: 'The operation tested.  result: Optional[ValidationResultResult]
            = None The results of the tested operation.'
        result:
          type: string
          description: 'The results of the tested operation.  def as_dict(self) ->
            dict: Serializes the ValidationResult into a dictionary suitable for use
            as a JSON request body.'
    ValidationResultOperation:
      type: string
      description: 'A enum represents the file operation performed on the external
        location with the storage

        credential'
      enum:
      - DELETE
      - LIST
      - PATH_EXISTS
      - READ
      - WRITE
    ValidationResultResult:
      type: string
      description: A enum represents the result of the file operation
      enum:
      - FAIL
      - PASS
      - SKIP
    VolumeInfo:
      type: object
      description: 'VolumeInfo(access_point: ''Optional[str]'' = None, browse_only:
        ''Optional[bool]'' = None, catalog_name: ''Optional[str]'' = None, comment:
        ''Optional[str]'' = None, created_at: ''Optional[int]'' = None, created_by:
        ''Optional[str]'' = None, encryption_details: ''Optional[EncryptionDetails]''
        = None, full_name: ''Optional[str]'' = None, metastore_id: ''Optional[str]''
        = None, name: ''Optional[str]'' = None, owner: ''Optional[str]'' = None, schema_name:
        ''Optional[str]'' = None, storage_location: ''Optional[str]'' = None, updated_at:
        ''Optional[int]'' = None, updated_by: ''Optional[str]'' = None, volume_id:
        ''Optional[str]'' = None, volume_type: ''Optional[VolumeType]'' = None)'
      properties:
        access_point:
          type: string
          description: 'The AWS access point to use when accesing s3 for this external
            location.  browse_only: Optional[bool] = None """Indicates whether the
            principal is limited to retrieving metadata for the associated object
            through the BROWSE privilege when include_browse is enabled in the request.'
        browse_only:
          type: string
          description: Indicates whether the principal is limited to retrieving metadata
            for the associated object through the BROWSE privilege when include_browse
            is enabled in the request.
        catalog_name:
          type: string
          description: 'The name of the catalog where the schema and the volume are  comment:
            Optional[str] = None The comment attached to the volume'
        comment:
          type: string
          description: 'The comment attached to the volume  created_at: Optional[int]
            = None  created_by: Optional[str] = None The identifier of the user who
            created the volume'
        created_at:
          type: string
          description: ''
        created_by:
          type: string
          description: 'The identifier of the user who created the volume  encryption_details:
            Optional[EncryptionDetails] = None  full_name: Optional[str] = None The
            three-level (fully qualified) name of the volume'
        encryption_details:
          type: string
          description: ''
        full_name:
          type: string
          description: 'The three-level (fully qualified) name of the volume  metastore_id:
            Optional[str] = None The unique identifier of the metastore'
        metastore_id:
          type: string
          description: 'The unique identifier of the metastore  name: Optional[str]
            = None The name of the volume'
        name:
          type: string
          description: 'The name of the catalog where the schema and the volume are  comment:
            Optional[str] = None The comment attached to the volume'
        owner:
          type: string
          description: 'The identifier of the user who owns the volume  schema_name:
            Optional[str] = None The name of the schema where the volume is'
        schema_name:
          type: string
          description: 'The name of the schema where the volume is  storage_location:
            Optional[str] = None The storage location on the cloud'
        storage_location:
          type: string
          description: 'The storage location on the cloud  updated_at: Optional[int]
            = None  updated_by: Optional[str] = None The identifier of the user who
            updated the volume last time'
        updated_at:
          type: string
          description: ''
        updated_by:
          type: string
          description: 'The identifier of the user who updated the volume last time  volume_id:
            Optional[str] = None The unique identifier of the volume'
        volume_id:
          type: string
          description: 'The unique identifier of the volume  volume_type: Optional[VolumeType]
            = None """The type of the volume. An external volume is located in the
            specified external location. A managed volume is located in the default
            location which is specified by the parent schema, or the parent catalog,
            or the Metastore. [Learn more]  [Learn more]: https://docs.databricks.com/aws/en/volumes/managed-vs-external'
        volume_type:
          type: string
          description: 'The type of the volume. An external volume is located in the
            specified external location. A managed volume is located in the default
            location which is specified by the parent schema, or the parent catalog,
            or the Metastore. [Learn more]  [Learn more]: https://docs.databricks.com/aws/en/volumes/managed-vs-external'
    VolumeType:
      type: string
      description: 'Create a collection of name/value pairs.


        Example enumeration:


        >>> class Color(Enum):

        ...     RED = 1

        ...     BLUE = 2

        ...     GREEN = 3


        Access them by:


        - attribute access::


        >>> Color.RED

        <Color.RED: 1>


        - value lookup:


        >>> Color(1)

        <Color.RED: 1>


        - name lookup:


        >>> Color[''RED'']

        <Color.RED: 1>


        Enumerations can be iterated over, and know how many members they have:


        >>> len(Color)

        3


        >>> list(Color)

        [<Color.RED: 1>, <Color.BLUE: 2>, <Color.GREEN: 3>]


        Methods can be added to enumerations, and members can have their own

        attributes -- see the documentation for details.'
      enum:
      - EXTERNAL
      - MANAGED
    WorkspaceBinding:
      type: object
      description: 'WorkspaceBinding(workspace_id: ''int'', binding_type: ''Optional[WorkspaceBindingBindingType]''
        = None)'
      properties:
        workspace_id:
          type: string
          description: 'Required  binding_type: Optional[WorkspaceBindingBindingType]
            = None One of READ_WRITE/READ_ONLY. Default is READ_WRITE.'
        binding_type:
          type: string
          description: 'One of READ_WRITE/READ_ONLY. Default is READ_WRITE.  def as_dict(self)
            -> dict: Serializes the WorkspaceBinding into a dictionary suitable for
            use as a JSON request body.'
    WorkspaceBindingBindingType:
      type: string
      description: 'Using `BINDING_TYPE_` prefix here to avoid conflict with `TableOperation`
        enum in

        `credentials_common.proto`.'
      enum:
      - BINDING_TYPE_READ_ONLY
      - BINDING_TYPE_READ_WRITE
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Databricks personal access token
security:
- bearerAuth: []
