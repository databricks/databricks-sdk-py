# Code generated by Databricks SDK Generator. DO NOT EDIT.

import json
from typing import Any

import pytest
from google.protobuf.duration_pb2 import Duration
from google.protobuf.timestamp_pb2 import Timestamp

from databricks.sdk.common.types.fieldmask import FieldMask
from tests.databricks.sdk.service.jsonmarshallv2 import (NestedMessage,
                                                         OptionalFields,
                                                         RepeatedFields,
                                                         RequiredFields,
                                                         TestEnum)


# Helper methods for well known types
def _duration(d: str) -> Duration:
    dur = Duration()
    dur.FromJsonString(d)
    return dur


def _timestamp(d: str) -> Timestamp:
    ts = Timestamp()
    ts.FromJsonString(d)
    return ts


def _fieldmask(d: str) -> FieldMask:
    fm = FieldMask()
    fm.FromJsonString(d)
    return fm


@pytest.mark.parametrize(
    "from_dict_method,instance,expected_json",
    [
        (
            OptionalFields.from_dict,
            OptionalFields(
                optional_string="test",
            ),
            """{
				"optional_string": "test"
			}""",
        ),
        (
            OptionalFields.from_dict,
            OptionalFields(
                optional_int32=42,
            ),
            """{
				"optional_int32": 42
			}""",
        ),
        (
            OptionalFields.from_dict,
            OptionalFields(
                optional_int64=9223372036854775807,
            ),
            """{
				"optional_int64": 9223372036854775807
			}""",
        ),
        (
            OptionalFields.from_dict,
            OptionalFields(
                optional_bool=True,
            ),
            """{
				"optional_bool": true
			}""",
        ),
        (
            OptionalFields.from_dict,
            OptionalFields(
                test_enum=TestEnum.TEST_ENUM_ONE,
            ),
            """{
				"test_enum": "TEST_ENUM_ONE"
			}""",
        ),
        (
            OptionalFields.from_dict,
            OptionalFields(
                optional_message=NestedMessage(
                    optional_string="nested_value",
                ),
            ),
            """{
				"optional_message": {
					"optional_string": "nested_value"
				}
			}""",
        ),
        (
            OptionalFields.from_dict,
            OptionalFields(
                map={
                    "key": "test_key",
                    "value": "test_value",
                },
            ),
            """{
				"map": {
					"key": "test_key",
					"value": "test_value"
				}
			}""",
        ),
        (
            OptionalFields.from_dict,
            OptionalFields(
                duration=_duration("3600s"),
            ),
            """{
				"duration": "3600s"
			}""",
        ),
        (
            OptionalFields.from_dict,
            OptionalFields(
                field_mask=_fieldmask("optional_string,optional_int32"),
            ),
            """{
				"field_mask": "optional_string,optional_int32"
			}""",
        ),
        (
            OptionalFields.from_dict,
            OptionalFields(
                timestamp=_timestamp("2023-01-01T00:00:00Z"),
            ),
            """{
				"timestamp": "2023-01-01T00:00:00Z"
			}""",
        ),
        (
            OptionalFields.from_dict,
            OptionalFields(
                optional_bool=True,
                optional_int32=42,
                optional_string="test",
            ),
            """{
				"optional_string":"test",
				"optional_int32":42,
				"optional_bool":true
			}""",
        ),
        (
            RequiredFields.from_dict,
            RequiredFields(
                required_bool=False,
                required_duration=_duration("0s"),
                required_field_mask=None,
                required_int32=0,
                required_int64=0,
                required_list_value=[],
                required_message=NestedMessage(),
                required_string="",
                required_struct={},
                required_timestamp=_timestamp("1970-01-01T00:00:00Z"),
                required_value=json.loads("{}"),
                test_required_enum=TestEnum.TEST_ENUM_ONE,
            ),
            """{
					"required_string": "",
					"required_int32": 0,
					"required_int64": 0,
					"required_bool": false,
					"required_message": {},
					"test_required_enum": "TEST_ENUM_ONE",
					"required_duration": "0s",
					"required_timestamp": "1970-01-01T00:00:00Z"
				}""",
        ),
        (
            RequiredFields.from_dict,
            RequiredFields(
                required_bool=True,
                required_duration=_duration("7200s"),
                required_field_mask=_fieldmask("required_string,required_int32"),
                required_int32=42,
                required_int64=1234567890123456789,
                required_list_value=[],
                required_message=NestedMessage(),
                required_string="non_default_string",
                required_struct={},
                required_timestamp=_timestamp("2023-12-31T23:59:59Z"),
                required_value=json.loads("{}"),
                test_required_enum=TestEnum.TEST_ENUM_TWO,
            ),
            """{
				"required_string": "non_default_string",
				"required_int32": 42,
				"required_int64": 1234567890123456789,
				"required_bool": true,
				"required_message": {},
				"test_required_enum": "TEST_ENUM_TWO",
				"required_duration": "7200s",
				"required_field_mask": "required_string,required_int32",
				"required_timestamp": "2023-12-31T23:59:59Z"
			}""",
        ),
        (
            RepeatedFields.from_dict,
            RepeatedFields(
                repeated_string=[
                    "item1",
                    "item2",
                    "item3",
                ],
            ),
            """{
				"repeated_string": ["item1", "item2", "item3"]
			}""",
        ),
        (
            RepeatedFields.from_dict,
            RepeatedFields(
                repeated_int32=[
                    1,
                    2,
                    3,
                    4,
                    5,
                ],
            ),
            """{
				"repeated_int32": [1, 2, 3, 4, 5]
			}""",
        ),
        (
            RepeatedFields.from_dict,
            RepeatedFields(
                repeated_int64=[
                    1000000000000000000,
                    2000000000000000000,
                ],
            ),
            """{
				"repeated_int64": [1000000000000000000, 2000000000000000000]
			}""",
        ),
        (
            RepeatedFields.from_dict,
            RepeatedFields(
                repeated_bool=[
                    True,
                    False,
                    True,
                ],
            ),
            """{
				"repeated_bool": [true, false, true]
			}""",
        ),
        (
            RepeatedFields.from_dict,
            RepeatedFields(
                test_repeated_enum=[
                    TestEnum.TEST_ENUM_ONE,
                    TestEnum.TEST_ENUM_TWO,
                ],
            ),
            """{
				"test_repeated_enum": ["TEST_ENUM_ONE", "TEST_ENUM_TWO"]
			}""",
        ),
        (
            RepeatedFields.from_dict,
            RepeatedFields(
                repeated_message=[
                    NestedMessage(
                        optional_string="nested1",
                    ),
                    NestedMessage(
                        optional_string="nested2",
                    ),
                ],
            ),
            """{
				"repeated_message": [
					{
						"optional_string": "nested1"
					},
					{
						"optional_string": "nested2"
					}
				]
			}""",
        ),
        (
            RepeatedFields.from_dict,
            RepeatedFields(
                repeated_duration=[
                    _duration("60s"),
                    _duration("120s"),
                    _duration("180s"),
                ],
            ),
            """{
				"repeated_duration": ["60s", "120s", "180s"]
			}""",
        ),
        (
            RepeatedFields.from_dict,
            RepeatedFields(
                repeated_field_mask=[
                    _fieldmask("field1"),
                    _fieldmask("field2,field3"),
                ],
            ),
            """{
				"repeated_field_mask": ["field1", "field2,field3"]
			}""",
        ),
        (
            RepeatedFields.from_dict,
            RepeatedFields(
                repeated_timestamp=[
                    _timestamp("2023-01-01T00:00:00Z"),
                    _timestamp("2023-01-02T00:00:00Z"),
                ],
            ),
            """{
				"repeated_timestamp": ["2023-01-01T00:00:00Z", "2023-01-02T00:00:00Z"]
			}""",
        ),
        (
            RepeatedFields.from_dict,
            RepeatedFields(
                repeated_bool=[
                    True,
                    False,
                ],
                repeated_int32=[
                    10,
                    20,
                    30,
                ],
                repeated_string=[
                    "a",
                    "b",
                    "c",
                ],
            ),
            """{
				"repeated_string": ["a", "b", "c"],
				"repeated_int32": [10, 20, 30],
				"repeated_bool": [true, false]
			}""",
        ),
        (
            RepeatedFields.from_dict,
            RepeatedFields(
                repeated_string=[],
            ),
            """{}""",
        ),
        (
            OptionalFields.from_dict,
            OptionalFields(),
            """{}""",
        ),
        (
            OptionalFields.from_dict,
            OptionalFields(
                optional_bool=False,
                optional_int32=0,
                optional_int64=0,
                optional_string="",
            ),
            """{
					"optional_int32": 0,
					"optional_int64": 0,
					"optional_bool": false,
					"optional_string": ""
				}""",
        ),
        (
            OptionalFields.from_dict,
            OptionalFields(
                legacy_duration="1s",
                legacy_field_mask="legacy_duration,legacy_timestamp",
                legacy_timestamp="2023-01-01T00:00:00Z",
            ),
            """{
				"legacy_duration": "1s",
				"legacy_timestamp": "2023-01-01T00:00:00Z",
				"legacy_field_mask": "legacy_duration,legacy_timestamp"
			}""",
        ),
    ],
    ids=[
        "OptionalString",
        "OptionalInt32",
        "OptionalInt64",
        "OptionalBool",
        "OptionalEnum",
        "OptionalNestedMessage",
        "OptionalMap",
        "OptionalDuration",
        "OptionalFieldMask",
        "OptionalTimestamp",
        "MultipleOptionalFields",
        "RequiredFieldsExplicitDefaults",
        "RequiredFieldsNonDefaults",
        "RepeatedString",
        "RepeatedInt32",
        "RepeatedInt64",
        "RepeatedBool",
        "RepeatedEnum",
        "RepeatedNestedMessage",
        "RepeatedDuration",
        "RepeatedFieldMask",
        "RepeatedTimestamp",
        "MultipleRepeatedFields",
        "EmptyRepeatedFields",
        "OptionalFieldsNoInput",
        "OptionalFieldsZeroValues",
        "LegacyWellKnownTypes",
    ],
)
def test_python_marshall(from_dict_method: any, instance: Any, expected_json: str):
    """Test Python object to dict conversion"""

    result = instance.as_dict()
    expected_dict = json.loads(expected_json)

    assert result == expected_dict, f"Expected {expected_dict}, but got {result}"

    recreated = from_dict_method(result)

    final_dict = recreated.as_dict()

    assert final_dict == expected_dict, f"Expected {expected_dict}, but got {final_dict}"
