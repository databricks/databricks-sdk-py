# Code generated by Databricks SDK Generator. DO NOT EDIT.

import pytest

from databricks.sdk.core import ApiClient
from tests.databricks.sdk.service.idempotencytesting import (
    IdempotencyTestingAPI, TestResource)


@pytest.mark.parametrize(
    "setup_mocks,make_call,want_result,expected_request_id",
    [
        pytest.param(
            lambda requests_mock: requests_mock.post(
                "http://localhost/api/2.0/idempotency-testing/resources",
                [
                    {
                        "status_code": 503,
                        "json": {"error_code": "TEMPORARILY_UNAVAILABLE", "message": "Service temporarily unavailable"},
                    },
                    {"status_code": 200, "json": {"id": "test-resource-123", "name": "test-resource"}},
                ],
            ),
            lambda client: client.create_test_resource(
                request_id="test-request-id-12345",
                test_resource=TestResource(
                    id="test-resource-123",
                    name="test-resource",
                ),
            ),
            TestResource(
                id="test-resource-123",
                name="test-resource",
            ),
            "test-request-id-12345",
            id="RetryWithProvidedRequestID",
        ),
    ],
)
def test_idempotency_retry_with_same_request_id(
    config, requests_mock, setup_mocks, make_call, want_result, expected_request_id
):
    """Test that retries on 503 use the same request_id for idempotency"""
    setup_mocks(requests_mock)

    api_client = ApiClient(config)
    c = IdempotencyTestingAPI(api_client)

    # Make the call - should retry automatically on 503
    result = make_call(c)

    # Verify the result
    assert result == want_result

    # Verify two requests were made
    assert requests_mock.call_count == 2, f"Expected 2 calls (original + retry), got {requests_mock.call_count}"

    # Verify both requests used the expected request_id for idempotency
    first_request_id = requests_mock.request_history[0].qs.get("request_id", [None])[0]
    second_request_id = requests_mock.request_history[1].qs.get("request_id", [None])[0]

    assert (
        first_request_id == expected_request_id
    ), f"First request should use provided request_id, got: {first_request_id}"
    assert (
        second_request_id == expected_request_id
    ), f"Retry should reuse same request_id for idempotency, got: {second_request_id}"


@pytest.mark.parametrize(
    "make_call,want_result,fixtures",
    [
        pytest.param(
            lambda client: client.create_test_resource(
                test_resource=TestResource(
                    id="test-resource-123",
                    name="test-resource",
                )
            ),
            TestResource(
                id="test-resource-123",
                name="test-resource",
            ),
            [
                {
                    "status_code": 503,
                    "json": {"error_code": "TEMPORARILY_UNAVAILABLE", "message": "Service temporarily unavailable"},
                },
                {"status_code": 200, "json": {"id": "test-resource-123", "name": "test-resource"}},
            ],
            id="RetryWithAutoGeneratedRequestID",
        ),
    ],
)
def test_idempotency_auto_generated_request_id(config, requests_mock, make_call, want_result, fixtures):
    """Test that SDK auto-generates request_id and reuses it on retry"""
    captured_request_ids = []

    def mock_handler(request, context):
        request_id = request.qs.get("request_id", [None])[0]
        captured_request_ids.append(request_id)

        if len(captured_request_ids) == 1:
            # First call: capture request_id and return first fixture
            context.status_code = fixtures[0]["status_code"]
            return fixtures[0]["json"]
        elif len(captured_request_ids) == 2:
            # Second call: validate same request_id and return second fixture
            context.status_code = fixtures[1]["status_code"]
            return fixtures[1]["json"]
        else:
            context.status_code = 500
            return {"error": "Unexpected call"}

    requests_mock.post("http://localhost/api/2.0/idempotency-testing/resources", json=mock_handler)

    api_client = ApiClient(config)
    c = IdempotencyTestingAPI(api_client)

    result = make_call(c)

    # Verify the result
    assert result == want_result

    # Verify exactly 2 calls were made (initial + retry)
    assert requests_mock.call_count == 2, f"Expected 2 calls, got {requests_mock.call_count}"

    # Verify SDK auto-generated request_id
    assert len(captured_request_ids) == 2, f"Expected 2 captured request IDs, got {len(captured_request_ids)}"
    assert captured_request_ids[0] is not None, "First request should have auto-generated request_id"
    assert captured_request_ids[1] is not None, "Retry request should have auto-generated request_id"
    assert (
        captured_request_ids[0] == captured_request_ids[1]
    ), f"Retry should use same auto-generated request_id. Got: {captured_request_ids}"
