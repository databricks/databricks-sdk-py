# Code generated by Databricks SDK Generator. DO NOT EDIT.

import json

from google.protobuf.duration_pb2 import Duration
from google.protobuf.timestamp_pb2 import Timestamp

import databricks.sdk.core as client
from databricks.sdk.common.types.fieldmask import FieldMask
from tests.databricks.sdk.service.httpcallv2 import (ComplexQueryParam,
                                                     HttpCallV2API, Resource)


# Helper methods for well known types
def _duration(d: str) -> Duration:
    dur = Duration()
    dur.FromJsonString(d)
    return dur


def _timestamp(d: str) -> Timestamp:
    ts = Timestamp()
    ts.FromJsonString(d)
    return ts


def _fieldmask(d: str) -> FieldMask:
    fm = FieldMask()
    fm.FromJsonString(d)
    return fm


def test_http_call_legacy_http_post_no_query_params_no_body(config, requests_mock):
    requests_mock.post(
        "http://localhost/api/2.0/http-call/string_val/123/true",
        request_headers={"User-Agent": config.user_agent},
    )

    api_client = client.ApiClient(config)
    c = HttpCallV2API(api_client)
    c.create_resource(
        path_param_string="string_val",
        path_param_int=123,
        path_param_bool=True,
    )

    assert requests_mock.call_count == 1
    assert requests_mock.called

    assert requests_mock.last_request.json() == {}


def test_http_call_legacy_http_post_with_body(config, requests_mock):
    requests_mock.post(
        "http://localhost/api/2.0/http-call/test_string/456/false",
        request_headers={"User-Agent": config.user_agent},
    )

    api_client = client.ApiClient(config)
    c = HttpCallV2API(api_client)
    c.create_resource(
        body_field="request_body_content",
        path_param_string="test_string",
        path_param_int=456,
        path_param_bool=False,
    )

    assert requests_mock.call_count == 1
    assert requests_mock.called

    assert requests_mock.last_request.json() == {
        "body_field": "request_body_content",
    }


def test_http_call_update_resource_no_query_params_no_body(config, requests_mock):
    requests_mock.patch(
        "http://localhost/api/2.0/http-call/update_string/789/true",
        request_headers={"User-Agent": config.user_agent},
    )

    api_client = client.ApiClient(config)
    c = HttpCallV2API(api_client)
    c.update_resource(
        resource=Resource(
            any_field=json.loads('{"key": "value"}'),
            nested_path_param_bool=True,
            nested_path_param_int=789,
            nested_path_param_string="update_string",
        ),
        nested_path_param_string="update_string",
        nested_path_param_int=789,
        nested_path_param_bool=True,
    )

    assert requests_mock.call_count == 1
    assert requests_mock.called

    assert requests_mock.last_request.json() == {
        "nested_path_param_string": "update_string",
        "nested_path_param_int": 789,
        "nested_path_param_bool": True,
        "any_field": {"key": "value"},
    }


def test_http_call_update_resource_with_body(config, requests_mock):
    requests_mock.patch(
        "http://localhost/api/2.0/http-call/update_string/789/true",
        request_headers={"User-Agent": config.user_agent},
    )

    api_client = client.ApiClient(config)
    c = HttpCallV2API(api_client)
    c.update_resource(
        resource=Resource(
            body_field="request_body_content",
            nested_path_param_bool=True,
            nested_path_param_int=789,
            nested_path_param_string="update_string",
        ),
        nested_path_param_string="update_string",
        nested_path_param_int=789,
        nested_path_param_bool=True,
    )

    assert requests_mock.call_count == 1
    assert requests_mock.called

    assert requests_mock.last_request.json() == {
        "nested_path_param_string": "update_string",
        "nested_path_param_int": 789,
        "nested_path_param_bool": True,
        "body_field": "request_body_content",
    }


def test_http_call_update_resource_with_simple_query_params(config, requests_mock):
    requests_mock.patch(
        "http://localhost/api/2.0/http-call/update_string/789/true?field_mask=field.mask.value&query_param_bool=true&query_param_int=999&query_param_string=query_string_val",
        request_headers={"User-Agent": config.user_agent},
    )

    api_client = client.ApiClient(config)
    c = HttpCallV2API(api_client)
    c.update_resource(
        resource=Resource(
            nested_path_param_bool=True,
            nested_path_param_int=789,
            nested_path_param_string="update_string",
        ),
        nested_path_param_string="update_string",
        nested_path_param_int=789,
        nested_path_param_bool=True,
        query_param_string="query_string_val",
        query_param_int=999,
        query_param_bool=True,
        field_mask=_fieldmask("field.mask.value"),
    )

    assert requests_mock.call_count == 1
    assert requests_mock.called

    assert requests_mock.last_request.json() == {
        "nested_path_param_string": "update_string",
        "nested_path_param_int": 789,
        "nested_path_param_bool": True,
    }


def test_http_call_update_resource_with_one_nested_query_param(config, requests_mock):
    requests_mock.patch(
        "http://localhost/api/2.0/http-call/update_string/789/True?optional_complex_query_param.nested_optional_query_param=nested_optional",
        request_headers={"User-Agent": config.user_agent},
    )

    api_client = client.ApiClient(config)
    c = HttpCallV2API(api_client)
    c.update_resource(
        resource=Resource(
            nested_path_param_bool=True,
            nested_path_param_int=789,
            nested_path_param_string="update_string",
        ),
        nested_path_param_string="update_string",
        nested_path_param_int=789,
        nested_path_param_bool=True,
        optional_complex_query_param=ComplexQueryParam(
            nested_optional_query_param="nested_optional",
        ),
    )

    assert requests_mock.call_count == 1
    assert requests_mock.called

    assert requests_mock.last_request.json() == {
        "nested_path_param_string": "update_string",
        "nested_path_param_int": 789,
        "nested_path_param_bool": True,
    }


def test_http_call_update_resource_with_repeated_query_param(config, requests_mock):
    requests_mock.patch(
        "http://localhost/api/2.0/http-call/update_string/789/True?repeated_query_param=item1&repeated_query_param=item2&repeated_query_param=item3",
        request_headers={"User-Agent": config.user_agent},
    )

    api_client = client.ApiClient(config)
    c = HttpCallV2API(api_client)
    c.update_resource(
        resource=Resource(
            nested_path_param_bool=True,
            nested_path_param_int=789,
            nested_path_param_string="update_string",
        ),
        nested_path_param_string="update_string",
        nested_path_param_int=789,
        nested_path_param_bool=True,
        repeated_query_param=[
            "item1",
            "item2",
            "item3",
        ],
    )

    assert requests_mock.call_count == 1
    assert requests_mock.called

    assert requests_mock.last_request.json() == {
        "nested_path_param_string": "update_string",
        "nested_path_param_int": 789,
        "nested_path_param_bool": True,
    }


def test_http_call_update_resource_with_repeated_nested_query_param(config, requests_mock):
    requests_mock.patch(
        "http://localhost/api/2.0/http-call/update_string/789/True?optional_complex_query_param.nested_repeated_query_param=item1&optional_complex_query_param.nested_repeated_query_param=item2&optional_complex_query_param.nested_repeated_query_param=item3",
        request_headers={"User-Agent": config.user_agent},
    )

    api_client = client.ApiClient(config)
    c = HttpCallV2API(api_client)
    c.update_resource(
        resource=Resource(
            nested_path_param_bool=True,
            nested_path_param_int=789,
            nested_path_param_string="update_string",
        ),
        nested_path_param_string="update_string",
        nested_path_param_int=789,
        nested_path_param_bool=True,
        optional_complex_query_param=ComplexQueryParam(
            nested_repeated_query_param=[
                "item1",
                "item2",
                "item3",
            ],
        ),
    )

    assert requests_mock.call_count == 1
    assert requests_mock.called

    assert requests_mock.last_request.json() == {
        "nested_path_param_string": "update_string",
        "nested_path_param_int": 789,
        "nested_path_param_bool": True,
    }


def test_http_call_update_resource_with_double_repeated_nested_query_param(config, requests_mock):
    requests_mock.patch(
        "http://localhost/api/2.0/http-call/update_string/789/True?repeated_complex_query_param=nested_repeated_query_param&repeated_complex_query_param=nested_repeated_query_param",
        request_headers={"User-Agent": config.user_agent},
    )

    api_client = client.ApiClient(config)
    c = HttpCallV2API(api_client)
    c.update_resource(
        resource=Resource(
            nested_path_param_bool=True,
            nested_path_param_int=789,
            nested_path_param_string="update_string",
        ),
        nested_path_param_string="update_string",
        nested_path_param_int=789,
        nested_path_param_bool=True,
        repeated_complex_query_param=[
            ComplexQueryParam(
                nested_repeated_query_param=[
                    "item1",
                    "item2",
                    "item3",
                ],
            ),
            ComplexQueryParam(
                nested_repeated_query_param=[
                    "item4",
                    "item5",
                    "item6",
                ],
            ),
        ],
    )

    assert requests_mock.call_count == 1
    assert requests_mock.called

    assert requests_mock.last_request.json() == {
        "nested_path_param_string": "update_string",
        "nested_path_param_int": 789,
        "nested_path_param_bool": True,
    }


def test_http_call_get_resource_no_query_params(config, requests_mock):
    requests_mock.get(
        "http://localhost/api/2.0/http-call/get_string/123/true?",
        request_headers={"User-Agent": config.user_agent},
    )

    api_client = client.ApiClient(config)
    c = HttpCallV2API(api_client)
    c.get_resource(
        path_param_string="get_string",
        path_param_int=123,
        path_param_bool=True,
    )

    assert requests_mock.call_count == 1
    assert requests_mock.called

    assert requests_mock.last_request.body is None


def test_http_call_get_resource_with_simple_query_params(config, requests_mock):
    requests_mock.get(
        "http://localhost/api/2.0/http-call/get_string/456/false?field_mask=field.mask.value&query_param_bool=true&query_param_int=999&query_param_string=query_string_val",
        request_headers={"User-Agent": config.user_agent},
    )

    api_client = client.ApiClient(config)
    c = HttpCallV2API(api_client)
    c.get_resource(
        path_param_string="get_string",
        path_param_int=456,
        path_param_bool=False,
        query_param_string="query_string_val",
        query_param_int=999,
        query_param_bool=True,
        field_mask=_fieldmask("field.mask.value"),
    )

    assert requests_mock.call_count == 1
    assert requests_mock.called

    assert requests_mock.last_request.body is None


def test_http_call_get_resource_with_one_nested_query_param(config, requests_mock):
    requests_mock.get(
        "http://localhost/api/2.0/http-call/get_string/789/true?optional_complex_query_param.nested_optional_query_param=nested_optional",
        request_headers={"User-Agent": config.user_agent},
    )

    api_client = client.ApiClient(config)
    c = HttpCallV2API(api_client)
    c.get_resource(
        path_param_string="get_string",
        path_param_int=789,
        path_param_bool=True,
        optional_complex_query_param=ComplexQueryParam(
            nested_optional_query_param="nested_optional",
        ),
    )

    assert requests_mock.call_count == 1
    assert requests_mock.called

    assert requests_mock.last_request.body is None


def test_http_call_get_resource_with_repeated_query_param(config, requests_mock):
    requests_mock.get(
        "http://localhost/api/2.0/http-call/get_string/101/false?repeated_query_param=item1&repeated_query_param=item2&repeated_query_param=item3",
        request_headers={"User-Agent": config.user_agent},
    )

    api_client = client.ApiClient(config)
    c = HttpCallV2API(api_client)
    c.get_resource(
        path_param_string="get_string",
        path_param_int=101,
        path_param_bool=False,
        repeated_query_param=[
            "item1",
            "item2",
            "item3",
        ],
    )

    assert requests_mock.call_count == 1
    assert requests_mock.called

    assert requests_mock.last_request.body is None


def test_http_call_get_resource_with_repeated_nested_query_param(config, requests_mock):
    requests_mock.get(
        "http://localhost/api/2.0/http-call/get_string/202/true?optional_complex_query_param.nested_repeated_query_param=item1&optional_complex_query_param.nested_repeated_query_param=item2&optional_complex_query_param.nested_repeated_query_param=item3",
        request_headers={"User-Agent": config.user_agent},
    )

    api_client = client.ApiClient(config)
    c = HttpCallV2API(api_client)
    c.get_resource(
        path_param_string="get_string",
        path_param_int=202,
        path_param_bool=True,
        optional_complex_query_param=ComplexQueryParam(
            nested_repeated_query_param=[
                "item1",
                "item2",
                "item3",
            ],
        ),
    )

    assert requests_mock.call_count == 1
    assert requests_mock.called

    assert requests_mock.last_request.body is None


def test_http_call_get_resource_with_double_repeated_nested_query_param(config, requests_mock):
    requests_mock.get(
        "http://localhost/api/2.0/http-call/get_string/303/False?repeated_complex_query_param=nested_repeated_query_param&repeated_complex_query_param=nested_repeated_query_param",
        request_headers={"User-Agent": config.user_agent},
    )

    api_client = client.ApiClient(config)
    c = HttpCallV2API(api_client)
    c.get_resource(
        path_param_string="get_string",
        path_param_int=303,
        path_param_bool=False,
        repeated_complex_query_param=[
            ComplexQueryParam(
                nested_repeated_query_param=[
                    "item1",
                    "item2",
                    "item3",
                ],
            ),
            ComplexQueryParam(
                nested_repeated_query_param=[
                    "item4",
                    "item5",
                    "item6",
                ],
            ),
        ],
    )

    assert requests_mock.call_count == 1
    assert requests_mock.called

    assert requests_mock.last_request.body is None
