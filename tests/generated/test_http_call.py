# Code generated by Databricks SDK Generator. DO NOT EDIT.

import pytest
from google.protobuf.duration_pb2 import Duration
from google.protobuf.timestamp_pb2 import Timestamp

import databricks.sdk.core as client
from databricks.sdk.common.types.fieldmask import FieldMask
from tests.databricks.sdk.service.httpcallv2 import (ComplexQueryParam,
                                                     HttpCallV2API, Resource)


# Helper methods for well known types
def _duration(d: str) -> Duration:
    dur = Duration()
    dur.FromJsonString(d)
    return dur


def _timestamp(d: str) -> Timestamp:
    ts = Timestamp()
    ts.FromJsonString(d)
    return ts


def _fieldmask(d: str) -> FieldMask:
    fm = FieldMask()
    fm.FromJsonString(d)
    return fm


@pytest.mark.parametrize(
    "apply_mock,make_call",
    [
        (
            lambda requests_mock: requests_mock.post("http://localhost/api/2.0/http-call/string_val/123/true"),
            lambda client: client.create_resource(
                path_param_string="string_val",
                path_param_int=123,
                path_param_bool=True,
            ),
        ),
        (
            lambda requests_mock: requests_mock.post("http://localhost/api/2.0/http-call/test_string/456/false"),
            lambda client: client.create_resource(
                body_field="request_body_content",
                path_param_string="test_string",
                path_param_int=456,
                path_param_bool=False,
            ),
        ),
        (
            lambda requests_mock: requests_mock.patch("http://localhost/api/2.0/http-call/update_string/789/true"),
            lambda client: client.update_resource(
                resource=Resource(
                    any_field={"key": "value"},
                    nested_path_param_bool=True,
                    nested_path_param_int=789,
                    nested_path_param_string="update_string",
                ),
                nested_path_param_string="update_string",
                nested_path_param_int=789,
                nested_path_param_bool=True,
            ),
        ),
        (
            lambda requests_mock: requests_mock.patch("http://localhost/api/2.0/http-call/update_string/789/true"),
            lambda client: client.update_resource(
                resource=Resource(
                    body_field="request_body_content",
                    nested_path_param_bool=True,
                    nested_path_param_int=789,
                    nested_path_param_string="update_string",
                ),
                nested_path_param_string="update_string",
                nested_path_param_int=789,
                nested_path_param_bool=True,
            ),
        ),
        (
            lambda requests_mock: requests_mock.patch(
                "http://localhost/api/2.0/http-call/update_string/789/true?field_mask=field.mask.value&query_param_bool=true&query_param_int=999&query_param_string=query_string_val"
            ),
            lambda client: client.update_resource(
                resource=Resource(
                    nested_path_param_bool=True,
                    nested_path_param_int=789,
                    nested_path_param_string="update_string",
                ),
                nested_path_param_string="update_string",
                nested_path_param_int=789,
                nested_path_param_bool=True,
                query_param_string="query_string_val",
                query_param_int=999,
                query_param_bool=True,
                field_mask=_fieldmask("field.mask.value"),
            ),
        ),
        (
            lambda requests_mock: requests_mock.patch(
                "http://localhost/api/2.0/http-call/update_string/789/True?optional_complex_query_param.nested_optional_query_param=nested_optional"
            ),
            lambda client: client.update_resource(
                resource=Resource(
                    nested_path_param_bool=True,
                    nested_path_param_int=789,
                    nested_path_param_string="update_string",
                ),
                nested_path_param_string="update_string",
                nested_path_param_int=789,
                nested_path_param_bool=True,
                optional_complex_query_param=ComplexQueryParam(
                    nested_optional_query_param="nested_optional",
                ),
            ),
        ),
        (
            lambda requests_mock: requests_mock.patch(
                "http://localhost/api/2.0/http-call/update_string/789/True?repeated_query_param=item1&repeated_query_param=item2&repeated_query_param=item3"
            ),
            lambda client: client.update_resource(
                resource=Resource(
                    nested_path_param_bool=True,
                    nested_path_param_int=789,
                    nested_path_param_string="update_string",
                ),
                nested_path_param_string="update_string",
                nested_path_param_int=789,
                nested_path_param_bool=True,
                repeated_query_param=[
                    "item1",
                    "item2",
                    "item3",
                ],
            ),
        ),
        (
            lambda requests_mock: requests_mock.patch(
                "http://localhost/api/2.0/http-call/update_string/789/True?optional_complex_query_param.nested_repeated_query_param=item1&optional_complex_query_param.nested_repeated_query_param=item2&optional_complex_query_param.nested_repeated_query_param=item3"
            ),
            lambda client: client.update_resource(
                resource=Resource(
                    nested_path_param_bool=True,
                    nested_path_param_int=789,
                    nested_path_param_string="update_string",
                ),
                nested_path_param_string="update_string",
                nested_path_param_int=789,
                nested_path_param_bool=True,
                optional_complex_query_param=ComplexQueryParam(
                    nested_repeated_query_param=[
                        "item1",
                        "item2",
                        "item3",
                    ],
                ),
            ),
        ),
        (
            lambda requests_mock: requests_mock.patch(
                "http://localhost/api/2.0/http-call/update_string/789/True?repeated_complex_query_param=nested_repeated_query_param&repeated_complex_query_param=nested_repeated_query_param"
            ),
            lambda client: client.update_resource(
                resource=Resource(
                    nested_path_param_bool=True,
                    nested_path_param_int=789,
                    nested_path_param_string="update_string",
                ),
                nested_path_param_string="update_string",
                nested_path_param_int=789,
                nested_path_param_bool=True,
                repeated_complex_query_param=[
                    ComplexQueryParam(
                        nested_repeated_query_param=[
                            "item1",
                            "item2",
                            "item3",
                        ],
                    ),
                    ComplexQueryParam(
                        nested_repeated_query_param=[
                            "item4",
                            "item5",
                            "item6",
                        ],
                    ),
                ],
            ),
        ),
        (
            lambda requests_mock: requests_mock.get("http://localhost/api/2.0/http-call/get_string/123/true?"),
            lambda client: client.get_resource(
                path_param_string="get_string",
                path_param_int=123,
                path_param_bool=True,
            ),
        ),
        (
            lambda requests_mock: requests_mock.get(
                "http://localhost/api/2.0/http-call/get_string/456/false?field_mask=field.mask.value&query_param_bool=true&query_param_int=999&query_param_string=query_string_val"
            ),
            lambda client: client.get_resource(
                path_param_string="get_string",
                path_param_int=456,
                path_param_bool=False,
                query_param_string="query_string_val",
                query_param_int=999,
                query_param_bool=True,
                field_mask=_fieldmask("field.mask.value"),
            ),
        ),
        (
            lambda requests_mock: requests_mock.get(
                "http://localhost/api/2.0/http-call/get_string/789/true?optional_complex_query_param.nested_optional_query_param=nested_optional"
            ),
            lambda client: client.get_resource(
                path_param_string="get_string",
                path_param_int=789,
                path_param_bool=True,
                optional_complex_query_param=ComplexQueryParam(
                    nested_optional_query_param="nested_optional",
                ),
            ),
        ),
        (
            lambda requests_mock: requests_mock.get(
                "http://localhost/api/2.0/http-call/get_string/101/false?repeated_query_param=item1&repeated_query_param=item2&repeated_query_param=item3"
            ),
            lambda client: client.get_resource(
                path_param_string="get_string",
                path_param_int=101,
                path_param_bool=False,
                repeated_query_param=[
                    "item1",
                    "item2",
                    "item3",
                ],
            ),
        ),
        (
            lambda requests_mock: requests_mock.get(
                "http://localhost/api/2.0/http-call/get_string/202/true?optional_complex_query_param.nested_repeated_query_param=item1&optional_complex_query_param.nested_repeated_query_param=item2&optional_complex_query_param.nested_repeated_query_param=item3"
            ),
            lambda client: client.get_resource(
                path_param_string="get_string",
                path_param_int=202,
                path_param_bool=True,
                optional_complex_query_param=ComplexQueryParam(
                    nested_repeated_query_param=[
                        "item1",
                        "item2",
                        "item3",
                    ],
                ),
            ),
        ),
        (
            lambda requests_mock: requests_mock.get(
                "http://localhost/api/2.0/http-call/get_string/303/False?repeated_complex_query_param=nested_repeated_query_param&repeated_complex_query_param=nested_repeated_query_param"
            ),
            lambda client: client.get_resource(
                path_param_string="get_string",
                path_param_int=303,
                path_param_bool=False,
                repeated_complex_query_param=[
                    ComplexQueryParam(
                        nested_repeated_query_param=[
                            "item1",
                            "item2",
                            "item3",
                        ],
                    ),
                    ComplexQueryParam(
                        nested_repeated_query_param=[
                            "item4",
                            "item5",
                            "item6",
                        ],
                    ),
                ],
            ),
        ),
    ],
    ids=[
        "LegacyHttpPostNoQueryParamsNoBody",
        "LegacyHttpPostWithBody",
        "UpdateResourceNoQueryParamsNoBody",
        "UpdateResourceWithBody",
        "UpdateResourceWithSimpleQueryParams",
        "UpdateResourceWithOneNestedQueryParam",
        "UpdateResourceWithRepeatedQueryParam",
        "UpdateResourceWithRepeatedNestedQueryParam",
        "UpdateResourceWithDoubleRepeatedNestedQueryParam",
        "GetResourceNoQueryParams",
        "GetResourceWithSimpleQueryParams",
        "GetResourceWithOneNestedQueryParam",
        "GetResourceWithRepeatedQueryParam",
        "GetResourceWithRepeatedNestedQueryParam",
        "GetResourceWithDoubleRepeatedNestedQueryParam",
    ],
)
def test_http_call(config, requests_mock, apply_mock, make_call):
    apply_mock(requests_mock)

    api_client = client.ApiClient(config)
    c = HttpCallV2API(api_client)
    make_call(c)

    assert requests_mock.call_count == 1
    assert requests_mock.called
