import databricks.sdk.core as client
import databricks.sdk.dbutils as dbutils

from databricks.sdk.mixins.files import DbfsExt
from databricks.sdk.mixins.compute import ClustersExt
from databricks.sdk.mixins.sql import StatementExecutionExt
from databricks.sdk.mixins.workspace import WorkspaceExt
{{- range .Services}}
from databricks.sdk.service.{{.Package.Name}} import {{.PascalName}}API{{end}}

{{$args := list "host" "account_id" "username" "password" "client_id" "client_secret"
  "token" "profile" "config_file" "azure_workspace_resource_id" "azure_client_secret"
  "azure_client_id" "azure_tenant_id" "azure_environment" "auth_type" "cluster_id"}}

{{- define "api" -}}
  {{- $mixins := dict
    "ClustersAPI" "ClustersExt"
    "DbfsAPI" "DbfsExt"
    "StatementExecutionAPI" "StatementExecutionExt"
    "WorkspaceAPI" "WorkspaceExt"
  -}}
  {{- $genApi := concat .PascalName "API" -}}
  {{- getOrDefault $mixins $genApi $genApi -}}
{{- end -}}

def _make_dbutils(config: client.Config):
    # We try to directly check if we are in runtime, instead of
    # trying to import from databricks.sdk.runtime. This is to prevent
    # remote dbutils from being created without the config, which is both
    # expensive (will need to check all credential providers) and can
    # throw errors (when no env vars are set).
    try:
        from dbruntime import UserNamespaceInitializer
    except ImportError:
        return dbutils.RemoteDbUtils(config)

    # We are in runtime, so we can use the runtime dbutils
    from databricks.sdk.runtime import dbutils as runtime_dbutils
    return runtime_dbutils


class WorkspaceClient:
    def __init__(self, *{{range $args}}, {{.}}: str = None{{end}},
                 debug_truncate_bytes: int = None,
                 debug_headers: bool = None,
                 product="unknown",
                 product_version="0.0.0",
                 credentials_provider: client.CredentialsProvider = None,
                 config: client.Config = None):
        if not config:
          config = client.Config({{range $args}}{{.}}={{.}}, {{end}}
            credentials_provider=credentials_provider,
            debug_truncate_bytes=debug_truncate_bytes,
            debug_headers=debug_headers,
            product=product,
            product_version=product_version)
        self.config = config.copy()
        self.dbutils = _make_dbutils(self.config)
        self.api_client = client.ApiClient(self.config)
        {{- range .Services}}{{if not .IsAccounts}}
        self.{{.SnakeName}} = {{template "api" .}}(self.api_client){{end -}}{{end}}

class AccountClient:
    def __init__(self, *{{range $args}}, {{.}}: str = None{{end}},
                 debug_truncate_bytes: int = None,
                 debug_headers: bool = None,
                 product="unknown",
                 product_version="0.0.0",
                 credentials_provider: client.CredentialsProvider = None,
                 config: client.Config = None):
        if not config:
          config = client.Config({{range $args}}{{.}}={{.}}, {{end}}
            credentials_provider=credentials_provider,
            debug_truncate_bytes=debug_truncate_bytes,
            debug_headers=debug_headers,
            product=product,
            product_version=product_version)
        self.config = config.copy()
        self.api_client = client.ApiClient(self.config)
        {{- range .Services}}{{if .IsAccounts}}
        self.{{(.TrimPrefix "account").SnakeName}} = {{template "api" .}}(self.api_client){{end -}}{{end}}
