# Code generated from OpenAPI specs by Databricks SDK Generator. DO NOT EDIT.

from __future__ import annotations
from dataclasses import dataclass
from datetime import timedelta
from enum import Enum
from typing import Dict, List, Any, Iterator, Type, Callable, Optional, BinaryIO
import time
import random
import logging
from ..errors import OperationTimeout, OperationFailed
from ._internal import _enum, _from_dict, _repeated_dict, _repeated_enum, Wait, _escape_multi_segment_path_parameter

_LOG = logging.getLogger('databricks.sdk')

{{range .ImportedEntities}}
from databricks.sdk.service import {{.Package.Name}}{{end}}

# all definitions in this file are in alphabetical order
{{range .Types}}
{{if or .Fields .IsEmpty -}}{{if not .IsRequest}}@dataclass
class {{.PascalName}}{{if eq "List" .PascalName}}Request{{end}}:{{if .Description}}
    """{{.Comment "    " 100}}"""
    {{end}}
    {{- range .RequiredFields}}
    {{template "safe-snake-name" .}}: {{template "type" .Entity}}{{if .Description}}
    """{{.Comment "    " 100 | trimSuffix "\""}}"""{{end}}
    {{end}}
    {{- range .NonRequiredFields}}
    {{template "safe-snake-name" .}}: Optional[{{template "type" .Entity}}] = None{{if .Description}}
    """{{.Comment "    " 100 | trimSuffix "\""}}"""{{end}}
    {{end}}
    {{if or .IsEmpty .HasJsonField .HasHeaderField .HasByteStreamField -}}
    def as_dict(self) -> dict:
        """Serializes the {{.PascalName}}{{if eq "List" .PascalName}}Request{{end}} into a dictionary suitable for use as a JSON request body."""
        body = {}
        {{range .Fields}}if self.{{template "safe-snake-name" .}}{{with .Entity.IsPrimitive}} is not None{{end}}: body['{{.Name}}'] = {{template "as_request_type" .}}
        {{end -}}
        return body

    @classmethod
    def from_dict(cls, d: Dict[str, any]) -> {{.PascalName}}{{if eq "List" .PascalName}}Request{{end}}:
        """Deserializes the {{.PascalName}}{{if eq "List" .PascalName}}Request{{end}} from a dictionary."""
        return cls({{range $i, $f := .Fields}}{{if $i}}, {{end}}{{template "safe-snake-name" $f}}={{template "from_dict_type" $f}}{{end}})
    {{end}}
{{end}}
{{else if .ArrayValue}}type {{.PascalName}} []{{template "type" .ArrayValue}}
{{else if .MapValue}}{{.PascalName}} = {{template "type" .}}
{{else if .Enum}}class {{.PascalName}}(Enum):
    {{if .Description}}"""{{.Comment "    " 100 | trimSuffix "\"" }}"""{{end}}
    {{range .Enum }}
    {{.ConstantName}} = '{{.Content}}'{{end}}{{end}}
{{end}}
{{- define "from_dict_type" -}}
	{{- if not .Entity }}None
	{{- else if .Entity.ArrayValue }}
		{{- if (or .Entity.ArrayValue.IsObject .Entity.ArrayValue.IsExternal) }}_repeated_dict(d, '{{.Name}}', {{template "type" .Entity.ArrayValue}})
		{{- else if .Entity.ArrayValue.Enum }}_repeated_enum(d, '{{.Name}}', {{template "type" .Entity.ArrayValue}})
		{{- else}}d.get('{{.Name}}', None){{- end -}}
	{{- else if or .Entity.IsObject .Entity.IsExternal .Entity.IsEmpty }}_from_dict(d, '{{.Name}}', {{template "type" .Entity}})
	{{- else if .Entity.Enum }}_enum(d, '{{.Name}}', {{template "type" .Entity}})
	{{- else if and .IsHeader (or .Entity.IsInt64 .Entity.IsInt) }} int(d.get('{{.Name}}', None))
	{{- else}}d.get('{{.Name}}', None){{- end -}}
{{- end -}}
{{- define "as_request_type" -}}
	{{- if not .Entity }}None # ERROR: No Type
	{{- /* This should be done recursively, but recursion in text templates is not supported. */ -}}
	{{- else if .Entity.ArrayValue }}[{{if or .Entity.ArrayValue.IsObject .Entity.ArrayValue.IsExternal}}v.as_dict(){{ else if .Entity.ArrayValue.Enum }}v.value{{else}}v{{end}} for v in self.{{template "safe-snake-name" .}}]
	{{- else if or .Entity.IsObject .Entity.IsExternal .Entity.IsEmpty }}self.{{template "safe-snake-name" .}}.as_dict()
	{{- else if .Entity.Enum }}self.{{template "safe-snake-name" .}}.value
	{{- else}}self.{{template "safe-snake-name" .}}{{- end -}}
{{- end -}}
{{- define "type" -}}
	{{- if not . }}any # ERROR: No Type
	{{- else if .IsExternal }}{{.Package.Name}}.{{.PascalName}}
	{{- else if .ArrayValue }}List[{{template "type" .ArrayValue}}]
	{{- else if .MapValue }}Dict[str,{{template "type" .MapValue}}]
	{{- else if .IsObject }}{{.PascalName}}{{if eq "List" .PascalName}}Request{{end}}
	{{- else if .Enum }}{{.PascalName}}
	{{- else if .IsString}}str
	{{- else if .IsAny}}Any
	{{- else if .IsEmpty}}{{.PascalName}}
	{{- else if .IsBool}}bool
	{{- else if .IsInt64}}int
	{{- else if .IsFloat64}}float
	{{- else if .IsInt}}int
	{{- else if .IsByteStream}}BinaryIO
	{{- else}}any /* MISSING TYPE */
	{{- end -}}
{{- end -}}

{{- define "type-doc" -}}
	{{- if .IsExternal }}:class:`{{.PascalName}}`
	{{- else if .IsEmpty}}:class:`{{template "type" .}}`
	{{- else if .ArrayValue }}List[{{template "type-doc" .ArrayValue}}]
	{{- else if .MapValue }}Dict[str,{{template "type-doc" .MapValue}}]
	{{- else if .IsObject }}:class:`{{.PascalName}}{{if eq "List" .PascalName}}Request{{end}}`
	{{- else if .Enum }}:class:`{{.PascalName}}`
	{{- else}}{{template "type" . }}
	{{- end -}}
{{- end -}}

{{range .Services}} {{if not .IsDataPlane}}
class {{.PascalName}}API:{{if .Description}}
    """{{.Comment "    " 110}}"""
    {{end}}
    def __init__(self, api_client):
        self._api = api_client
        {{range .Subservices}}
        self._{{.SnakeName}} = {{.PascalName}}API(self._api){{end}}

    {{range .Subservices}}
    @property
    def {{.SnakeName}}(self) -> {{.PascalName}}API:
        {{if .Description}}"""{{.Summary}}"""{{end}}
        return self._{{.SnakeName}}
    {{end}}

    {{range .Waits}}
    def {{template "safe-snake-name" .}}(self{{range .Binding}}, {{template "safe-snake-name" .PollField}}: {{template "type" .PollField.Entity}}{{end}},
      timeout=timedelta(minutes={{.Timeout}}), callback: Optional[Callable[[{{.Poll.Response.PascalName}}], None]] = None) -> {{.Poll.Response.PascalName}}:
      deadline = time.time() + timeout.total_seconds()
      target_states = ({{range .Success}}{{.Entity.PascalName}}.{{.ConstantName}}, {{end}}){{if .Failure}}
      failure_states = ({{range .Failure}}{{.Entity.PascalName}}.{{.ConstantName}}, {{end}}){{end}}
      status_message = 'polling...'
      attempt = 1
      while time.time() < deadline:
        poll = self.{{template "safe-snake-name" .Poll}}({{range $i, $b := .Binding}}{{if $i}}, {{end}}{{template "safe-snake-name" .PollField}}={{template "safe-snake-name" .PollField}}{{- end}})
        status = poll{{range .StatusPath}}.{{template "safe-snake-name" .}}{{end}}
        {{if .ComplexMessagePath -}}
        status_message = f'current status: {status}'
        if poll.{{template "safe-snake-name" .MessagePathHead}}:
          status_message = poll{{range .MessagePath}}.{{template "safe-snake-name" .}}{{end}}
        {{- else if .MessagePath -}}
        status_message = poll{{range .MessagePath}}.{{template "safe-snake-name" .}}{{end}}
        {{- else -}}
        status_message = f'current status: {status}'
        {{- end}}
        if status in target_states:
          return poll
        if callback:
          callback(poll)
        {{if .Failure -}}
        if status in failure_states:
          msg = f'failed to reach {{range $i, $e := .Success}}{{if $i}} or {{end}}{{$e.Content}}{{end}}, got {status}: {status_message}'
          raise OperationFailed(msg)
        {{end}}prefix = f"{{range $i, $b := .Binding}}{{if $i}}, {{end -}}
           {{template "safe-snake-name" .PollField}}={{"{"}}{{template "safe-snake-name" .PollField}}{{"}"}}
        {{- end}}"
        sleep = attempt
        if sleep > 10:
          # sleep 10s max per attempt
          sleep = 10
        _LOG.debug(f'{prefix}: ({status}) {status_message} (sleeping ~{sleep}s)')
        time.sleep(sleep + random.random())
        attempt += 1
      raise TimeoutError(f'timed out after {timeout}: {status_message}')
    {{end}}

    {{range .Methods}}
    def {{template "safe-snake-name" .}}({{ template "method-parameters" . }}){{template "method-return-type" .}}:
        {{if .Description}}"""{{.Comment "        " 110 | trimSuffix "\"" }}
        {{with .Request}}{{range .RequiredFields}}
        :param {{template "safe-snake-name" .}}: {{template "type-doc" .Entity}}{{if .Description}}
          {{.Comment "          " 110 | trimSuffix "\"" }}{{end}}
        {{- end}}{{range .NonRequiredFields}}
        :param {{template "safe-snake-name" .}}: {{template "type-doc" .Entity}} (optional){{if .Description}}
          {{.Comment "          " 110 | trimSuffix "\"" }}{{end}}
        {{- end}}
        {{end}}
        {{if and .Wait (and (not .IsCrudRead) (not (eq .SnakeName "get_run"))) -}}
        :returns:
          Long-running operation waiter for {{template "type-doc" .Wait.Poll.Response}}.
          See :method:{{template "safe-snake-name" .Wait}} for more details.
        {{- else if not .Response.IsEmpty }}:returns: {{if .Response.ArrayValue -}}
          Iterator over {{template "type-doc" .Response.ArrayValue}}
        {{- else if .Pagination -}}
          Iterator over {{template "type-doc" .Pagination.Entity}}
        {{- else -}}
          {{template "type-doc" .Response}}
        {{- end}}{{end}}
        """{{end}}
        {{if .Request -}}
        {{template "method-serialize" .}}
        {{- end}}
        {{template "method-headers" . }}
        {{if .Response.HasHeaderField -}}
        {{template "method-response-headers" . }}
        {{- end}}
        {{template "method-call" .}}

    {{if and .Wait (and (not .IsCrudRead) (not (eq .SnakeName "get_run"))) }}
    def {{.SnakeName}}_and_wait({{ template "method-parameters" . }},
        timeout=timedelta(minutes={{.Wait.Timeout}})) -> {{.Wait.Poll.Response.PascalName}}:
        return self.{{template "safe-snake-name" .}}({{range $i, $x := .Request.Fields}}{{if $i}}, {{end}}{{template "safe-snake-name" .}}={{template "safe-snake-name" .}}{{end}}).result(timeout=timeout)
    {{end}}
    {{end -}}
{{end}}
{{- end}}

{{define "method-parameters" -}}
  self{{if .Request}}
       {{- if .Request.MapValue }}, contents: {{template "type" .Request }}{{ end }}
       {{range .Request.RequiredFields}}, {{template "safe-snake-name" .}}: {{template "type" .Entity}}{{end}}
       {{if .Request.NonRequiredFields}}, *
         {{range .Request.NonRequiredFields}}, {{template "safe-snake-name" .}}: Optional[{{template "type" .Entity}}] = None{{end}}
       {{- end}}
     {{- end}}
{{- end}}

{{define "method-serialize" -}}
        {{if or .Request.HasJsonField .Request.HasQueryField -}}
        {{if .Request.HasJsonField}}body = {}{{end}}{{if .Request.HasQueryField}}
        query = {}{{end}}
        {{- range .Request.Fields}}{{ if and (not .IsPath) (not .IsHeader) }}
        {{- if .IsQuery }}
        if {{template "safe-snake-name" .}} is not None: query['{{.Name}}'] = {{template "method-param-bind" .}}{{end}}
        {{- if .IsJson }}
        if {{template "safe-snake-name" .}} is not None: body['{{.Name}}'] = {{template "method-param-bind" .}}{{end}}
        {{- end}}
        {{- end}}
        {{- end}}
{{- end}}

{{ define "method-headers" -}}
    headers = {
      {{- range $k, $v := .FixedRequestHeaders}}'{{ $k }}': '{{ $v }}',{{ end -}}
    }
{{- end }}

{{ define "method-response-headers" -}}
    response_headers = [
      {{- range $h := .ResponseHeaders}}'{{ $h.Name }}',{{ end -}}
    ]
{{- end }}

{{- define "method-param-bind" -}}
      {{- if not .Entity }}None # ERROR: No Type
      {{- else if .Entity.ArrayValue }}[
        {{- if or .Entity.ArrayValue.IsObject .Entity.ArrayValue.IsExternal -}}v.as_dict()
        {{- else if .Entity.ArrayValue.Enum -}}v.value
        {{- else}}v{{end}} for v in {{template "safe-snake-name" .}}]
      {{- else if .Entity.IsObject }}{{template "safe-snake-name" .}}.as_dict()
      {{- else if .Entity.Enum }}{{template "safe-snake-name" .}}.value
      {{- else}}{{template "safe-snake-name" .}}{{- end -}}
{{- end -}}

{{define "method-call" -}}
        {{if .Pagination -}}{{template "method-call-paginated" .}}
        {{- else if and .Wait (and (not .IsCrudRead) (not (eq .SnakeName "get_run"))) -}}{{template "method-call-retried" .}}
        {{- else}}{{template "method-call-default" .}}{{end}}
{{- end}}

{{define "method-call-retried" -}}
        {{if .Response}}op_response = {{end}}{{template "method-do" .}}
        return Wait(self.{{template "safe-snake-name" .Wait}}
          {{if .Response}}, response = {{.Response.PascalName}}.from_dict(op_response){{end}}
          {{range .Wait.Binding}}, {{template "safe-snake-name" .PollField}}={{if .IsResponseBind}}op_response['{{.Bind.Name}}']{{else}}{{template "safe-snake-name" .Bind}}{{end}}
        {{- end}})
{{- end}}

{{define "method-call-paginated" -}}
        {{if .Pagination.MultiRequest}}
        {{if .NeedsOffsetDedupe -}}
        # deduplicate items that may have been added during iteration
        seen = set()
        {{- end}}{{if and .Pagination.Offset (not (eq .Path "/api/2.0/clusters/events")) }}
        query['{{.Pagination.Offset.Name}}'] =
        {{- if eq .Pagination.Increment 1 -}}
          1
        {{- else if contains .Path "/scim/v2/" -}}
          1
        {{- else -}}
          0
        {{- end}}{{end}}{{if and .Pagination.Limit (contains .Path "/scim/v2/")}}
        if "{{.Pagination.Limit.Name}}" not in query: query['{{.Pagination.Limit.Name}}'] = 100
        {{- end}}
        while True:
          json = {{template "method-do" .}}
          if '{{.Pagination.Results.Name}}' in json:
            for v in json['{{.Pagination.Results.Name}}']:
              {{if .NeedsOffsetDedupe -}}
              i = v['{{.IdentifierField.Name}}']
              if i in seen:
                continue
              seen.add(i)
              {{end -}}
              yield {{.Pagination.Entity.PascalName}}.from_dict(v)
          {{ if .Pagination.Token -}}
          if '{{.Pagination.Token.Bind.Name}}' not in json or not json['{{.Pagination.Token.Bind.Name}}']:
            return
          {{if or (eq "GET" .Verb) (eq "HEAD" .Verb)}}query{{else}}body{{end}}['{{.Pagination.Token.PollField.Name}}'] = json['{{.Pagination.Token.Bind.Name}}']
          {{- else if eq .Path "/api/2.0/clusters/events" -}}
          if 'next_page' not in json or not json['next_page']:
            return
          body = json['next_page']
          {{- else -}}
          if '{{.Pagination.Results.Name}}' not in json or not json['{{.Pagination.Results.Name}}']:
            return
          {{ if eq .Pagination.Increment 1 -}}
          query['{{.Pagination.Offset.Name}}'] += 1
          {{- else -}}
          query['{{.Pagination.Offset.Name}}'] += len(json['{{.Pagination.Results.Name}}'])
          {{- end}}
          {{- end}}
        {{else -}}
        json = {{template "method-do" .}}
        parsed = {{.Response.PascalName}}.from_dict(json).{{template "safe-snake-name" .Pagination.Results}}
        return parsed if parsed is not None else []
        {{end}}
{{- end}}

{{define "method-call-default" -}}
        {{if not .Response.IsEmpty -}}
        res = {{end}}{{template "method-do" .}}
        {{if not .Response.IsEmpty -}}
          {{- if .Response.ArrayValue -}}
            return [{{.Response.ArrayValue.PascalName}}.from_dict(v) for v in res]
          {{- else if .Response.MapValue -}}
            return res
          {{- else -}}
            return {{.Response.PascalName}}.from_dict(res)
          {{- end}}
        {{- end}}
{{- end}}

{{define "method-do" -}}
self._api.do('{{.Verb}}',
  {{ template "path" . }}
  {{if .Request}}
      {{- if .Request.HasQueryField}}, query=query{{end}}
      {{- if .Request.MapValue}}, body=contents
      {{- else if .Request.HasJsonField}}, body=body{{end}}
  {{end}}
  , headers=headers
  {{if .Response.HasHeaderField -}}
  , response_headers=response_headers
  {{- end}}
  {{- if and .IsRequestByteStream .RequestBodyField }}, data={{template "safe-snake-name" .RequestBodyField}}{{ end }}
  {{- if .IsResponseByteStream }}, raw=True{{ end }})
{{- end}}

{{- define "path" -}}
{{- if .PathParts -}}
  f'{{range  .PathParts -}}
    {{- .Prefix -}}
    {{- if .Field -}}
      {{- "{" -}}
      {{- if .Field.IsPathMultiSegment -}}_escape_multi_segment_path_parameter({{ template "path-parameter" . }})
      {{- else -}}{{ template "path-parameter" . }}
      {{- end -}}
      {{- "}" -}}
    {{- else if .IsAccountId}}
      {{- "{" -}}
      self._api.account_id
      {{- "}" -}}
    {{- end -}}
  {{- end }}'
{{- else -}}
  '{{.Path}}'
{{- end -}}
{{- end -}}

{{- define "path-parameter" -}}
  {{template "safe-snake-name" .Field}}{{with .Field.Entity.Enum}}.value{{end}}
{{- end -}}

{{define "method-return-type" -}}
  {{if and .Wait (and (not .IsCrudRead) (not (eq .SnakeName "get_run"))) }} -> Wait[{{.Wait.Poll.Response.PascalName}}]
  {{- else if not .Response.IsEmpty }} -> {{if .Response.ArrayValue -}}
    Iterator[{{template "type" .Response.ArrayValue}}]
  {{- else if .Pagination -}}
    Iterator[{{template "type" .Pagination.Entity}}]
  {{- else -}}
    {{- if .Response.IsExternal -}}
      {{.Response.Package.Name}}.{{.Response.PascalName}}
    {{- else -}}
      {{.Response.PascalName}}
    {{- end -}}
  {{- end}}{{end}}
{{- end}}
