# Code generated from OpenAPI specs by Databricks SDK Generator. DO NOT EDIT.

from dataclasses import dataclass
from datetime import timedelta
from enum import Enum
from typing import Dict, List, Any, Iterator, Type, Callable, Optional
import time
import random
import logging
from ..errors import OperationTimeout, OperationFailed
from ._internal import _enum, _from_dict, _repeated, _validated, Wait

_LOG = logging.getLogger('databricks.sdk')

{{range .ImportedEntities}}
from databricks.sdk.service import {{.Package.Name}}{{end}}

# all definitions in this file are in alphabetical order
{{range .Types}}
{{if .Fields -}}{{if not .IsRequest}}@dataclass
class {{.PascalName}}{{if eq "List" .PascalName}}Request{{end}}:{{if .Description}}
    """{{.Comment "    " 100}}"""
    {{end}}{{- range .RequiredFields | alphanumOnly}}
    {{.SnakeName}}: {{template "type" .Entity}}{{end}}{{- range .NonRequiredFields | alphanumOnly}}
    {{.SnakeName}}: Optional[{{template "type" .Entity}}] = None{{end}}
    {{if .HasJsonField -}}
    def as_dict(self) -> dict:
        body = {}
        {{range .Fields | alphanumOnly}}if self.{{.SnakeName -}}
          {{- with .Entity.IsPrimitive}} is not None{{- end -}}: body['{{.Name}}'] = {{template "validated" (dict
            "var" (concat "self." .SnakeName)
            "name" .SnakeName
            "entity" .Entity
          )}}
        {{end -}}
        return body

    @classmethod
    def from_dict(cls, d: Dict[str, any]) -> '{{.PascalName}}{{if eq "List" .PascalName}}Request{{end}}':
        return cls({{range $i, $f := .Fields | alphanumOnly}}{{if $i}}, {{end}}{{$f.SnakeName}}={{template "from_dict_type" $f}}{{end}})
    {{end}}
{{end}}
{{else if .ArrayValue}}type {{.PascalName}} []{{template "type" .ArrayValue}}
{{else if .MapValue}}{{.PascalName}} = {{template "type-nq" .}}
{{else if .Enum}}class {{.PascalName}}(Enum):
    {{if .Description}}"""{{.Comment "    " 100 | trimSuffix "\"" }}"""{{end}}
    {{range .Enum }}
    {{.ConstantName}} = '{{.Content}}'{{end}}{{end}}
{{end}}

{{- define "validated" -}}
      {{- if not .entity }}None # ERROR: No Type
      {{- else if .entity.MapValue }}{k:{{template "validated" (dict
          "var" "v"
          "name" (concat .name " item")
          "entity" .entity.MapValue
        )}} for (k,v) in {{.var}}.items()}
      {{- else if .entity.ArrayValue }}[{{template "validated" (dict
          "var" "v"
          "name" (concat .name " item")
          "entity" .entity.ArrayValue
        )}} for v in {{.var}}]
      {{- else if or .entity.IsObject .entity.IsExternal .entity.Enum -}}
        _validated('{{.name}}', {{if .entity.IsExternal}}{{.entity.Package.Name}}.{{end}}{{.entity.PascalName}}, {{.var}})
      {{- else -}}
        _validated('{{.name}}', {{template "type-nq" .entity}}, {{.var}})
      {{- end -}}
{{- end -}}

{{- define "from_dict_type" -}}
	{{- if not .Entity }}None
	{{- else if .Entity.ArrayValue }}
		{{- if .Entity.ArrayValue.IsObject }}_repeated(d, '{{.Name}}', {{template "type-nq" .Entity.ArrayValue}})
		{{- else if .Entity.ArrayValue.IsExternal }}_repeated(d, '{{.Name}}', {{template "type-nq" .Entity.ArrayValue}})
		{{- else}}d.get('{{.Name}}', None){{- end -}}
	{{- else if .Entity.IsObject }}_from_dict(d, '{{.Name}}', {{.Entity.PascalName}})
	{{- else if .Entity.IsExternal }}_from_dict(d, '{{.Name}}', {{.Entity.Package.Name}}.{{.Entity.PascalName}})
	{{- else if .Entity.Enum }}_enum(d, '{{.Name}}', {{.Entity.PascalName}})
	{{- else}}d.get('{{.Name}}', None){{- end -}}
{{- end -}}

{{- define "type" -}}
	{{- if not . }}any # ERROR: No Type
	{{- else if .ArrayValue }}'List[{{template "type-nq" .ArrayValue}}]'
	{{- else if .MapValue }}'Dict[str,{{template "type-nq" .MapValue}}]'
	{{- else if .IsExternal }}'{{.Package.Name}}.{{.PascalName}}'
	{{- else if .IsObject }}'{{.PascalName}}{{if eq "List" .PascalName}}Request{{end}}'
	{{- else if .Enum }}'{{.PascalName}}'
	{{- else}}{{template "type-nq" .}}{{- end -}}
{{- end -}}

{{- define "type-nq" -}}
	{{- if .IsString}}str
	{{- else if .IsEmpty}}Any
  {{- else if .IsAny}}Any
	{{- else if .IsBool}}bool
	{{- else if .IsInt64}}int
	{{- else if .IsFloat64}}float
	{{- else if .IsInt}}int
	{{- else if .ArrayValue }}List[{{template "type-nq" .ArrayValue}}]
  {{- else if .MapValue }}Dict[str,{{template "type-nq" .MapValue}}]
	{{- else if .IsExternal }}{{.Package.Name}}.{{.PascalName}}
	{{- else if .IsObject }}{{.PascalName}}{{if eq "List" .PascalName}}Request{{end}}
	{{- else if .Enum }}{{.PascalName}}
	{{- else}}any /* MISSING TYPE */
	{{- end -}}
{{- end -}}

{{- define "type-doc" -}}
	{{- if .IsString}}str
	{{- else if .IsEmpty}}Any
  {{- else if .IsAny}}Any
	{{- else if .IsBool}}bool
	{{- else if .IsInt64}}int
	{{- else if .IsFloat64}}float
	{{- else if .IsInt}}int
	{{- else if .ArrayValue }}List[{{template "type-doc" .ArrayValue}}]
  {{- else if .MapValue }}Dict[str,{{template "type-doc" .MapValue}}]
	{{- else if .IsExternal }}:class:`{{.PascalName}}`
	{{- else if .IsObject }}:class:`{{.PascalName}}{{if eq "List" .PascalName}}Request{{end}}`
	{{- else if .Enum }}:class:`{{.PascalName}}`
	{{- else}}any /* MISSING TYPE */
	{{- end -}}
{{- end -}}

{{range .Services}}
class {{.Name}}API:{{if .Description}}
    """{{.Comment "    " 110}}"""
    {{end}}
    def __init__(self, api_client):
        self._api = api_client
    {{range .Waits}}
    def {{.SnakeName}}(self{{range .Binding}}, {{.PollField.SnakeName}}: {{template "type-nq" .PollField.Entity}}{{end}},
      timeout=timedelta(minutes={{.Timeout}}), callback: Optional[Callable[[{{.Poll.Response.PascalName}}], None]] = None) -> {{.Poll.Response.PascalName}}:
      deadline = time.time() + timeout.total_seconds()
      target_states = ({{range .Success}}{{.Entity.PascalName}}.{{.ConstantName}}, {{end}}){{if .Failure}}
      failure_states = ({{range .Failure}}{{.Entity.PascalName}}.{{.ConstantName}}, {{end}}){{end}}
      status_message = 'polling...'
      attempt = 1
      while time.time() < deadline:
        poll = self.{{.Poll.SnakeName}}({{range $i, $b := .Binding}}{{if $i}}, {{end}}{{.PollField.SnakeName}}={{.PollField.SnakeName}}{{- end}})
        status = poll{{range .StatusPath}}.{{.SnakeName}}{{end}}
        {{if .ComplexMessagePath -}}
        status_message = f'current status: {status}'
        if poll.{{.MessagePathHead.SnakeName}}:
          status_message = poll{{range .MessagePath}}.{{.SnakeName}}{{end}}
        {{- else if .MessagePath -}}
        status_message = poll{{range .MessagePath}}.{{.SnakeName}}{{end}}
        {{- else -}}
        status_message = f'current status: {status}'
        {{- end}}
        if status in target_states:
          return poll
        if callback:
          callback(poll)
        {{if .Failure -}}
        if status in failure_states:
          msg = f'failed to reach {{range $i, $e := .Success}}{{if $i}} or {{end}}{{$e.Content}}{{end}}, got {status}: {status_message}'
          raise OperationFailed(msg)
        {{end}}prefix = f"{{range $i, $b := .Binding}}{{if $i}}, {{end -}}
           {{.PollField.SnakeName}}={{"{"}}{{.PollField.SnakeName}}{{"}"}}
        {{- end}}"
        sleep = attempt
        if sleep > 10:
          # sleep 10s max per attempt
          sleep = 10
        _LOG.debug(f'{prefix}: ({status}) {status_message} (sleeping ~{sleep}s)')
        time.sleep(sleep + random.random())
        attempt += 1
      raise TimeoutError(f'timed out after {timeout}: {status_message}')
    {{end}}

    {{range .Methods}}
    def {{.SnakeName}}{{if .IsNameReserved}}_{{end}}(self{{if .Request}}
      {{range .Request.RequiredFields}}, {{.SnakeName}}: {{template "type-nq" .Entity}}{{end}}
      {{if .Request.NonRequiredFields}}, *
        {{range .Request.NonRequiredFields}}, {{.SnakeName}}: Optional[{{template "type-nq" .Entity}}] = None{{end}}
      {{- end}}
    {{- end}}){{template "method-return-type" .}}:
        {{if .Description}}"""{{.Comment "        " 110 | trimSuffix "\"" }}
        {{with .Request}}{{range .RequiredFields}}
        :param {{.SnakeName}}: {{template "type-doc" .Entity}}{{if .Description}}
          {{.Comment "          " 110 | trimSuffix "\"" }}{{end}}
        {{- end}}{{range .NonRequiredFields}}
        :param {{.SnakeName}}: {{template "type-doc" .Entity}} (optional){{if .Description}}
          {{.Comment "          " 110 | trimSuffix "\"" }}{{end}}
        {{- end}}
        {{end}}
        {{if and .Wait (and (not .IsCrudRead) (not (eq .SnakeName "get_run"))) -}}
        :returns:
          Long-running operation waiter for {{template "type-doc" .Wait.Poll.Response}}.
          See :method:{{.Wait.SnakeName}} for more details.
        {{- else if .Response}}:returns: {{if .Response.ArrayValue -}}
          Iterator over {{template "type-doc" .Response.ArrayValue}}
        {{- else if .Pagination -}}
          Iterator over {{template "type-doc" .Pagination.Entity}}
        {{- else -}}
          {{template "type-doc" .Response}}
        {{- end}}{{end}}
        """{{end}}
        {{if .Request -}}
        {{template "method-serialize" .}}
        {{- end}}
        {{template "method-call" .}}

    {{if and .Wait (and (not .IsCrudRead) (not (eq .SnakeName "get_run"))) }}
    def {{.SnakeName}}_and_wait(self{{range .Request.RequiredFields}}, {{.SnakeName}}: {{template "type-nq" .Entity}}{{end}}
        {{if .Request.NonRequiredFields}}, * {{range .Request.NonRequiredFields}}, {{.SnakeName}}: Optional[{{template "type-nq" .Entity}}] = None{{end}}{{- end}},
        timeout=timedelta(minutes={{.Wait.Timeout}})) -> {{.Wait.Poll.Response.PascalName}}:
        return self.{{.SnakeName}}({{range $i, $x := .Request.Fields}}{{if $i}}, {{end}}{{.SnakeName}}={{.SnakeName}}{{end}}).result(timeout=timeout)
    {{end}}
    {{end -}}
{{- end}}

{{define "method-serialize" -}}
        {{if or .Request.HasJsonField .Request.HasQueryField -}}
        {{if .Request.HasJsonField}}body = {}{{end}}{{if .Request.HasQueryField}}
        query = {}{{end}}
        {{- range .Request.Fields}}{{if not .IsPath}}
        if {{.SnakeName}} is not None: {{if .IsQuery}}query{{else}}body{{end}}['{{.Name}}'] = {{template "validated" (dict
          "var" .SnakeName
          "name" .SnakeName
          "entity" .Entity
        )}}{{end}}{{end}}
        {{- end}}
{{- end}}

{{define "method-call" -}}
        {{if .Pagination -}}{{template "method-call-paginated" .}}
        {{- else if and .Wait (and (not .IsCrudRead) (not (eq .SnakeName "get_run"))) -}}{{template "method-call-retried" .}}
        {{- else}}{{template "method-call-default" .}}{{end}}
{{- end}}

{{define "method-call-retried" -}}
        {{if .Response}}op_response = {{end}}{{template "method-do" .}}
        return Wait(self.{{.Wait.SnakeName}}
          {{if .Response}}, response = {{.Response.PascalName}}.from_dict(op_response){{end}}
          {{range .Wait.Binding}}, {{.PollField.SnakeName}}={{if .IsResponseBind}}op_response['{{.Bind.Name}}']{{else}}{{.Bind.SnakeName}}{{end}}
        {{- end}})
{{- end}}

{{define "method-call-paginated" -}}
        {{if .Pagination.MultiRequest}}
        {{if .NeedsOffsetDedupe -}}
        # deduplicate items that may have been added during iteration
        seen = set()
        {{- end}}{{if and .Pagination.Offset (not (eq .Path "/api/2.0/clusters/events")) }}
        query['{{.Pagination.Offset.Name}}'] = {{if eq .Pagination.Increment 1}}1{{else}}0{{end}}{{end}}
        while True:
          json = {{template "method-do" .}}
          if '{{.Pagination.Results.Name}}' not in json or not json['{{.Pagination.Results.Name}}']:
            return
          for v in json['{{.Pagination.Results.Name}}']:
            {{if .NeedsOffsetDedupe -}}
            i = v['{{.IdentifierField.Name}}']
            if i in seen:
              continue
            seen.add(i)
            {{end -}}
            yield {{.Pagination.Entity.PascalName}}.from_dict(v)
          {{if eq .Path "/api/2.0/clusters/events" -}}
          if 'next_page' not in json or not json['next_page']:
            return
          body = json['next_page']
          {{- else if .Pagination.Token -}}
          if '{{.Pagination.Token.Bind.Name}}' not in json or not json['{{.Pagination.Token.Bind.Name}}']:
            return
          {{if eq "GET" .Verb}}query{{else}}body{{end}}['{{.Pagination.Token.PollField.Name}}'] = json['{{.Pagination.Token.Bind.Name}}']
          {{- else if eq .Pagination.Increment 1 -}}
          query['{{.Pagination.Offset.Name}}'] += 1
          {{- else -}}
          query['{{.Pagination.Offset.Name}}'] += len(json['{{.Pagination.Results.Name}}'])
          {{- end}}
        {{else}}
        json = {{template "method-do" .}}
        return [{{.Pagination.Entity.PascalName}}.from_dict(v) for v in json{{if .Pagination.Results}}.get('{{.Pagination.Results.Name}}', []){{end}}]
        {{end}}
{{- end}}

{{define "method-call-default" -}}
        {{if .Response}}
        json = {{end}}{{template "method-do" .}}
        {{if .Response -}}
          {{if .Response.ArrayValue -}}
            return [{{.Response.ArrayValue.PascalName}}.from_dict(v) for v in json]
          {{- else -}}
            return {{.Response.PascalName}}.from_dict(json)
          {{- end}}
        {{- end}}
{{- end}}

{{define "method-do" -}}
self._api.do('{{.Verb}}', {{if .PathParts -}}
  f'{{range  .PathParts}}{{.Prefix}}{{if .Field}}{{"{"}}{{.Field.SnakeName}}{{with .Field.Entity.Enum}}.value{{end}}{{"}"}}{{else if .IsAccountId}}{{"{self._api.account_id}"}}{{end}}{{ end }}'
{{- else}}'{{.Path}}'{{end}}{{if .Request}}{{if .Request.HasQueryField}}, query=query{{end}}{{if .Request.HasJsonField}}, body=body{{end}}{{end}})
{{- end}}

{{define "method-return-type" -}}
  {{if and .Wait (and (not .IsCrudRead) (not (eq .SnakeName "get_run"))) }} -> Wait[{{.Wait.Poll.Response.PascalName}}]
  {{- else if .Response}} -> {{if .Response.ArrayValue -}}
    Iterator[{{.Response.ArrayValue.PascalName}}]
  {{- else if .Pagination -}}
    Iterator[{{.Pagination.Entity.PascalName}}]
  {{- else -}}
    {{- if .Response.IsExternal -}}
      {{.Response.Package.Name}}.{{.Response.PascalName}}
    {{- else -}}
      {{.Response.PascalName}}
    {{- end -}}
  {{- end}}{{end}}
{{- end}}

