# Code generated from OpenAPI specs by Databricks SDK Generator. DO NOT EDIT.

from dataclasses import dataclass
from enum import Enum
from typing import Dict, List, Any, Iterator, Type
import time
import random
import logging
from ..errors import OperationTimeout, OperationFailed
from ._internal import _enum, _from_dict, _repeated

_LOG = logging.getLogger('databricks.sdk')

{{range .ImportedEntities}}
from .{{.Package.Name}} import {{.PascalName}}{{end}}

# all definitions in this file are in alphabetical order
{{range .Types}}
{{if .Fields -}}@dataclass
class {{.PascalName}}{{if eq "List" .PascalName}}Request{{end}}:{{if .Description}}
    """{{.Comment "    " 100}}"""
    {{end}}{{- range .RequiredFields | alphanumOnly}}
    {{.SnakeName}}: {{template "type" .Entity}}{{end}}{{- range .NonRequiredFields | alphanumOnly}}
    {{.SnakeName}}: {{template "type" .Entity}} = None{{end}}
    {{if .HasJsonField -}}
    def as_dict(self) -> dict:
        body = {}
        {{range .Fields | alphanumOnly}}if self.{{.SnakeName -}}: body['{{.Name}}'] = {{template "as_request_type" .}}
        {{end -}}
        return body

    @classmethod
    def from_dict(cls, d: Dict[str, any]) -> '{{.PascalName}}{{if eq "List" .PascalName}}Request{{end}}':
        return cls({{range $i, $f := .Fields | alphanumOnly}}{{if $i}}, {{end}}{{$f.SnakeName}}={{template "from_dict_type" $f}}{{end}})
    {{end}}

{{else if .ArrayValue}}type {{.PascalName}} []{{template "type" .ArrayValue}}
{{else if .MapValue}}{{.PascalName}} = {{template "type-nq" .}}
{{else if .Enum}}class {{.PascalName}}(Enum):
    {{if .Description}}"""{{.Comment "    " 100 | trimSuffix "\"" }}"""{{end}}
    {{range .Enum }}
    {{.Content}}{{if eq .Content "None"}}_{{end}} = '{{.Content}}'{{end}}{{end}}
{{end}}
{{- define "from_dict_type" -}}
	{{- if not .Entity }}None
	{{- else if .Entity.ArrayValue }}{{if .Entity.ArrayValue.IsObject}}_repeated(d, '{{.Name}}', {{.Entity.ArrayValue.PascalName}}){{else}}d.get('{{.Name}}', None){{end}}
	{{- else if or .Entity.IsObject .Entity.IsExternal }}_from_dict(d, '{{.Name}}', {{.Entity.PascalName}})
	{{- else if .Entity.Enum }}_enum(d, '{{.Name}}', {{.Entity.PascalName}})
	{{- else}}d.get('{{.Name}}', None){{- end -}}
{{- end -}}
{{- define "as_request_type" -}}
	{{- if not .Entity }}None # ERROR: No Type
	{{- else if .Entity.ArrayValue }}[{{if .Entity.ArrayValue.IsObject}}v.as_dict(){{else}}v{{end}} for v in self.{{.SnakeName}}]
	{{- else if .Entity.IsObject }}self.{{.SnakeName}}.as_dict()
	{{- else if .Entity.Enum }}self.{{.SnakeName}}.value
	{{- else}}self.{{.SnakeName}}{{- end -}}
{{- end -}}
{{- define "type" -}}
	{{- if not . }}any # ERROR: No Type
	{{- else if .ArrayValue }}'List[{{template "type-nq" .ArrayValue}}]'
	{{- else if .MapValue }}'Dict[str,{{template "type-nq" .MapValue}}]'
	{{- else if .IsExternal }}'{{.PascalName}}'
	{{- else if .IsObject }}'{{.PascalName}}{{if eq "List" .PascalName}}Request{{end}}'
	{{- else if .Enum }}'{{.PascalName}}'
	{{- else}}{{template "type-nq" .}}{{- end -}}
{{- end -}}
{{- define "type-nq" -}}
	{{- if .IsString}}str
	{{- else if .IsEmpty}}Any
  {{- else if .IsAny}}Any
	{{- else if .IsBool}}bool
	{{- else if .IsInt64}}int
	{{- else if .IsFloat64}}float
	{{- else if .IsInt}}int
	{{- else if .ArrayValue }}List[{{template "type-nq" .ArrayValue}}]
  {{- else if .MapValue }}Dict[str,{{template "type-nq" .MapValue}}]
	{{- else if .IsExternal }}{{.PascalName}}
	{{- else if .IsObject }}{{.PascalName}}{{if eq "List" .PascalName}}Request{{end}}
	{{- else if .Enum }}{{.PascalName}}
	{{- else}}any /* MISSING TYPE */
	{{- end -}}
{{- end -}}

{{range .Services}}
class {{.Name}}API:{{if .Description}}
    """{{.Comment "    " 110}}"""
    {{end}}
    def __init__(self, api_client):
        self._api = api_client
    {{range .Methods}}
    def {{.SnakeName}}{{if .IsNameReserved}}_{{end}}(self{{if .Request}}
      {{range .Request.RequiredFields}}, {{.SnakeName}}: {{template "type-nq" .Entity}}{{end}}
      {{if .Request.NonRequiredFields}}, *
        {{range .Request.NonRequiredFields}}, {{.SnakeName}}: {{template "type-nq" .Entity}} = None{{end}}
      {{- end}}{{if .Wait}}, wait={{if .IsCrudRead}}False{{else}}True{{end}}, timeout={{.Wait.Timeout}}{{end}}, **kwargs
    {{- end}}){{template "method-return-type" .}}:
        {{if .Description}}"""{{.Comment "        " 110 | trimSuffix "\"" }}"""{{end}}
        {{if .Request -}}request = kwargs.get('request', None)
        if not request: # request is not given through keyed args
          request = {{template "type-nq" .Request}}({{range $i, $f := .Request.Fields}}{{if $i}}, {{end}}{{.SnakeName}}={{.SnakeName}}{{end}})
        {{template "method-serialize" .}}
        {{- end}}
        {{template "method-call" .}}
    {{end -}}
{{- end}}

{{define "method-serialize" -}}
        {{if .Request.HasJsonField}}body = request.as_dict(){{end}}{{if .Request.HasQueryField}}
        query = {}
        {{- range .Request.Fields}}{{if .IsQuery}}
        if {{.SnakeName}}: query['{{.Name}}'] = {{template "method-param-bind" .}}{{end}}{{end}}
        {{end}}
{{- end}}

{{define "method-call" -}}
        {{if .Pagination -}}{{template "method-call-paginated" .}}
        {{- else if .Wait -}}{{template "method-call-retried" .}}
        {{- else}}{{template "method-call-default" .}}{{end}}
{{- end}}

{{define "method-call-retried" -}}
        if wait:
          {{if .Response}}op_response = {{end}}{{template "method-do" .}}
          started = time.time()
          target_states = ({{range .Wait.Success}}{{.Entity.PascalName}}.{{.Content}}, {{end}}){{if .Wait.Failure}}
          failure_states = ({{range .Wait.Failure}}{{.Entity.PascalName}}.{{.Content}}, {{end}}){{end}}
          status_message = 'polling...'
          attempt = 1
          while (started + (timeout*60)) > time.time():
            poll = self.{{.Wait.Poll.SnakeName}}({{range $i, $b := .Wait.Binding}}{{if $i}}, {{end}}
              {{$b.PollField.SnakeName}}={{if $b.IsResponseBind}}op_response['{{$b.Bind.Name}}']{{else}}request.{{$b.Bind.SnakeName}}{{end}}
            {{- end}})
            status = poll{{range .Wait.StatusPath}}.{{.SnakeName}}{{end}}
            {{if .Wait.ComplexMessagePath -}}
            status_message = f'current status: {status}'
            if poll.{{.Wait.MessagePathHead.SnakeName}}:
              status_message = poll{{range .Wait.MessagePath}}.{{.SnakeName}}{{end}}
            {{- else if .Wait.MessagePath -}}
            status_message = poll{{range .Wait.MessagePath}}.{{.SnakeName}}{{end}}
            {{- else -}}
            status_message = f'current status: {status}'
            {{- end}}
            if status in target_states:
              return poll
            {{if .Wait.Failure -}}
            if status in failure_states:
              msg = f'failed to reach {{range $i, $e := .Wait.Success}}{{if $i}} or {{end}}{{$e.Content}}{{end}}, got {status}: {status_message}'
              raise OperationFailed(msg)
            {{end}}prefix = f"{{.Service.SnakeName}}.{{.Wait.Poll.SnakeName}}({{range $i, $b := .Wait.Binding}}{{if $i}}, {{end -}}
               {{$b.PollField.SnakeName}}={{"{"}}{{if $b.IsResponseBind}}op_response['{{$b.Bind.Name}}']{{else}}request.{{$b.Bind.SnakeName}}{{end}}{{"}"}}
            {{- end}})"
            sleep = attempt
            if sleep > 10:
              # sleep 10s max per attempt
              sleep = 10
            _LOG.debug(f'{prefix}: ({status}) {status_message} (sleeping ~{sleep}s)')
            time.sleep(sleep + random.random())
            attempt += 1
          raise TimeoutError(f'timed out after {timeout} minutes: {status_message}')
        {{if .IsCrudRead}}{{template "method-call-default" .}}{{else}}{{template "method-do" .}}{{end}}
{{- end}}

{{define "method-call-paginated" -}}
        {{if .Pagination.MultiRequest}}
        {{if .Pagination.NeedsOffsetDedupe -}}
        # deduplicate items that may have been added during iteration
        seen = set()
        {{- end}}{{if and .Pagination.Offset (not (eq .Path "/api/2.0/clusters/events")) }}
        query['{{.Pagination.Offset.Name}}'] = {{if eq .Pagination.Increment 1}}1{{else}}0{{end}}{{end}}
        while True:
          json = {{template "method-do" .}}
          if '{{.Pagination.Results.Name}}' not in json or not json['{{.Pagination.Results.Name}}']:
            return
          for v in json['{{.Pagination.Results.Name}}']:
            {{if .Pagination.NeedsOffsetDedupe -}}
            i = v['{{.Pagination.Entity.IdentifierField.Name}}']
            if i in seen:
              continue
            seen.add(i)
            {{end -}}
            yield {{.Pagination.Entity.PascalName}}.from_dict(v)
          {{if eq .Path "/api/2.0/clusters/events" -}}
          if 'next_page' not in json or not json['next_page']:
            return
          body = json['next_page']
          {{- else if .Pagination.Token -}}
          if '{{.Pagination.Token.Bind.Name}}' not in json or not json['{{.Pagination.Token.Bind.Name}}']:
            return
          {{if eq "GET" .Verb}}query{{else}}body{{end}}['{{.Pagination.Token.PollField.Name}}'] = json['{{.Pagination.Token.Bind.Name}}']
          {{- else if eq .Pagination.Increment 1 -}}
          query['{{.Pagination.Offset.Name}}'] += 1
          {{- else -}}
          query['{{.Pagination.Offset.Name}}'] += len(json['{{.Pagination.Results.Name}}'])
          {{- end}}
        {{else}}
        json = {{template "method-do" .}}
        return [{{.Pagination.Entity.PascalName}}.from_dict(v) for v in json{{if .Pagination.Results}}.get('{{.Pagination.Results.Name}}', []){{end}}]
        {{end}}
{{- end}}

{{define "method-call-default" -}}
        {{if .Response}}
        json = {{end}}{{template "method-do" .}}
        {{if .Response -}}
          {{if .Response.ArrayValue -}}
            return [{{.Response.ArrayValue.PascalName}}.from_dict(v) for v in json]
          {{- else -}}
            return {{.Response.PascalName}}.from_dict(json)
          {{- end}}
        {{- end}}
{{- end}}

{{define "method-do" -}}
self._api.do('{{.Verb}}', {{if .PathParts -}}
  f'{{range  .PathParts}}{{.Prefix}}{{if .Field}}{{"{"}}request.{{.Field.SnakeName}}{{"}"}}{{else if .IsAccountId}}{{"{self._api.account_id}"}}{{end}}{{ end }}'
{{- else}}'{{.Path}}'{{end}}{{if .Request}}{{if .Request.HasQueryField}}, query=query{{end}}{{if .Request.HasJsonField}}, body=body{{end}}{{end}})
{{- end}}

{{define "method-return-type" -}}
  {{if .Wait}} -> {{.Wait.Poll.Response.PascalName}}
  {{- else if .Response}} -> {{if .Response.ArrayValue -}}
    Iterator[{{.Response.ArrayValue.PascalName}}]
  {{- else if .Pagination -}}
    Iterator[{{.Pagination.Entity.PascalName}}]
  {{- else -}}
    {{.Response.PascalName}}
  {{- end}}{{end}}
{{- end}}

{{- define "method-param-bind" -}}
{{- if not .Entity }}None # ERROR: No Type
{{- else if .Entity.ArrayValue }}[{{if .Entity.ArrayValue.IsObject}}v.as_dict(){{else}}v{{end}} for v in request.{{.SnakeName}}]
{{- else if .Entity.IsObject }}request.{{.SnakeName}}.as_dict()
{{- else if .Entity.Enum }}request.{{.SnakeName}}.value
{{- else}}request.{{.SnakeName}}{{- end -}}
{{- end -}}